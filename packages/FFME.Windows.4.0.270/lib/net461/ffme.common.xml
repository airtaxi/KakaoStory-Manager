<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ffme.common</name>
    </assembly>
    <members>
        <member name="T:Unosquare.FFME.Aspects">
            <summary>
            Provides constants for logging aspect identifiers
            </summary>
        </member>
        <member name="T:Unosquare.FFME.ClosedCaptions.CaptionsChannel">
            <summary>
            Enumerates the 4 different CC channels
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsChannel.CCP">
            <summary>
            No channel specified -- use previous
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsChannel.CC1">
            <summary>
            Field 1, Channel 1
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsChannel.CC2">
            <summary>
            Field 1, Channel 2
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsChannel.CC3">
            <summary>
            Field 2, Channel 1
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsChannel.CC4">
            <summary>
            Field 2, Channel 2
            </summary>
        </member>
        <member name="T:Unosquare.FFME.ClosedCaptions.CaptionsColor">
            <summary>
            Enumerates the different Closed-Captioning Colors
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.None">
            <summary>
            No color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.White">
            <summary>
            The white color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.WhiteTransparent">
            <summary>
            The white transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.Green">
            <summary>
            The green color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.GreenTransparent">
            <summary>
            The green transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.Blue">
            <summary>
            The blue color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.BlueTransparent">
            <summary>
            The blue transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.Cyan">
            <summary>
            The cyan color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.CyanTransparent">
            <summary>
            The cyan transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.Red">
            <summary>
            The red color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.RedTransparent">
            <summary>
            The red transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.Yellow">
            <summary>
            The yellow color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.YellowTransparent">
            <summary>
            The yellow transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.Magenta">
            <summary>
            The magenta color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.MagentaTransparent">
            <summary>
            The magenta transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.WhiteItalics">
            <summary>
            The white italics color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.WhiteItalicsTransparent">
            <summary>
            The white italics transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.BackgroundTransparent">
            <summary>
            The background transparent color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.ForegroundBlack">
            <summary>
            The foreground black color
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsColor.ForegroundBlackUnderline">
            <summary>
            The foreground black underline color
            </summary>
        </member>
        <member name="T:Unosquare.FFME.ClosedCaptions.CaptionsCommand">
            <summary>
            Enumerates the Closed-Captioning misc commands
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsCommand.None">
            <summary>
            No command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsCommand.Resume">
            <summary>
            The resume command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsCommand.Backspace">
            <summary>
            The backspace command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsCommand.AlarmOff">
            <summary>
            The alarm off command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsCommand.AlarmOn">
            <summary>
            The alarm on command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsCommand.ClearLine">
            <summary>
            The clear line command
            Delete to end of Row (DER)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsCommand.RollUp2">
            <summary>
            The roll up 2 command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsCommand.RollUp3">
            <summary>
            The roll up 3 command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsCommand.RollUp4">
            <summary>
            The roll up 4 command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsCommand.StartCaption">
            <summary>
            The start caption command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsCommand.StartNonCaption">
            <summary>
            The start non caption command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsCommand.ResumeNonCaption">
            <summary>
            The resume non caption command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsCommand.ClearScreen">
            <summary>
            The clear screen command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsCommand.NewLine">
            <summary>
            The new line command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsCommand.ClearBuffer">
            <summary>
            The clear buffer command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsCommand.EndCaption">
            <summary>
            The end caption command
            </summary>
        </member>
        <member name="T:Unosquare.FFME.ClosedCaptions.CaptionsPacketType">
            <summary>
            Defines Closed-Captioning Packet types
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsPacketType.Unrecognized">
            <summary>
            The unrecognized packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsPacketType.NullPad">
            <summary>
            The null pad packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsPacketType.XdsClass">
            <summary>
            The XDS class packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsPacketType.Command">
            <summary>
            The misc command packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsPacketType.Text">
            <summary>
            The text packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsPacketType.MidRow">
            <summary>
            The mid row packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsPacketType.Preamble">
            <summary>
            The preamble packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsPacketType.Color">
            <summary>
            The color packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsPacketType.PrivateCharset">
            <summary>
            The charset packet type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsPacketType.Tabs">
            <summary>
            The tabs packet type
            Section B.4 Tab Offsets
            </summary>
        </member>
        <member name="T:Unosquare.FFME.ClosedCaptions.CaptionsStyle">
            <summary>
            Enumerates the different Closed-Captioning Styles
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.None">
            <summary>
            The none style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.White">
            <summary>
            The white style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteUnderline">
            <summary>
            The white underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.Green">
            <summary>
            The green style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.GreenUnderline">
            <summary>
            The green underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.Blue">
            <summary>
            The blue style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.BlueUnderline">
            <summary>
            The blue underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.Cyan">
            <summary>
            The cyan style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.CyanUnderline">
            <summary>
            The cyan underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.Red">
            <summary>
            The red style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.RedUnderline">
            <summary>
            The red underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.Yellow">
            <summary>
            The yellow style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.YellowUnderline">
            <summary>
            The yellow underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.Magenta">
            <summary>
            The magenta style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.MagentaUnderline">
            <summary>
            The magenta underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteItalics">
            <summary>
            The white italics style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteItalicsUnderline">
            <summary>
            The white italics underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteIndent0">
            <summary>
            The white indent0 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteIndent0Underline">
            <summary>
            The white indent0 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteIndent4">
            <summary>
            The white indent4 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteIndent4Underline">
            <summary>
            The white indent4 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteIndent8">
            <summary>
            The white indent8 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteIndent8Underline">
            <summary>
            The white indent8 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteIndent12">
            <summary>
            The white indent12 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteIndent12Underline">
            <summary>
            The white indent12 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteIndent16">
            <summary>
            The white indent16 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteIndent16Underline">
            <summary>
            The white indent16 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteIndent20">
            <summary>
            The white indent20 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteIndent20Underline">
            <summary>
            The white indent20 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteIndent24">
            <summary>
            The white indent24 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteIndent24Underline">
            <summary>
            The white indent24 underline style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteIndent28">
            <summary>
            The white indent28 style
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsStyle.WhiteIndent28Underline">
            <summary>
            The white indent28 underline style
            </summary>
        </member>
        <member name="T:Unosquare.FFME.ClosedCaptions.CaptionsXdsClass">
            <summary>
            Defines Closed-Captioning XDS Packet Classes
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsXdsClass.None">
            <summary>
            The none XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsXdsClass.CurrentStart">
            <summary>
            The current start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsXdsClass.CurrentContinue">
            <summary>
            The current continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsXdsClass.FutureStart">
            <summary>
            The future start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsXdsClass.FutureContinue">
            <summary>
            The future continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsXdsClass.ChannelStart">
            <summary>
            The channel start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsXdsClass.ChannelContinue">
            <summary>
            The channel continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsXdsClass.MiscStart">
            <summary>
            The misc start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsXdsClass.MiscContinue">
            <summary>
            The misc continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsXdsClass.PublicServiceStart">
            <summary>
            The public service start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsXdsClass.PublicServiceContinue">
            <summary>
            The public service continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsXdsClass.ReservedStart">
            <summary>
            The reserved start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsXdsClass.ReservedContinue">
            <summary>
            The reserved continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsXdsClass.PrivateStart">
            <summary>
            The private start XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsXdsClass.PrivateContinue">
            <summary>
            The private continue XDS Class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.ClosedCaptions.CaptionsXdsClass.EndAll">
            <summary>
            The end all XDS Class
            </summary>
        </member>
        <member name="T:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket">
            <inheritdoc />
            <summary>
            Represents a 3-byte packet of closed-captioning data in EIA-608 format.
            See: http://jackyjung.tistory.com/attachment/499e14e28c347DB.pdf
            </summary>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.#ctor(System.TimeSpan,System.Byte*,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket" /> class.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="source">The source.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.#ctor(System.TimeSpan,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket"/> class.
            </summary>
            <param name="timestamp">The timestamp.</param>
            <param name="header">The header.</param>
            <param name="d0">The d0.</param>
            <param name="d1">The d1.</param>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.Data">
            <summary>
            Gets the original packet data.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.D0">
            <summary>
            Gets the first of the two-byte packet data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.D1">
            <summary>
            Gets the second of the two-byte packet data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.Timestamp">
            <summary>
            Gets the timestamp this packet applies to.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.FieldParity">
            <summary>
            Gets the NTSC field (1 or 2).
            0 for unknown/null packet
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.FieldChannel">
            <summary>
            Gets the channel. 0 for use previous packet, 1 or 2 for specific channel.
            0 just means to use what a prior packet had specified.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.Channel">
            <summary>
            Gets the channel CC1, CC2, CC3, or CC4.
            Returns None when not yet computed
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.PacketType">
            <summary>
            Gets the type of the packet.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.Tabs">
            <summary>
            Gets the number of tabs, if the packet type is of Tabs
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.Command">
            <summary>
            Gets the Misc Command, if the packet type is of Command
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.Color">
            <summary>
            Gets the Color, if the packet type is of Color
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.MidRowStyle">
            <summary>
            Gets the Style, if the packet type is of Mid Row Style
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.XdsClass">
            <summary>
            Gets the XDS Class, if the packet type is of XDS
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.PreambleRow">
            <summary>
            Gets the Preamble Row Number (1 through 15), if the packet type is of Preamble
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.PreambleStyle">
            <summary>
            Gets the Style, if the packet type is of Preamble
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.PreambleIndent">
            <summary>
            Gets the Indent Style, if the packet type is of Preamble
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.Text">
            <summary>
            Gets the text, if the packet type is of text.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.IsControlPacket">
            <summary>
            Gets a value indicating whether this is a control packet.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.IsUnderlined">
            <summary>
            Gets a value indicating whether the current and following
            caption text packets are underlined; only valid for preamble or mid-row packets
            </summary>
        </member>
        <member name="P:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.IsItalics">
            <summary>
            Gets a value indicating whether the current and following
            caption text packets are italicized; only valid for preamble or mid-row packets
            </summary>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.ComputeChannel(System.Int32,System.Int32)">
            <summary>
            Computes the CC channel.
            </summary>
            <param name="fieldParity">The field parity.</param>
            <param name="fieldChannel">The field channel.</param>
            <returns>The CC channel according to the parity and channel</returns>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.IsRepeatedControlCode(Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket)">
            <summary>
            Determines whether a previous packet is a repeated control code.
            This is according to CEA-608 Section D.2 Transmission of Control Code Pairs
            </summary>
            <param name="previousPacket">The previous packet.</param>
            <returns>
              <c>true</c> it is a repeated control code packet.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.CompareTo(Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.HeaderHasMarkers(System.Byte)">
            <summary>
            Checks that the header byte starts with 11111b (5 ones binary)
            </summary>
            <param name="data">The data.</param>
            <returns>If header has markers</returns>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.IsHeaderValidFlagSet(System.Byte)">
            <summary>
            Determines whether the valid flag of the header byte is set.
            </summary>
            <param name="data">The data.</param>
            <returns>
              <c>true</c> if [is header valid flag set] [the specified data]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.GetHeaderFieldType(System.Byte)">
            <summary>
            Gets the NTSC field type (1 or 2).
            Returns 0 for unknown.
            </summary>
            <param name="data">The data.</param>
            <returns>The field type</returns>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.DropParityBit(System.Byte)">
            <summary>
            Drops the parity bit from the data byte.
            </summary>
            <param name="input">The input.</param>
            <returns>The byte without a parity bit.</returns>
        </member>
        <member name="M:Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket.ToEia608Char(System.Byte)">
            <summary>
            Converts an ASCII character code to an EIA-608 char (in Unicode)
            </summary>
            <param name="input">The input.</param>
            <returns>The charset char.</returns>
        </member>
        <member name="T:Unosquare.FFME.Commands.CommandBase">
            <inheritdoc />
            <summary>
            Represents a promise-style command executed in a queue.
            </summary>
            <seealso cref="T:Unosquare.FFME.Primitives.PromiseBase" />
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandBase.#ctor(Unosquare.FFME.MediaEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.CommandBase"/> class.
            </summary>
            <param name="mediaCore">The media core.</param>
        </member>
        <member name="P:Unosquare.FFME.Commands.CommandBase.Unosquare#FFME#Shared#ILoggingSource#LoggingHandler">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Commands.CommandBase.MediaCore">
            <summary>
            Contains a reference to the media engine associated with this command
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.CommandBase.CommandType">
            <summary>
            Gets the command type identifier.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.CommandBase.AffectsSeekingState">
            <summary>
            Gets a value indicating whether this command processes seeking operations
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandBase.TypeAffectsSeekingState(Unosquare.FFME.Commands.CommandType)">
            <summary>
            Determines if the command type affects seeking states.
            </summary>
            <param name="commandType">Type of the command.</param>
            <returns>The value</returns>
        </member>
        <member name="T:Unosquare.FFME.Commands.CommandManager">
            <inheritdoc />
            <summary>
            Provides centralized access to playback controls
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.#ctor(Unosquare.FFME.MediaEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.CommandManager" /> class.
            </summary>
            <param name="mediaCore">The media core.</param>
        </member>
        <member name="P:Unosquare.FFME.Commands.CommandManager.Unosquare#FFME#Shared#ILoggingSource#LoggingHandler">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Commands.CommandManager.IsExecutingDirectCommand">
            <summary>
            Gets a value indicating whether a direct command is currently executing.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.CommandManager.IsClosing">
            <summary>
            Gets a value indicating whether a close command is in progress
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.CommandManager.IsOpening">
            <summary>
            Gets a value indicating whether an open command is in progress
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.CommandManager.IsChanging">
            <summary>
            Gets a value indicating whether a change media command is in progress
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.CommandManager.IsSeeking">
            <summary>
            Gets a value indicating whether the media seeking is in progress.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.CommandManager.IsActivelySeeking">
            <summary>
            Gets a value indicating whether a seek command is currently executing.
            This differs from the <see cref="P:Unosquare.FFME.Commands.CommandManager.IsSeeking"/> property as this is the realtime
            state of a seek operation as opposed to a general, delayed state of the command manager.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.CommandManager.IsStopWorkersPending">
            <summary>
            Gets a value indicating whether Reading, Decoding and Rendering workers are
            pending stop.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.CommandManager.HasQueuedCommands">
            <summary>
            Gets a value indicating whether the command queued contains commands.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.CommandManager.CanExecuteQueuedCommands">
            <summary>
            Gets a value indicating whether this instance can execute queued commands.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.CommandManager.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.CommandManager.HasQueuedSeekCommands">
            <summary>
            Gets a value indicating whether the command queue contains seek commands.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.OpenAsync(System.Uri)">
            <summary>
            Opens a media URI
            </summary>
            <param name="uri">The URI.</param>
            <returns>The awaitable task. The task result determines if the command was successfully started</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.OpenAsync(Unosquare.FFME.Shared.IMediaInputStream)">
            <summary>
            Opens the media stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The awaitable task. The task result determines if the command was successfully started</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.CloseAsync">
            <summary>
            Closes the currently open media.
            </summary>
            <returns>The awaitable task. The task result determines if the command was successfully started</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.ChangeMediaAsync">
            <summary>
            Begins the process of changing/updating media parameters.
            </summary>
            <returns>The awaitable task. The task result determines if the command was successfully started</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.PlayAsync">
            <summary>
            Begins playback of the media.
            </summary>
            <returns>The awaitable task. The task result determines if the command was successfully started</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.PauseAsync">
            <summary>
            Pauses the playback of the media.
            </summary>
            <returns>The awaitable task. The task result determines if the command was successfully started</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.StopAsync">
            <summary>
            Stops the playback of the media.
            </summary>
            <returns>The awaitable task. The task result determines if the command was successfully started</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.SeekAsync(System.TimeSpan)">
            <summary>
            Seeks to the target position on the media
            </summary>
            <param name="target">The target.</param>
            <returns>The awaitable task. The task result determines if the command was successfully started</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.StepForwardAsync">
            <summary>
            Seeks a single frame forward.
            </summary>
            <returns>The awaitable task. The task result determines if the command was successfully started</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.StepBackwardAsync">
            <summary>
            Seeks a single frame backward.
            </summary>
            <returns>The awaitable task. The task result determines if the command was successfully started</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.WaitForDirectCommand">
            <summary>
            Waits for any current direct command to finish execution.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.WaitForActiveSeekCommand">
            <summary>
            Waits for an active seek command (if any) to complete.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.ExecuteNextQueuedCommand">
            <summary>
            Executes the next command in the queued.
            </summary>
            <returns>The type of command that was executed</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.ClearCommandQueue">
            <summary>
            Clears the command queue.
            All commands are signaled so all awaiter handles stop awaiting.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.GetCurrentDirectCommand(Unosquare.FFME.Commands.CommandType)">
            <summary>
            Gets the current direct command of the specified type.
            If there is no direct command executing or the command type does not match
            what is currently executed, null is returned.
            </summary>
            <param name="commandType">Type of the command.</param>
            <returns>The currently executing command</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.ExecuteDirectCommand(Unosquare.FFME.Commands.DirectCommandBase)">
            <summary>
            Executes the specified direct command.
            </summary>
            <param name="command">The command.</param>
            <returns>The awaitable task handle</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.ExecutePriorityCommand(Unosquare.FFME.Commands.CommandType)">
            <summary>
            Executes the specified priority command.
            </summary>
            <param name="commandType">Type of the command.</param>
            <returns>The awaitable task handle</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.ExecuteDelayedSeekCommand(System.TimeSpan,Unosquare.FFME.Commands.SeekCommand.SeekMode)">
            <summary>
            Executes the specified delayed command.
            </summary>
            <param name="argument">The argument.</param>
            <param name="seekMode">The seek mode.</param>
            <returns>
            The awaitable task handle
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.TryEnterDirectCommand(Unosquare.FFME.Commands.DirectCommandBase)">
            <summary>
            Tries the enter direct command.
            </summary>
            <param name="command">The command.</param>
            <returns>If direct command entering was successful</returns>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.PrepareForDirectCommand(Unosquare.FFME.Commands.CommandType)">
            <summary>
            Prepares for direct command.
            </summary>
            <param name="commandType">Type of the command.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.CommandManager.FinalizeDirectCommand(Unosquare.FFME.Commands.DirectCommandBase)">
            <summary>
            Finalizes the direct command by performing command post-processing.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="T:Unosquare.FFME.Commands.CommandType">
            <summary>
            Enumerates the different available Media Command Types
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.CommandType.None">
            <summary>
            Represents no command
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.CommandType.Open">
            <summary>
            The open command id
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.CommandType.Seek">
            <summary>
            The seek command id
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.CommandType.Play">
            <summary>
            The play command id
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.CommandType.Pause">
            <summary>
            The pause command id
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.CommandType.Stop">
            <summary>
            The stop command id
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.CommandType.Close">
            <summary>
            The close command id
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.CommandType.ChangeMedia">
            <summary>
            The change media command id
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Commands.DirectChangeCommand">
            <inheritdoc />
            <summary>
            Change Media Command Implementation
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.DirectCommandBase" />
        </member>
        <member name="M:Unosquare.FFME.Commands.DirectChangeCommand.#ctor(Unosquare.FFME.MediaEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.DirectChangeCommand" /> class.
            </summary>
            <param name="mediaCore">The media core.</param>
        </member>
        <member name="P:Unosquare.FFME.Commands.DirectChangeCommand.CommandType">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Commands.DirectChangeCommand.PlayWhenCompleted">
            <summary>
            Gets a value indicating whether the media resumes playback when postprocessing.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.DirectChangeCommand.PostProcess">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Commands.DirectChangeCommand.PerformActions">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Commands.DirectCloseCommand">
            <summary>
            Close Command Implementation
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.DirectCommandBase" />
        </member>
        <member name="M:Unosquare.FFME.Commands.DirectCloseCommand.#ctor(Unosquare.FFME.MediaEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.DirectCloseCommand"/> class.
            </summary>
            <param name="mediaCore">The media core.</param>
        </member>
        <member name="P:Unosquare.FFME.Commands.DirectCloseCommand.CommandType">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Commands.DirectCloseCommand.PostProcess">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Commands.DirectCloseCommand.PerformActions">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Commands.DirectCloseCommand.LogReferenceCounter">
            <summary>
            Outputs Reference Counter Results
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Commands.DirectCommandBase">
            <inheritdoc />
            <summary>
            Represents a promise-style media command that is executed directly on the
            media command manager.
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.CommandBase" />
        </member>
        <member name="M:Unosquare.FFME.Commands.DirectCommandBase.#ctor(Unosquare.FFME.MediaEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.DirectCommandBase"/> class.
            </summary>
            <param name="mediaCore">The media core.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.DirectCommandBase.PostProcess">
            <summary>
            Performs actions when the command has been executed.
            This is useful to notify exceptions or update the state of the media.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Commands.DirectOpenCommand">
            <summary>
            The Open Command Implementation
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.DirectCommandBase" />
        </member>
        <member name="M:Unosquare.FFME.Commands.DirectOpenCommand.#ctor(Unosquare.FFME.MediaEngine,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.DirectOpenCommand" /> class.
            </summary>
            <param name="mediaCore">The manager.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Unosquare.FFME.Commands.DirectOpenCommand.#ctor(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.IMediaInputStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.DirectOpenCommand"/> class.
            </summary>
            <param name="mediaCore">The manager.</param>
            <param name="inputStream">The custom implementation of an input stream.</param>
        </member>
        <member name="P:Unosquare.FFME.Commands.DirectOpenCommand.CommandType">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Commands.DirectOpenCommand.Source">
            <summary>
            Gets the source uri of the media stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.DirectOpenCommand.InputStream">
            <summary>
            Gets the custom input stream object when the open command
            was instantiated using a stream and not a URI.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.DirectOpenCommand.PostProcess">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Commands.DirectOpenCommand.PerformActions">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Commands.PauseCommand">
            <summary>
            The Pause Command Implementation
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.CommandBase" />
        </member>
        <member name="M:Unosquare.FFME.Commands.PauseCommand.#ctor(Unosquare.FFME.MediaEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.PauseCommand"/> class.
            </summary>
            <param name="mediaCore">The media core.</param>
        </member>
        <member name="P:Unosquare.FFME.Commands.PauseCommand.CommandType">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Commands.PauseCommand.PerformActions">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Commands.PlayCommand">
            <summary>
            The Play Command Implementation
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.CommandBase" />
        </member>
        <member name="M:Unosquare.FFME.Commands.PlayCommand.#ctor(Unosquare.FFME.MediaEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.PlayCommand"/> class.
            </summary>
            <param name="mediaCore">The media core.</param>
        </member>
        <member name="P:Unosquare.FFME.Commands.PlayCommand.CommandType">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Commands.PlayCommand.CanPlay">
            <summary>
            Gets a value indicating whether the media can play.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.PlayCommand.PerformActions">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Commands.SeekCommand">
            <summary>
            The Seek Command Implementation
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.CommandBase" />
        </member>
        <member name="M:Unosquare.FFME.Commands.SeekCommand.#ctor(Unosquare.FFME.MediaEngine,System.TimeSpan,Unosquare.FFME.Commands.SeekCommand.SeekMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.SeekCommand" /> class.
            </summary>
            <param name="mediaCore">The media core.</param>
            <param name="targetPosition">The target position.</param>
            <param name="targetSeekMode">The target seek mode.</param>
        </member>
        <member name="T:Unosquare.FFME.Commands.SeekCommand.SeekMode">
            <summary>
            Enumerates sepcial seek modes
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.SeekCommand.SeekMode.Normal">
            <summary>Normal seek mode</summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.SeekCommand.SeekMode.Stop">
            <summary>Stop seek mode</summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.SeekCommand.SeekMode.StepForward">
            <summary>Frame step forward</summary>
        </member>
        <member name="F:Unosquare.FFME.Commands.SeekCommand.SeekMode.StepBackward">
            <summary>Frame step backward</summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.SeekCommand.CommandType">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Commands.SeekCommand.TargetSeekMode">
            <summary>
            Gets or sets the target seek mode.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Commands.SeekCommand.TargetPosition">
            <summary>
            Gets or sets the target seek position.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Commands.SeekCommand.PerformActions">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Commands.StopCommand">
            <summary>
            The Stop Command Implementation
            </summary>
            <seealso cref="T:Unosquare.FFME.Commands.CommandBase" />
        </member>
        <member name="M:Unosquare.FFME.Commands.StopCommand.#ctor(Unosquare.FFME.MediaEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Commands.StopCommand"/> class.
            </summary>
            <param name="mediaCore">The media core.</param>
        </member>
        <member name="P:Unosquare.FFME.Commands.StopCommand.CommandType">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Commands.StopCommand.PerformActions">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Core.FFAudioParams">
            <summary>
            Contains audio format properties essential
            to audio processing and re-sampling in FFmpeg libraries
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.FFAudioParams.Output">
            <summary>
            The standard output audio spec
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFAudioParams.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.Core.FFAudioParams"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFAudioParams.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Unosquare.FFME.Core.FFAudioParams"/> class from being created.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFAudioParams.#ctor(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.FFAudioParams"/> class.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="P:Unosquare.FFME.Core.FFAudioParams.ChannelCount">
            <summary>
            Gets the channel count.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFAudioParams.ChannelLayout">
            <summary>
            Gets the channel layout.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFAudioParams.SamplesPerChannel">
            <summary>
            Gets the samples per channel.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFAudioParams.SampleRate">
            <summary>
            Gets the audio sampling rate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFAudioParams.Format">
            <summary>
            Gets the sample format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFAudioParams.BufferLength">
            <summary>
            Gets the length of the buffer required to store
            the samples in the current format.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFAudioParams.CreateSource(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Creates a source audio spec based on the info in the given audio frame
            </summary>
            <param name="frame">The frame.</param>
            <returns>The audio parameters</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFAudioParams.CreateTarget(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Creates a target audio spec using the sample quantities provided
            by the given source audio frame
            </summary>
            <param name="frame">The frame.</param>
            <returns>The audio parameters</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFAudioParams.AreCompatible(Unosquare.FFME.Core.FFAudioParams,Unosquare.FFME.Core.FFAudioParams)">
            <summary>
            Determines if the audio specs are compatible between them.
            They must share format, channel count, layout and sample rate
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>True if the params are compatible, false otherwise.</returns>
        </member>
        <member name="T:Unosquare.FFME.Core.FFDictionary">
            <inheritdoc />
            <summary>
            An AVDictionary management class
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.FFDictionary.IsDisposed">
            <summary>
            To detect redundant Dispose calls
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.FFDictionary"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.FFDictionary"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="P:Unosquare.FFME.Core.FFDictionary.Pointer">
            <summary>
            Gets the unmanaged pointer to the dictionary object.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFDictionary.Count">
            <summary>
            Gets the number of elements in the dictionary
            </summary>
            <value>
            The count.
            </value>
        </member>
        <member name="P:Unosquare.FFME.Core.FFDictionary.Item(System.String)">
            <summary>
            Gets or sets the value with the specified key.
            </summary>
            <value>
            The <see cref="T:System.String"/>.
            </value>
            <param name="key">The key.</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.ToDictionary(FFmpeg.AutoGen.AVDictionary*)">
            <summary>
            Converts the AVDictionary to a regular dictionary.
            </summary>
            <param name="dictionary">The dictionary to convert from.</param>
            <returns>the converted dictionary</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.GetEntry(FFmpeg.AutoGen.AVDictionary*,System.String,System.Boolean)">
            <summary>
            A wrapper for the av_dict_get method
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="matchCase">if set to <c>true</c> [match case].</param>
            <returns>The Entry</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.UpdateReference(FFmpeg.AutoGen.AVDictionary*)">
            <summary>
            Updates the pointer reference after modified.
            </summary>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Fill(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Fills this dictionary with a set of options
            </summary>
            <param name="other">The other dictionary (source)</param>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.First">
            <summary>
            Gets the first entry. Null if no entries.
            </summary>
            <returns>The entry</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Next(Unosquare.FFME.Core.FFDictionaryEntry)">
            <summary>
            Gets the next entry based on the provided prior entry.
            </summary>
            <param name="prior">The prior entry.</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.HasKey(System.String,System.Boolean)">
            <summary>
            Determines if the given key exists in the dictionary
            </summary>
            <param name="key">The key.</param>
            <param name="matchCase">if set to <c>true</c> [match case].</param>
            <returns>True or False</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.GetEntry(System.String,System.Boolean)">
            <summary>
            Gets the entry given the key.
            </summary>
            <param name="key">The key.</param>
            <param name="matchCase">if set to <c>true</c> [match case].</param>
            <returns>The entry</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Get(System.String)">
            <summary>
            Gets the value with specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Set(System.String,System.String)">
            <summary>
            Sets the value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Set(System.String,System.String,System.Boolean)">
            <summary>
            Sets the value for the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="preventOverwrite">if set to <c>true</c> don't overwrite existing value.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Remove(System.String)">
            <summary>
            Removes the entry with the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionary.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Core.FFDictionaryEntry">
            <summary>
            An AVDictionaryEntry wrapper
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFDictionaryEntry.#ctor(FFmpeg.AutoGen.AVDictionaryEntry*)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.FFDictionaryEntry"/> class.
            </summary>
            <param name="entryPointer">The entry pointer.</param>
        </member>
        <member name="P:Unosquare.FFME.Core.FFDictionaryEntry.Pointer">
            <summary>
            Gets the unmanaged pointer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFDictionaryEntry.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFDictionaryEntry.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.FFInterop">
            <summary>
            Provides a set of utilities to perform logging, text formatting,
            conversion and other handy calculations.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFInterop.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.Core.FFInterop"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFInterop.IsInitialized">
            <summary>
            True when libraries were initialized correctly.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFInterop.LibrariesPath">
            <summary>
            Gets the libraries path. Only filled when initialized correctly.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFInterop.LibraryIdentifiers">
            <summary>
            Gets the bitwise FFmpeg library identifiers that were loaded.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFInterop.Initialize(System.String,System.Int32)">
            <summary>
            Registers FFmpeg library and initializes its components.
            It only needs to be called once but calling it more than once
            has no effect. Returns the path that FFmpeg was registered from.
            This method is thread-safe.
            </summary>
            <param name="overridePath">The override path.</param>
            <param name="libIdentifiers">The bit-wise flag identifiers corresponding to the libraries.</param>
            <returns>
            Returns true if it was a new initialization and it succeeded. False if there was no need to initialize
            as there is already a valid initialization.
            </returns>
            <exception cref="T:System.IO.FileNotFoundException">When ffmpeg libraries are not found</exception>
        </member>
        <member name="M:Unosquare.FFME.Core.FFInterop.DecodeMessage(System.Int32)">
            <summary>
            Gets the FFmpeg error message based on the error code
            </summary>
            <param name="errorCode">The code.</param>
            <returns>The decoded error message</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFInterop.PtrToStringUTF8(System.Byte*)">
            <summary>
            Converts a byte pointer to a UTF8 encoded string.
            </summary>
            <param name="stringAddress">The pointer to the starting character</param>
            <returns>The string</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFInterop.RetrieveOptions(FFmpeg.AutoGen.AVClass*)">
            <summary>
            Retrieves the options information associated with the given AVClass.
            </summary>
            <param name="avClass">The av class.</param>
            <returns>A list of option metadata</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFInterop.RetrieveCodecs">
            <summary>
            Retrieves the codecs.
            </summary>
            <returns>The codecs</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFInterop.RetrieveInputFormatNames">
            <summary>
            Retrieves the input format names.
            </summary>
            <returns>The collection of names</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFInterop.RetrieveDecoderNames(FFmpeg.AutoGen.AVCodec*[])">
            <summary>
            Retrieves the decoder names.
            </summary>
            <param name="allCodecs">All codecs.</param>
            <returns>The collection of names</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFInterop.RetrieveGlobalFormatOptions">
            <summary>
            Retrieves the global format options.
            </summary>
            <returns>The collection of option infos</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFInterop.RetrieveGlobalCodecOptions">
            <summary>
            Retrieves the global codec options.
            </summary>
            <returns>The collection of option infos</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFInterop.RetrieveInputFormatOptions(System.String)">
            <summary>
            Retrieves the input format options.
            </summary>
            <param name="formatName">Name of the format.</param>
            <returns>The collection of option infos</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFInterop.RetrieveCodecOptions(FFmpeg.AutoGen.AVCodec*)">
            <summary>
            Retrieves the codec options.
            </summary>
            <param name="codec">The codec.</param>
            <returns>The collection of option infos</returns>
        </member>
        <member name="M:Unosquare.FFME.Core.FFInterop.OnFFmpegMessageLogged(System.Void*,System.Int32,System.String,System.Byte*)">
            <summary>
            Log message callback from ffmpeg library.
            </summary>
            <param name="p0">The p0.</param>
            <param name="level">The level.</param>
            <param name="format">The format.</param>
            <param name="vl">The vl.</param>
        </member>
        <member name="T:Unosquare.FFME.Core.FFInterop.FFLoggingHandler">
            <summary>
            Handles FFmpeg library messages
            </summary>
            <seealso cref="T:Unosquare.FFME.Shared.ILoggingHandler" />
        </member>
        <member name="M:Unosquare.FFME.Core.FFInterop.FFLoggingHandler.Unosquare#FFME#Shared#ILoggingHandler#HandleLogMessage(Unosquare.FFME.Shared.MediaLogMessage)">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Core.FFLibrary">
            <summary>
            Defines FFmpeg library metadata and access.
            It allows for the loading of individual libraries.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.FFLibrary.LoadLock">
            <summary>
            The load lock preventing libraries to load at the same time.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFLibrary.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.Core.FFLibrary"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFLibrary.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.FFLibrary" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="version">The version.</param>
            <param name="flagId">The flag identifier.</param>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.All">
            <summary>
            Gets all the libraries as a collection.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.LibAVCodec">
            <summary>
            Gets the AVCodec library.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.LibAVFormat">
            <summary>
            Gets the AVFormat library.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.LibAVUtil">
            <summary>
            Gets the AVUtil library.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.LibSWResample">
            <summary>
            Gets the SW Resample library.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.LibSWScale">
            <summary>
            Gets the SWScale library.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.LibAVDevice">
            <summary>
            Gets the AVDevice library.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.LibAVFilter">
            <summary>
            Gets the AVFilter library.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.FlagId">
            <summary>
            Gets the flag identifier.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.Name">
            <summary>
            Gets the name of the library.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.BasePath">
            <summary>
            Gets the base path from where the library was loaded.
            Returns null if it has not been loaded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.Version">
            <summary>
            Gets the library version.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.Reference">
            <summary>
            Gets the pointer reference to the library.
            </summary>>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.IsLoaded">
            <summary>
            Gets a value indicating whether the library has already been loaded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.FFLibrary.LoadErrorCode">
            <summary>
            Gets the load error code. 0 for success.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.FFLibrary.Load(System.String)">
            <summary>
            Loads the library from the specified path.
            </summary>
            <param name="basePath">The base path.</param>
            <returns>True if the registration was successful</returns>
            <exception cref="T:System.InvalidOperationException">When library has already been loaded.</exception>
        </member>
        <member name="T:Unosquare.FFME.Core.FFLibrary.Names">
            <summary>
            Defines the library names as constants
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.RC">
            <summary>
            A reference counter to keep track of unmanaged objects
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.SyncLock">
            <summary>
            The synchronization lock
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.m_Current">
            <summary>
            The current reference counter instance
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.Instances">
            <summary>
            The instances
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Core.RC.UnmanagedType">
            <summary>
            The types of tracked unmanaged types
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.None">
            <summary>
            No media type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.Packet">
            <summary>
            The packet
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.Frame">
            <summary>
            The frame
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.FilterGraph">
            <summary>
            The filter graph
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.SwrContext">
            <summary>
            The SWR context
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.CodecContext">
            <summary>
            The codec context
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Core.RC.UnmanagedType.SwsContext">
            <summary>
            The SWS context
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.RC.Current">
            <summary>
            Gets the singleton instance of the reference counter
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.RC.InstancesByLocation">
            <summary>
            Gets the number of instances by location.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Remove(System.IntPtr)">
            <summary>
            Removes the specified unmanaged object reference
            </summary>
            <param name="ptr">The PTR.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Remove(System.Void*)">
            <summary>
            Removes the specified unmanaged object reference.
            </summary>
            <param name="ptr">The unmanaged object reference.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(FFmpeg.AutoGen.AVPacket*,System.String,System.String,System.Int32)">
            <summary>
            Adds the specified pointer.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="memberName">Name of the member.</param>
            <param name="filePath">The file path.</param>
            <param name="lineNumber">The line number.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(FFmpeg.AutoGen.SwrContext*,System.String,System.String,System.Int32)">
            <summary>
            Adds the specified pointer.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="memberName">Name of the member.</param>
            <param name="filePath">The file path.</param>
            <param name="lineNumber">The line number.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(FFmpeg.AutoGen.SwsContext*,System.String,System.String,System.Int32)">
            <summary>
            Adds the specified pointer.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="memberName">Name of the member.</param>
            <param name="filePath">The file path.</param>
            <param name="lineNumber">The line number.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(FFmpeg.AutoGen.AVCodecContext*,System.String,System.String,System.Int32)">
            <summary>
            Adds the specified pointer.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="memberName">Name of the member.</param>
            <param name="filePath">The file path.</param>
            <param name="lineNumber">The line number.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(FFmpeg.AutoGen.AVFrame*,System.String,System.String,System.Int32)">
            <summary>
            Adds the specified pointer.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="memberName">Name of the member.</param>
            <param name="filePath">The file path.</param>
            <param name="lineNumber">The line number.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.Add(FFmpeg.AutoGen.AVFilterGraph*,System.String,System.String,System.Int32)">
            <summary>
            Adds the specified pointer.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="memberName">Name of the member.</param>
            <param name="filePath">The file path.</param>
            <param name="lineNumber">The line number.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.AddInternal(Unosquare.FFME.Core.RC.UnmanagedType,System.IntPtr,System.String,System.String,System.Int32)">
            <summary>
            Adds the specified unmanaged object reference.
            </summary>
            <param name="unmanagedType">Type of the unmanaged.</param>
            <param name="pointer">The pointer.</param>
            <param name="memberName">Name of the member.</param>
            <param name="filePath">The file path.</param>
            <param name="lineNumber">The line number.</param>
        </member>
        <member name="T:Unosquare.FFME.Core.RC.ReferenceEntry">
            <summary>
            A reference entry
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.ReferenceEntry.#ctor(Unosquare.FFME.Core.RC.UnmanagedType,System.IntPtr,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.RC.ReferenceEntry"/> class.
            </summary>
            <param name="unmanagedType">Type of the unmanaged.</param>
            <param name="pointer">The pointer.</param>
            <param name="memberName">Name of the member.</param>
            <param name="filePath">The file path.</param>
            <param name="lineNumber">The line number.</param>
        </member>
        <member name="P:Unosquare.FFME.Core.RC.ReferenceEntry.Type">
            <summary>
            Gets the unmanaged type.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.RC.ReferenceEntry.Pointer">
            <summary>
            Gets the pointer to the memory location of the unmanaged object.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.RC.ReferenceEntry.MemberName">
            <summary>
            Gets the name of the member that created the unmanaged object.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.RC.ReferenceEntry.FilePath">
            <summary>
            Gets the file path of the code that created the unmanaged object.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.RC.ReferenceEntry.FileName">
            <summary>
            Gets the file name of the code that created the unmanaged object.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.RC.ReferenceEntry.LineNumber">
            <summary>
            Gets the line number of the code that created the unmanaged object.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.RC.ReferenceEntry.ToString">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Core.RealTimeClock">
            <summary>
            A time measurement artifact.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.RealTimeClock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Core.RealTimeClock"/> class.
            The clock starts paused and at the 0 position.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.RealTimeClock.Position">
            <summary>
            Gets or sets the clock position.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.RealTimeClock.IsRunning">
            <summary>
            Gets a value indicating whether the clock is running.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Core.RealTimeClock.SpeedRatio">
            <summary>
            Gets or sets the speed ratio at which the clock runs.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.RealTimeClock.Update(System.TimeSpan)">
            <summary>
            Sets a new position value atomically
            </summary>
            <param name="value">The new value that the position property will hold.</param>
        </member>
        <member name="M:Unosquare.FFME.Core.RealTimeClock.Play">
            <summary>
            Starts or resumes the clock.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.RealTimeClock.Pause">
            <summary>
            Pauses the clock.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Core.RealTimeClock.Reset">
            <summary>
            Sets the clock position to 0 and stops it.
            The speed ratio is not modified.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Decoding.AudioComponent">
            <summary>
            Provides audio sample extraction, decoding and scaling functionality.
            </summary>
            <seealso cref="T:Unosquare.FFME.Decoding.MediaComponent" />
        </member>
        <member name="F:Unosquare.FFME.Decoding.AudioComponent.Scaler">
            <summary>
            Holds a reference to the audio re-sampler
            This re-sampler gets disposed upon disposal of this object.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.AudioComponent.LastSourceSpec">
            <summary>
            Used to determine if we have to reset the scaler parameters
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.#ctor(Unosquare.FFME.Decoding.MediaContainer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.AudioComponent"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="streamIndex">Index of the stream.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioComponent.Channels">
            <summary>
            Gets the number of audio channels.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioComponent.SampleRate">
            <summary>
            Gets the audio sample rate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioComponent.BitsPerSample">
            <summary>
            Gets the bits per sample.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.MaterializeFrame(Unosquare.FFME.Decoding.MediaFrame,Unosquare.FFME.Shared.MediaBlock@,Unosquare.FFME.Shared.MediaBlock)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.CreateFrameSource(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.DestroyFilterGraph">
            <summary>
            Destroys the filter graph releasing unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.ComputeFilterArguments(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Computes the frame filter arguments that are appropriate for the audio filtering chain.
            </summary>
            <param name="frame">The frame.</param>
            <returns>The base filter arguments</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioComponent.InitializeFilterGraph(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            If necessary, disposes the existing filter graph and creates a new one based on the frame arguments.
            </summary>
            <param name="frame">The frame.</param>
            <exception cref="T:Unosquare.FFME.Shared.MediaContainerException">
            avfilter_graph_create_filter
            or
            avfilter_graph_create_filter
            or
            avfilter_link
            or
            avfilter_graph_parse
            or
            avfilter_graph_config
            </exception>
        </member>
        <member name="T:Unosquare.FFME.Decoding.AudioFrame">
            <inheritdoc />
            <summary>
            Represents a wrapper from an unmanaged FFmpeg audio frame
            </summary>
            <seealso cref="T:Unosquare.FFME.Decoding.MediaFrame" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioFrame.#ctor(FFmpeg.AutoGen.AVFrame*,Unosquare.FFME.Decoding.MediaComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.AudioFrame" /> class.
            </summary>
            <param name="frame">The frame.</param>
            <param name="component">The component.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.AudioFrame.Pointer">
            <summary>
            Gets the pointer to the unmanaged frame.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.AudioFrame.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Decoding.HardwareAccelerator">
            <summary>
            Encapsulates Hardware Accelerator Properties
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.HardwareAccelerator.#ctor(Unosquare.FFME.Decoding.VideoComponent,Unosquare.FFME.Shared.HardwareDeviceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.HardwareAccelerator"/> class.
            </summary>
            <param name="component">The component this accelerator is attached to.</param>
            <param name="selectedConfig">The selected hardware device configuration.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.HardwareAccelerator.Name">
            <summary>
            Gets the name of the HW accelerator.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.HardwareAccelerator.Component">
            <summary>
            Gets the component this accelerator is attached to..
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.HardwareAccelerator.PixelFormat">
            <summary>
            Gets the hardware output pixel format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.HardwareAccelerator.DeviceType">
            <summary>
            Gets the type of the hardware device.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.HardwareAccelerator.GetFormatCallback">
            <summary>
            Gets the callback used to resolve the hardware pixel format.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.HardwareAccelerator.GetCompatibleDevices(FFmpeg.AutoGen.AVCodecID)">
            <summary>
            Gets the supported hardware decoder device types for the given codec.
            </summary>
            <param name="codecId">The codec identifier.</param>
            <returns>
            A list of hardware device decoders compatible with the codec
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.HardwareAccelerator.ExchangeFrame(FFmpeg.AutoGen.AVCodecContext*,FFmpeg.AutoGen.AVFrame*,System.Boolean@)">
            <summary>
            Downloads the frame from the hardware into a software frame if possible.
            The input hardware frame gets freed and the return value will point to the new software frame
            </summary>
            <param name="codecContext">The codec context.</param>
            <param name="input">The input frame coming from the decoder (may or may not be hardware).</param>
            <param name="isHardwareFrame">if set to <c>true</c> [comes from hardware] otherwise, hardware decoding was not performed.</param>
            <returns>
            The frame downloaded from the device into RAM
            </returns>
            <exception cref="T:System.Exception">Failed to transfer data to output frame</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.HardwareAccelerator.GetPixelFormat(FFmpeg.AutoGen.AVCodecContext*,FFmpeg.AutoGen.AVPixelFormat*)">
            <summary>
            Gets the pixel format.
            Port of (get_format) method in ffmpeg.c
            </summary>
            <param name="context">The codec context.</param>
            <param name="pixelFormats">The pixel formats.</param>
            <returns>The real pixel format that the codec will be using</returns>
        </member>
        <member name="T:Unosquare.FFME.Decoding.MediaComponent">
            <inheritdoc />
            <summary>
            Represents a media component of a given media type within a
            media container. Derived classes must implement frame handling
            logic.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.CodecLock">
            <summary>
            Related to issue 94, looks like FFmpeg requires exclusive access when calling avcodec_open2()
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.m_LoggingHandler">
            <summary>
            The logging handler
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.Packets">
            <summary>
            Contains the packets pending to be sent to the decoder
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.DecodePacketFunction">
            <summary>
            The decode packet function
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.m_IsDisposed">
            <summary>
            Detects redundant, unmanaged calls to the Dispose method.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.m_HasCodecPackets">
            <summary>
            Determines if packets have been fed into the codec and frames can be decoded.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.m_Stream">
            <summary>
            Holds a reference to the associated input context stream
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaComponent.m_CodecContext">
            <summary>
            Holds a reference to the Codec Context.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.#ctor(Unosquare.FFME.Decoding.MediaContainer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.MediaComponent"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="streamIndex">Index of the stream.</param>
            <exception cref="T:System.ArgumentNullException">container</exception>
            <exception cref="T:Unosquare.FFME.Shared.MediaContainerException">The container exception.</exception>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.Unosquare#FFME#Shared#ILoggingSource#LoggingHandler">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.CodecContext">
            <summary>
            Gets the pointer to the codec context.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.Stream">
            <summary>
            Gets a pointer to the component's stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.Container">
            <summary>
            Gets the media container associated with this component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.StreamIndex">
            <summary>
            Gets the index of the associated stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.StartTime">
            <summary>
            Gets the component's stream start timestamp as reported
            by the start time of the stream.
            Returns TimeSpan.MinValue when unknown.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.Duration">
            <summary>
            Gets the duration of this stream component.
            If there is no such information it will return TimeSpan.MinValue
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.BufferLength">
            <summary>
            Gets the current length in bytes of the
            packet buffer. Limit your Reads to something reasonable before
            this becomes too large.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.BufferDuration">
            <summary>
            Gets the duration of the packet buffer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.BufferCount">
            <summary>
            Gets the number of packets in the queue.
            Decode packets until this number becomes 0.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.BufferCountThreshold">
            <summary>
            Gets the number of packets to cache before <see cref="P:Unosquare.FFME.Decoding.MediaComponent.HasEnoughPackets"/> returns true.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.BufferDurationThreshold">
            <summary>
            Gets the packet buffer duration threshold before <see cref="P:Unosquare.FFME.Decoding.MediaComponent.HasEnoughPackets"/> returns true.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.HasEnoughPackets">
            <summary>
            Gets or sets a value indicating whether the packet queue contains enough packets.
            Port of ffplay.c stream_has_enough_packets
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.CodecId">
            <summary>
            Gets the ID of the codec for this component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.CodecName">
            <summary>
            Gets the name of the codec for this component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.BitRate">
            <summary>
            Gets the bit rate of this component as reported by the codec context.
            Returns 0 for unknown.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.StreamInfo">
            <summary>
            Gets the stream information.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.HasPacketsInCodec">
            <summary>
            Gets whether packets have been fed into the codec and frames can be decoded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponent.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.ClearQueuedPackets(System.Boolean)">
            <summary>
            Clears the pending and sent Packet Queues releasing all memory held by those packets.
            Additionally it flushes the codec buffered packets.
            </summary>
            <param name="flushBuffers">if set to <c>true</c> flush codec buffers.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.SendEmptyPacket">
            <summary>
            Sends a special kind of packet (an empty/null packet)
            that tells the decoder to refresh the attached picture or enter draining mode.
            This is a port of packet_queue_put_nullpacket
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.SendPacket(Unosquare.FFME.Decoding.MediaPacket)">
            <summary>
            Pushes a packet into the decoding Packet Queue
            and processes the packet in order to try to decode
            1 or more frames.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.ReceiveNextFrame">
            <summary>
            Feeds the decoder buffer and tries to return the next available frame.
            </summary>
            <returns>The received Media Frame. It is null if no frame could be retrieved.</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.MaterializeFrame(Unosquare.FFME.Decoding.MediaFrame,Unosquare.FFME.Shared.MediaBlock@,Unosquare.FFME.Shared.MediaBlock)">
            <summary>
            Converts decoded, raw frame data in the frame source into a a usable frame. <br />
            The process includes performing picture, samples or text conversions
            so that the decoded source frame data is easily usable in multimedia applications
            </summary>
            <param name="input">The source frame to use as an input.</param>
            <param name="output">The target frame that will be updated with the source frame. If null is passed the frame will be instantiated.</param>
            <param name="previousBlock">The previous block from which to derive information in case the current frame contains invalid data.</param>
            <returns>
            Returns true of the operation succeeded. False otherwise.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.CreateFrameSource(System.IntPtr)">
            <summary>
            Creates a frame source object given the raw FFmpeg AVFrame or AVSubtitle reference.
            </summary>
            <param name="framePointer">The raw FFmpeg pointer.</param>
            <returns>The media frame</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.CloseComponent">
            <summary>
            Releases the existing codec context and clears and disposes the packet queues.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.SendFlushPacket">
            <summary>
            Sends a special kind of packet (a flush packet)
            that tells the decoder to flush it internal buffers
            This an encapsulation of flush_pkt
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.FlushCodecBuffers">
            <summary>
            Flushes the codec buffers.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.FeedPacketsToDecoder(System.Boolean)">
            <summary>
            Feeds the packets to decoder.
            </summary>
            <param name="fillDecoderBuffer">if set to <c>true</c> fills the decoder buffer with packets.</param>
            <returns>The number of packets fed</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.ReceiveFrameFromDecoder(System.Int32@)">
            <summary>
            Receives the next available frame from decoder.
            </summary>
            <param name="receiveFrameResult">The receive frame result.</param>
            <returns>The frame or null if no frames could be decoded</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.DecodeNextAVFrame">
            <summary>
            Decodes the next Audio or Video frame.
            Reference: https://www.ffmpeg.org/doxygen/4.0/group__lavc__encdec.html
            </summary>
            <returns>A decoder result containing the decoder frames (if any)</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponent.DecodeNextAVSubtitle">
            <summary>
            Decodes the next subtitle frame.
            </summary>
            <returns>The managed frame</returns>
        </member>
        <member name="T:Unosquare.FFME.Decoding.MediaComponentSet">
            <summary>
            Represents a set of Audio, Video and Subtitle components.
            This class is useful in order to group all components into
            a single set. Sending packets is automatically handled by
            this class. This class is thread safe.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.OnPacketQueueChanged">
            <summary>
            Gets or sets a method that gets called when a packet is queued.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.OnFrameDecoded">
            <summary>
            Gets or sets a method that gets called when an audio or video frame gets decoded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.OnSubtitleDecoded">
            <summary>
            Gets or sets a method that gets called when a subtitle frame gets decoded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.Count">
            <summary>
            Gets the registered component count.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.MediaTypes">
            <summary>
            Gets the available component media types.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.All">
            <summary>
            Gets all the components in a read-only collection.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.MainMediaType">
            <summary>
            Gets the type of the main.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.Main">
            <summary>
            Gets the main media component of the stream to which time is synchronized.
            By order of priority, first Audio, then Video
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.Video">
            <summary>
            Gets the video component.
            Returns null when there is no such stream component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.Audio">
            <summary>
            Gets the audio component.
            Returns null when there is no such stream component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.Subtitles">
            <summary>
            Gets the subtitles component.
            Returns null when there is no such stream component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.HasVideo">
            <summary>
            Gets a value indicating whether this instance has a video component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.HasAudio">
            <summary>
            Gets a value indicating whether this instance has an audio component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.HasSubtitles">
            <summary>
            Gets a value indicating whether this instance has a subtitles component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.BufferLength">
            <summary>
            Gets the current length in bytes of the packet buffer for all components.
            These packets are the ones that have not been yet decoded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.BufferCount">
            <summary>
            Gets the total number of packets in the packet buffer for all components.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.BufferCountThreshold">
            <summary>
            Gets the minimum number of packets to read before <see cref="P:Unosquare.FFME.Decoding.MediaComponentSet.HasEnoughPackets"/> is able to return true.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.HasEnoughPackets">
            <summary>
            Gets or sets a value indicating whether all packet queues contain enough packets.
            Port of ffplay.c stream_has_enough_packets
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaComponentSet.Item(Unosquare.FFME.Shared.MediaType)">
            <summary>
            Gets or sets the <see cref="T:Unosquare.FFME.Decoding.MediaComponent"/> with the specified media type.
            Setting a new component on an existing media type component will throw.
            Getting a non existing media component fro the given media type will return null.
            </summary>
            <param name="mediaType">Type of the media.</param>
            <returns>The media component</returns>
            <exception cref="T:System.ArgumentException">When the media type is invalid</exception>
            <exception cref="T:System.ArgumentNullException">MediaComponent</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.SendPacket(Unosquare.FFME.Decoding.MediaPacket)">
            <summary>
            Sends the specified packet to the correct component by reading the stream index
            of the packet that is being sent. No packet is sent if the provided packet is set to null.
            Returns the media type of the component that accepted the packet.
            </summary>
            <param name="packet">The packet.</param>
            <returns>The media type</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.SendEmptyPackets">
            <summary>
            Sends an empty packet to all media components.
            When an EOF/EOS situation is encountered, this forces
            the decoders to enter draining mode until all frames are decoded.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.ClearQueuedPackets(System.Boolean)">
            <summary>
            Clears the packet queues for all components.
            Additionally it flushes the codec buffered packets.
            This is useful after a seek operation is performed or a stream
            index is changed.
            </summary>
            <param name="flushBuffers">if set to <c>true</c> flush codec buffers.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.ProcessPacketQueueChanges(Unosquare.FFME.Decoding.PacketQueueOp,Unosquare.FFME.Decoding.MediaPacket,Unosquare.FFME.Shared.MediaType)">
            <summary>
            Updates queue properties and invokes the on packet queue changed callback.
            </summary>
            <param name="operation">The operation.</param>
            <param name="packet">The packet.</param>
            <param name="mediaType">Type of the media.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.RunQuickBuffering(Unosquare.FFME.MediaEngine)">
            <summary>
            Runs quick buffering logic on a single thread.
            This assumes no reading, decoding, or rendering is taking place at the time of the call.
            </summary>
            <param name="m">The media core engine.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.AddComponent(Unosquare.FFME.Decoding.MediaComponent)">
            <summary>
            Registers the component in this component set.
            </summary>
            <param name="component">The component.</param>
            <exception cref="T:System.ArgumentNullException">When component of the same type is already registered</exception>
            <exception cref="T:System.NotSupportedException">When MediaType is not supported</exception>
            <exception cref="T:System.ArgumentException">When the component is null</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.RemoveComponent(Unosquare.FFME.Shared.MediaType)">
            <summary>
            Removes the component of specified media type (if registered).
            It calls the dispose method of the media component too.
            </summary>
            <param name="mediaType">Type of the media.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.UpdateComponentBackingFields">
            <summary>
            Computes the main component and backing fields.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaComponentSet.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.MediaContainer">
            <summary>
            A container capable of opening an input url,
            reading packets from it, decoding frames, seeking, and pausing and resuming network streams
            Code based on https://raw.githubusercontent.com/FFmpeg/FFmpeg/release/3.2/ffplay.c
            The method pipeline should be:
            1. Set Options (or don't, for automatic options) and Initialize,
            2. Perform continuous packet reads,
            3. Perform continuous frame decodes
            4. Perform continuous block materialization
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.ExceptionMessageNoInputContext">
            <summary>
            The exception message no input context
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.m_LoggingHandler">
            <summary>
            The logging handler
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.ReadSyncRoot">
            <summary>
            The read synchronize root
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.DecodeSyncRoot">
            <summary>
            The decode synchronize root
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.ConvertSyncRoot">
            <summary>
            The convert synchronize root
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.StreamReadInterruptStartTime">
            <summary>
            The stream read interrupt start time.
            When a read operation is started, this is set to the ticks of UTC now.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.SignalAbortReadsRequested">
            <summary>
            The signal to request the abortion of the following read operation
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.SignalAbortReadsAutoReset">
            <summary>
            If set to true, it will reset the abort requested flag to false.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.StreamReadInterruptCallback">
            <summary>
            The stream read interrupt callback.
            Used to detect read timeouts.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.CustomInputStream">
            <summary>
            The custom media input stream
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.CustomInputStreamRead">
            <summary>
            The custom input stream read callback
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.CustomInputStreamSeek">
            <summary>
            The custom input stream seek callback
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.CustomInputStreamContext">
            <summary>
            The custom input stream context
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaContainer.RequiresPictureAttachments">
            <summary>
            Hold the value for the internal property with the same name.
            Picture attachments are required when video streams support them
            and these attached packets must be read before reading the first frame
            of the stream and after seeking.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.#ctor(System.String,Unosquare.FFME.Shared.ContainerConfiguration,Unosquare.FFME.Shared.ILoggingHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.MediaContainer" /> class using a media URL.
            </summary>
            <param name="mediaUrl">The media URL.</param>
            <param name="config">The container configuration options.</param>
            <param name="loggingHandler">The logger.</param>
            <exception cref="T:System.ArgumentNullException">mediaUrl</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.#ctor(Unosquare.FFME.Shared.IMediaInputStream,Unosquare.FFME.Shared.ContainerConfiguration,Unosquare.FFME.Shared.ILoggingHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.MediaContainer"/> class using a custom input stream implementation.
            </summary>
            <param name="inputStream">The input stream.</param>
            <param name="config">The configuration.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.Unosquare#FFME#Shared#ILoggingSource#LoggingHandler">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsDisposed">
            <summary>
            To detect redundant Dispose calls
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaUrl">
            <summary>
            Gets the media URL. This is the input url, file or device that is read
            by this container.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.Configuration">
            <summary>
            The container and demuxer initialization and configuration options.
            Options are applied when creating an instance of the container.
            After container creation, changing the configuration options passed in
            the constructor has no effect.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaOptions">
            <summary>
            Represents options that applied before initializing media components and their corresponding
            codecs. Once the container has created the media components, changing these options will have no effect.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaInfo">
            <summary>
            Provides stream, chapter and program info held by this container.
            This property is null if the the stream has not been opened.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaFormatName">
            <summary>
            Gets the name of the media format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaBitRate">
            <summary>
            Gets the media bit rate (bits per second). Returns 0 if not available.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.Metadata">
            <summary>
            Holds the metadata of the media file when the stream is initialized.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsInitialized">
            <summary>
            Gets a value indicating whether an Input Context has been initialize.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsOpen">
            <summary>
            Gets a value indicating whether this instance is open.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsAtEndOfStream">
            <summary>
            Will be set to true whenever an End Of File situation is reached.
            </summary>
            <value>
              <c>true</c> if this instance is at end of stream; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.StreamPosition">
            <summary>
            Gets the byte position at which the stream is being read.
            Please note that this property gets updated after every Read.
            For multi-file streams, get the position of the current file only.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaStreamSize">
            <summary>
            Gets the size in bytes of the current stream being read.
            For multi-file streams, get the size of the current file only.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsStreamSeekable">
            <summary>
            Gets a value indicating whether the underlying media is seekable.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsLiveStream">
            <summary>
            Gets a value indicating whether this container represents live media.
            If the stream is classified as a network stream and it is not seekable, then this property will return true.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsNetworkStream">
            <summary>
            Gets a value indicating whether the input stream is a network stream.
            If the format name is rtp, rtsp, or sdp or if the url starts with udp:, http:, https:, tcp:, or rtp:
            then this property will be set to true.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.Components">
            <summary>
            Provides direct access to the individual Media components of the input stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.IsReadAborted">
            <summary>
            Gets a value indicating whether reads are in the aborted state.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaStartTime">
            <summary>
            Gets the media start time by which all component streams are offset.
            Typically 0 but it could be something other than 0.
            If this information is not available (i.e. realtime media) it will
            be set to TimeSpan.MinValue
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.MediaDuration">
            <summary>
            Gets the duration of the media.
            If this information is not available (i.e. realtime media) it will
            be set to TimeSpan.MinValue
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.InputContext">
            <summary>
            Holds a reference to the input context.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaContainer.StateRequiresPictureAttachments">
            <summary>
            Picture attachments are required when video streams support them
            and these attached packets must be read before reading the first frame
            of the stream and after seeking. This property is not part of the public API
            and is meant more for internal purposes
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Open">
            <summary>
            Opens the individual stream components on the existing input context in order to start reading packets.
            Any Media Options must be set before this method is called.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Seek(System.TimeSpan)">
            <summary>
            Seeks to the specified position in the main stream component.
            Returns the keyframe on or before the specified position. Most of the times
            you will need to keep reading packets and receiving frames to reach the exact position.
            Pass TimeSpan.Zero to seek to the beginning of the stream.
            </summary>
            <param name="position">The position.</param>
            <returns>
            The list of media frames
            </returns>
            <exception cref="T:System.InvalidOperationException">No input context initialized</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Read">
            <summary>
            Reads the next available packet, sending the packet to the corresponding
            internal media component. It also sets IsAtEndOfStream property.
            Returns the media type if the packet was accepted by any of the media components.
            Returns None if the packet was not accepted by any of the media components
            or if reading failed (i.e. End of stream already or read error).
            Packets are queued internally. To dequeue them you need to call the receive frames
            method of each component until the packet buffer count becomes 0.
            </summary>
            <returns>The media type of the packet that was read</returns>
            <exception cref="T:System.InvalidOperationException">No input context initialized</exception>
            <exception cref="T:Unosquare.FFME.Shared.MediaContainerException">When a read error occurs</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Decode">
            <summary>
            Decodes the next available packet in the packet queue for each of the components.
            Returns the list of decoded frames.
            The list of 0 or more decoded frames is returned in ascending StartTime order.
            A Packet may contain 0 or more frames. Once the frame source objects are returned, you
            are responsible for calling the Dispose method on them to free the underlying FFmpeg frame.
            Note that even after releasing them you can still use the managed properties.
            If you intend on Converting the frames to usable media frames (with Convert) you must not
            release the frame. Specify the release input argument as true and the frame will be automatically
            freed from memory.
            </summary>
            <returns>The list of media frames</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Convert(Unosquare.FFME.Decoding.MediaFrame,Unosquare.FFME.Shared.MediaBlock@,System.Boolean,Unosquare.FFME.Shared.MediaBlock)">
            <summary>
            Performs audio, video and subtitle conversions on the decoded input frame so data
            can be used as a Frame. Please note that if the output is passed as a reference.
            This works as follows: if the output reference is null it will be automatically instantiated
            and returned by this function. This enables to  either instantiate or reuse a previously allocated Frame.
            This is important because buffer allocations are expensive operations and this allows you
            to perform the allocation once and continue reusing the same buffer.
            </summary>
            <param name="input">The raw frame source. Has to be compatible with the target. (e.g. use VideoFrameSource to convert to VideoFrame)</param>
            <param name="output">The target frame. Has to be compatible with the source.</param>
            <param name="releaseInput">if set to <c>true</c> releases the raw frame source from unmanaged memory.</param>
            <param name="previousBlock">The previous block from which to extract timing information in case it is missing.</param>
            <returns>
            True if successful. False otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">No input context initialized</exception>
            <exception cref="T:Unosquare.FFME.Shared.MediaContainerException">MediaType</exception>
            <exception cref="T:System.ArgumentNullException">input</exception>
            <exception cref="T:System.ArgumentException">input
            or
            input</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.SignalAbortReads(System.Boolean)">
            <summary>
            Signals the packet reading operations to abort immediately.
            </summary>
            <param name="reset">if set to true, the read interrupt will reset the aborted state automatically</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.SignalResumeReads">
            <summary>
            Signals the state for read operations to stop being in the aborted state
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.UpdateComponents">
            <summary>
            Recreates the components using the selected streams in <see cref="P:Unosquare.FFME.Decoding.MediaContainer.MediaOptions" />.
            If the newly set streams are null these components are removed and disposed.
            All selected stream components are recreated.
            </summary>
            <returns>The registered component types</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Close">
            <summary>
            Closes the input context immediately releasing all resources.
            This method is equivalent to calling the dispose method.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamInitialize">
            <summary>
            Initializes the input context to start read operations.
            This does NOT create the stream components and therefore, there needs to be a call
            to the Open method.
            </summary>
            <exception cref="T:System.InvalidOperationException">The input context has already been initialized.</exception>
            <exception cref="T:Unosquare.FFME.Shared.MediaContainerException">When an error initializing the stream occurs.</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamInitializeInputContext">
            <summary>
            Initializes the InputContext and applies format options.
            https://www.ffmpeg.org/ffmpeg-formats.html#Format-Options
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamOpen">
            <summary>
            Opens the individual stream components to start reading packets.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamCreateComponent(Unosquare.FFME.Shared.MediaType,Unosquare.FFME.Shared.StreamInfo)">
            <summary>
            Creates and assigns a component of the given type using the specified stream information.
            If stream information is null, or the component is disabled, then the component is removed
            </summary>
            <param name="t">The Media Type.</param>
            <param name="stream">The stream information. Set to null to remove.</param>
            <returns>The media type that was created. None for unsuccessful creation</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamCreateComponents">
            <summary>
            Creates the stream components according to the specified streams in the current media options.
            Then it initializes the components of the correct type each.
            </summary>
            <returns>The component media types that are available</returns>
            <exception cref="T:Unosquare.FFME.Shared.MediaContainerException">The exception information</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamRead">
            <summary>
            Reads the next packet in the underlying stream and queues in the corresponding media component.
            Returns None of no packet was read.
            </summary>
            <returns>The type of media packet that was read</returns>
            <exception cref="T:System.InvalidOperationException">Initialize</exception>
            <exception cref="T:Unosquare.FFME.Shared.MediaContainerException">Raised when an error reading from the stream occurs.</exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.OnStreamReadInterrupt(System.Void*)">
            <summary>
            The interrupt callback to handle stream reading timeouts
            </summary>
            <param name="opaque">A pointer to the format input context</param>
            <returns>0 for OK, 1 for error (timeout)</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamSeek(System.TimeSpan)">
            <summary>
            Seeks to the closest and lesser or equal key frame on the main component
            Target time is in absolute, zero-based time.
            </summary>
            <param name="targetTimeAbsolute">The target time in absolute, 0-based time.</param>
            <returns>
            The list of media frames
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamSeekToStart">
            <summary>
            Seeks to the position at the start of the stream.
            </summary>
            <returns>The first frame of the main component.</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaContainer.StreamPositionDecode(Unosquare.FFME.Decoding.MediaComponent)">
            <summary>
            Reads from the stream and receives the next available frame
            from the specified component at the current stream position.
            This is a helper method for seeking logic.
            </summary>
            <param name="component">The component.</param>
            <returns>The next available frame</returns>
        </member>
        <member name="T:Unosquare.FFME.Decoding.MediaFrame">
            <summary>
            Represents a wrapper for an unmanaged frame.
            Derived classes implement the specifics of each media type.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaFrame.#ctor(FFmpeg.AutoGen.AVFrame*,Unosquare.FFME.Decoding.MediaComponent,Unosquare.FFME.Shared.MediaType)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.MediaFrame" /> class.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="component">The component.</param>
            <param name="mediaType">Type of the media.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaFrame.#ctor(FFmpeg.AutoGen.AVSubtitle*,Unosquare.FFME.Decoding.MediaComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.MediaFrame"/> class.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="component">The component.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaFrame.#ctor(System.Void*,Unosquare.FFME.Decoding.MediaComponent,Unosquare.FFME.Shared.MediaType)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.MediaFrame" /> class.
            </summary>
            <param name="pointer">The pointer.</param>
            <param name="component">The component.</param>
            <param name="mediaType">Type of the media.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.MediaType">
            <summary>
            Gets the type of the media.
            </summary>
            <value>
            The type of the media.
            </value>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.CompressedSize">
            <summary>
            Gets the size of the compressed packets that created this frame.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.PresentationTime">
            <summary>
            Gets the unadjusted, original presentation timestamp (PTS) of the frame.
            This is in <see cref="P:Unosquare.FFME.Decoding.MediaFrame.StreamTimeBase"/> units.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.DecodingTime">
            <summary>
            Gets the unadjusted, original presentation timestamp (PTS) of the packet.
            This is in <see cref="P:Unosquare.FFME.Decoding.MediaFrame.StreamTimeBase"/> units.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.StartTime">
            <summary>
            Gets the start time of the frame.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.EndTime">
            <summary>
            Gets the end time of the frame
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.StreamIndex">
            <summary>
            Gets the index of the stream from which this frame was decoded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.Duration">
            <summary>
            Gets the amount of time this data has to be presented
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.HasValidStartTime">
            <summary>
            Gets or sets a value indicating whether this frame obtained its start time
            form a valid frame pts value
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.IsStale">
            <summary>
            When the unmanaged frame is released (freed from unmanaged memory)
            this property will return true.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.StreamTimeBase">
            <summary>
            Gets the time base of the stream that generated this frame.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaFrame.InternalPointer">
            <summary>
            Gets or sets the internal pointer.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaFrame.CompareTo(Unosquare.FFME.Decoding.MediaFrame)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaFrame.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaFrame.CreateAVFrame">
            <summary>
            Creates a frame used for Audio or Video
            </summary>
            <returns>The frame allocated in unmanaged memory</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaFrame.ReleaseAVFrame(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Releases a previously allocated frame used for Audio or Video
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaFrame.CloneAVFrame(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Creates a deep copy of the specified source
            </summary>
            <param name="source">The source frame.</param>
            <returns>The cloned frame</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaFrame.CreateAVSubtitle">
            <summary>
            Allocates an AVSubtitle struct in unmanaged memory,
            </summary>
            <returns>The subtitle struct pointer</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaFrame.ReleaseAVSubtitle(FFmpeg.AutoGen.AVSubtitle*)">
            <summary>
            De-allocates the subtitle struct used to create in managed memory.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.MediaPacket">
            <summary>
            Represents a managed packet wrapper for the <see cref="T:FFmpeg.AutoGen.AVPacket"/> struct.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Unosquare.FFME.Decoding.MediaPacket.FlushPacketData">
            <summary>
            The flush packet data pointer
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaPacket.#ctor(FFmpeg.AutoGen.AVPacket*)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.MediaPacket" /> class.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaPacket.Pointer">
            <summary>
            Gets the <see cref="T:FFmpeg.AutoGen.AVPacket"/> pointer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaPacket.SafePointer">
            <summary>
            Gets the <see cref="T:FFmpeg.AutoGen.AVPacket"/> safe pointer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaPacket.Size">
            <summary>
            Gets the size in bytes.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaPacket.Position">
            <summary>
            Gets the byte position of the packet -1 if unknown.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaPacket.StreamIndex">
            <summary>
            Gets the stream index this packet belongs to.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaPacket.Duration">
            <summary>
            Gets the duration in stream timebase units.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaPacket.IsFlushPacket">
            <summary>
            Gets a value indicating whether the specified packet is a flush packet.
            These flush packets are used to clear the internal decoder buffers
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.MediaPacket.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaPacket.CreateReadPacket">
            <summary>
            Allocates a default readable packet
            </summary>
            <returns>
            A packet used for receiving data
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaPacket.CreateEmptyPacket(System.Int32)">
            <summary>
            Creates the empty packet.
            </summary>
            <param name="streamIndex">The stream index this packet belongs to.</param>
            <returns>
            The special empty packet that instructs the decoder to enter draining mode
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaPacket.CreateFlushPacket(System.Int32)">
            <summary>
            Creates a flush packet.
            </summary>
            <param name="streamIndex">The stream index this packet belongs to.</param>
            <returns>A special packet that makes the decoder flush its buffers</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaPacket.ClonePacket(FFmpeg.AutoGen.AVPacket*)">
            <summary>
            Clones the packet.
            </summary>
            <param name="source">The source.</param>
            <returns>The packet clone</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.MediaPacket.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Decoding.PacketBufferState">
            <summary>
            A value type that representing the packet buffer state.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.PacketBufferState.Length">
            <summary>
            The length in bytes of the packet buffer
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.PacketBufferState.Count">
            <summary>
            The number of packets in the packet buffer
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.PacketBufferState.CountThreshold">
            <summary>
            The minimum number of packets so <see cref="F:Unosquare.FFME.Decoding.PacketBufferState.HasEnoughPackets"/> is set to true.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.PacketBufferState.HasEnoughPackets">
            <summary>
            Whether the packet buffer has enough packets
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketBufferState.Equals(Unosquare.FFME.Decoding.PacketBufferState)">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Decoding.PacketQueue">
            <summary>
            A data structure containing a queue of packets to process.
            This class is thread safe and disposable.
            Queued, unmanaged packets are disposed automatically by this queue.
            Dequeued packets are the responsibility of the calling code.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.PacketQueue.Count">
            <summary>
            Gets the packet count.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.PacketQueue.BufferLength">
            <summary>
            Gets the sum of all the packet sizes contained
            by this queue.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.PacketQueue.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:FFmpeg.AutoGen.AVPacket"/> at the specified index.
            </summary>
            <value>
            The <see cref="T:FFmpeg.AutoGen.AVPacket"/>.
            </value>
            <param name="index">The index.</param>
            <returns>The packet reference</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.GetDuration(FFmpeg.AutoGen.AVRational)">
            <summary>
            Gets the duration in stream time base units.
            </summary>
            <param name="timeBase">The time base.</param>
            <returns>The total duration</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.Peek">
            <summary>
            Peeks the next available packet in the queue without removing it.
            If no packets are available, null is returned.
            </summary>
            <returns>The packet</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.Push(Unosquare.FFME.Decoding.MediaPacket)">
            <summary>
            Pushes the specified packet into the queue.
            In other words, queues the packet.
            </summary>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.Dequeue">
            <summary>
            Dequeue a packet from this queue.
            </summary>
            <returns>The dequeued packet</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.Clear">
            <summary>
            Clears and frees all the unmanaged packets from this queue.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Decoding.PacketQueue.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Decoding.PacketQueueOp">
            <summary>
            Defines the multiple packet queue operations
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.PacketQueueOp.Clear">
            <summary>
            The packet queue was cleared
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.PacketQueueOp.Queued">
            <summary>
            The packet queue queued a packet
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Decoding.PacketQueueOp.Dequeued">
            <summary>
            The packet queue dequeued a packet
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Decoding.SubtitleComponent">
            <summary>
            Performs subtitle stream extraction, decoding and text conversion.
            </summary>
            <seealso cref="T:Unosquare.FFME.Decoding.MediaComponent" />
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleComponent.#ctor(Unosquare.FFME.Decoding.MediaContainer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.SubtitleComponent"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="streamIndex">Index of the stream.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.SubtitleComponent.Delay">
            <summary>
            Gets the amount of time to offset the subtitles by for this component
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleComponent.MaterializeFrame(Unosquare.FFME.Decoding.MediaFrame,Unosquare.FFME.Shared.MediaBlock@,Unosquare.FFME.Shared.MediaBlock)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleComponent.StripSrtFormat(System.String)">
            <summary>
            Strips the SRT format and returns plain text.
            </summary>
            <param name="input">The input.</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleComponent.StripAssFormat(System.String)">
            <summary>
            Strips a line of text from the ASS format.
            </summary>
            <param name="input">The input.</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleComponent.CreateFrameSource(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Decoding.SubtitleFrame">
            <summary>
            Represents a wrapper for an unmanaged Subtitle frame.
            TODO: Only text (ASS and SRT) subtitles are supported currently.
            There is no support to bitmap subtitles.
            </summary>
            <seealso cref="T:Unosquare.FFME.Decoding.MediaFrame" />
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleFrame.#ctor(FFmpeg.AutoGen.AVSubtitle*,Unosquare.FFME.Decoding.MediaComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.SubtitleFrame" /> class.
            </summary>
            <param name="frame">The frame.</param>
            <param name="component">The component.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.SubtitleFrame.Text">
            <summary>
            Gets lines of text that the subtitle frame contains.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.SubtitleFrame.TextType">
            <summary>
            Gets the type of the text.
            </summary>
            <value>
            The type of the text.
            </value>
        </member>
        <member name="P:Unosquare.FFME.Decoding.SubtitleFrame.Pointer">
            <summary>
            Gets the pointer to the unmanaged subtitle struct
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.SubtitleFrame.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Decoding.VideoComponent">
            <summary>
            Performs video picture decoding, scaling and extraction logic.
            </summary>
            <seealso cref="T:Unosquare.FFME.Decoding.MediaComponent" />
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.#ctor(Unosquare.FFME.Decoding.MediaContainer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.VideoComponent"/> class.
            </summary>
            <param name="container">The container.</param>
            <param name="streamIndex">Index of the stream.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.ScalerFlags">
            <summary>
            Gets the video scaler flags used to perform color space conversion (if needed).
            Point / nearest-neighbor is the default and it is the cheapest. This is by design as
            we don't change the dimensions of the image. We only do color conversion.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.BaseFrameRate">
            <summary>
            Gets the base frame rate as reported by the stream component.
            All discrete timestamps can be represented in this frame rate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.AverageFrameRate">
            <summary>
            Gets the stream's average frame rate
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.FrameWidth">
            <summary>
            Gets the width of the picture frame.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.FrameHeight">
            <summary>
            Gets the height of the picture frame.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.DisplayRotation">
            <summary>
            Gets the display rotation.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.DisplayAspectWidth">
            <summary>
            Gets the display aspect width.
            This is NOT the pixel aspect width.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.DisplayAspectHeight">
            <summary>
            Gets the display aspect height.
            This si NOT the pixel aspect height.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.HardwareAccelerator">
            <summary>
            Gets the hardware accelerator.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.IsUsingHardwareDecoding">
            <summary>
            Gets a value indicating whether this component is using hardware-assisted decoding.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoComponent.SeekIndex">
            <summary>
            Gets the video seek index for this component.
            Returns null if it was not set in the media options.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.AttachHardwareDevice(Unosquare.FFME.Shared.HardwareDeviceInfo)">
            <summary>
            Attaches a hardware accelerator to this video component.
            </summary>
            <param name="selectedConfig">The selected configuration.</param>
            <returns>
            Whether or not the hardware accelerator was attached
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.ReleaseHardwareDevice">
            <summary>
            Releases the hardware device context.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.MaterializeFrame(Unosquare.FFME.Decoding.MediaFrame,Unosquare.FFME.Shared.MediaBlock@,Unosquare.FFME.Shared.MediaBlock)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.CreateFrameSource(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.NormalizePixelFormat(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Gets the pixel format replacing deprecated pixel formats.
            AV_PIX_FMT_YUVJ
            </summary>
            <param name="frame">The frame.</param>
            <returns>A normalized pixel format</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.ComputeRotation(System.Byte*)">
            <summary>
            Computes the Frame rotation property from side data.
            </summary>
            <param name="matrixArrayRef">The matrix array reference.</param>
            <returns>The angle to rotate</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.ComputeHypotenuse(System.Double,System.Double)">
            <summary>
            Computes the hypotenuse (right-angle triangles only).
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The length of the hypotenuse</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.ComputeFilterArguments(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            Computes the frame filter arguments that are appropriate for the video filtering chain.
            </summary>
            <param name="frame">The frame.</param>
            <returns>The base filter arguments</returns>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.InitializeFilterGraph(FFmpeg.AutoGen.AVFrame*)">
            <summary>
            If necessary, disposes the existing filter graph and creates a new one based on the frame arguments.
            </summary>
            <param name="frame">The frame.</param>
            <exception cref="T:Unosquare.FFME.Shared.MediaContainerException">
            avfilter_graph_create_filter
            or
            avfilter_graph_create_filter
            or
            avfilter_link
            or
            avfilter_graph_parse
            or
            avfilter_graph_config
            </exception>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoComponent.DestroyFilterGraph">
            <summary>
            Destroys the filter graph releasing unmanaged resources.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Decoding.VideoFrame">
            <summary>
            Represents a wrapper for an unmanaged ffmpeg video frame.
            </summary>
            <seealso cref="T:Unosquare.FFME.Decoding.MediaFrame" />
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoFrame.#ctor(FFmpeg.AutoGen.AVFrame*,Unosquare.FFME.Decoding.VideoComponent)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Decoding.VideoFrame" /> class.
            </summary>
            <param name="frame">The frame.</param>
            <param name="component">The video component.</param>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.ClosedCaptions">
            <summary>
            Gets the closed caption data collected from the frame in CEA-708/EAS-608 format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.DisplayPictureNumber">
            <summary>
            Gets the display picture number (frame number).
            If not set by the decoder, this attempts to obtain it by dividing the start time by the
            frame duration
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.PictureType">
            <summary>
            Gets the video picture type. I frames are key frames.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.CodedPictureNumber">
            <summary>
            Gets the coded picture number set by the decoder.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.SmtpeTimeCode">
            <summary>
            Gets the SMTPE time code.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.IsHardwareFrame">
            <summary>
            Gets a value indicating whether this frame was decoded in a hardware context.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.HardwareAcceleratorName">
            <summary>
            Gets the name of the hardware decoder if the frame was decoded in a hardware context.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Decoding.VideoFrame.Pointer">
            <summary>
            Gets the pointer to the unmanaged frame.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Decoding.VideoFrame.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Logging">
            <summary>
            A queue-based logger that automatically starts a background timer that
            empties the queue constantly, at a low priority, and in batches.
            Messages are handled by the <see cref="T:Unosquare.FFME.Shared.ILoggingHandler"/> object associated with the message.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Logging.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.Logging"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Logging.LogDebug(Unosquare.FFME.Shared.ILoggingSource,System.String,System.String)">
            <summary>
            Logs the specified message
            </summary>
            <param name="sender">The logging source.</param>
            <param name="aspectName">The apect of the code where the message is coming from.</param>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Unosquare.FFME.Logging.LogInfo(Unosquare.FFME.Shared.ILoggingSource,System.String,System.String)">
            <summary>
            Logs the specified message
            </summary>
            <param name="sender">The logging source.</param>
            <param name="aspectName">The apect of the code where the message is coming from.</param>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Unosquare.FFME.Logging.LogWarning(Unosquare.FFME.Shared.ILoggingSource,System.String,System.String)">
            <summary>
            Logs the specified message
            </summary>
            <param name="sender">The logging source.</param>
            <param name="aspectName">The apect of the code where the message is coming from.</param>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Unosquare.FFME.Logging.LogTrace(Unosquare.FFME.Shared.ILoggingSource,System.String,System.String)">
            <summary>
            Logs the specified message
            </summary>
            <param name="sender">The logging source.</param>
            <param name="aspectName">The apect of the code where the message is coming from.</param>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Unosquare.FFME.Logging.LogError(Unosquare.FFME.Shared.ILoggingSource,System.String,System.String)">
            <summary>
            Logs the specified message
            </summary>
            <param name="sender">The logging source.</param>
            <param name="aspectName">The apect of the code where the message is coming from.</param>
            <param name="message">The message text.</param>
        </member>
        <member name="M:Unosquare.FFME.Logging.LogError(Unosquare.FFME.Shared.ILoggingSource,System.String,System.String,System.Exception)">
            <summary>
            Logs the specified message
            </summary>
            <param name="sender">The logging source.</param>
            <param name="aspectName">The apect of the code where the message is coming from.</param>
            <param name="message">The message text.</param>
            <param name="ex">The exception to log.</param>
        </member>
        <member name="M:Unosquare.FFME.Logging.Log(Unosquare.FFME.Shared.ILoggingHandler,Unosquare.FFME.Shared.MediaLogMessageType,System.String)">
            <summary>
            Logs the specified message. This the generic logging mechanism available to all classes.
            </summary>
            <param name="loggingHandler">The object that will handle the message output.</param>
            <param name="messageType">Type of the message.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Unosquare.FFME.Logging.Log(Unosquare.FFME.Shared.ILoggingHandler,Unosquare.FFME.Shared.MediaLogMessageType,System.String,System.String)">
            <summary>
            Logs the specified logging handler.
            </summary>
            <param name="loggingHandler">The logging handler.</param>
            <param name="messageType">Type of the message.</param>
            <param name="aspectName">Name of the code aspect where the message is coming from.</param>
            <param name="message">The message.</param>
        </member>
        <member name="T:Unosquare.FFME.MediaEngine">
            <summary>
            Represents a Media Engine that contains underlying streams of audio and/or video.
            It uses the fantastic FFmpeg library to perform reading and decoding of media streams.
            </summary>
            <seealso cref="T:Unosquare.FFME.Shared.ILoggingHandler" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnMessageLogged(Unosquare.FFME.Shared.MediaLogMessage)">
            <summary>
            Raises the MessageLogged event
            </summary>
            <param name="message">The <see cref="T:Unosquare.FFME.Shared.MediaLogMessage" /> instance containing the message.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnMediaFailed(System.Exception)">
            <summary>
            Raises the media failed event.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnMediaClosed">
            <summary>
            Raises the media closed event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnMediaOpened">
            <summary>
            Raises the media opened event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnMediaInitializing(Unosquare.FFME.Shared.ContainerConfiguration,System.String)">
            <summary>
            Raises the media initializing event.
            </summary>
            <param name="config">The container configuration options.</param>
            <param name="url">The URL.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnMediaOpening">
            <summary>
            Raises the media opening event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnMediaChanging">
            <summary>
            Raises the media changing event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnMediaChanged">
            <summary>
            Raises the media changed event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnBufferingStarted">
            <summary>
            Raises the buffering started event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnBufferingEnded">
            <summary>
            Raises the buffering ended event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnSeekingStarted">
            <summary>
            Raises the Seeking started event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnSeekingEnded">
            <summary>
            Raises the Seeking ended event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnMediaEnded">
            <summary>
            Raises the media ended event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnPositionChanged(System.TimeSpan,System.TimeSpan)">
            <summary>
            Sends the on position changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendOnMediaStateChanged(Unosquare.FFME.Shared.PlaybackStatus,Unosquare.FFME.Shared.PlaybackStatus)">
            <summary>
            Sends the on media state changed.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.Commands">
            <summary>
            The command queue to be executed in the order they were sent.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.Container">
            <summary>
            The underlying media container that provides access to
            individual media component streams
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Open(System.Uri)">
            <summary>
            Opens the media using the specified URI.
            </summary>
            <param name="uri">The URI.</param>
            <returns>The awaitable task</returns>
            <exception cref="T:System.InvalidOperationException">Source</exception>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Open(Unosquare.FFME.Shared.IMediaInputStream)">
            <summary>
            Opens the media using a custom media input stream.
            </summary>
            <param name="stream">The URI.</param>
            <returns>The awaitable task</returns>
            <exception cref="T:System.InvalidOperationException">Source</exception>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Close">
            <summary>
            Closes the currently loaded media.
            </summary>
            <returns>The awaitable task</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.ChangeMedia">
            <summary>
            Requests new media options to be applied, including stream component selection.
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Play">
            <summary>
            Begins or resumes playback of the currently loaded media.
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Pause">
            <summary>
            Pauses playback of the currently loaded media.
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Stop">
            <summary>
            Pauses and rewinds the currently loaded media.
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Seek(System.TimeSpan)">
            <summary>
            Seeks to the specified position.
            </summary>
            <param name="position">New position for the player.</param>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.StepForward">
            <summary>
            Seeks a single frame forward.
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.StepBackward">
            <summary>
            Seeks a single frame backward.
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.#ctor(System.Object,Unosquare.FFME.Shared.IMediaConnector)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.MediaEngine" /> class.
            </summary>
            <param name="parent">The associated parent object.</param>
            <param name="connector">The parent implementing connector methods.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the static Initialize method has not been called.</exception>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.Unosquare#FFME#Shared#ILoggingSource#LoggingHandler">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.State">
            <summary>
            Contains the Media Status
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.WallClock">
            <summary>
            Gets the internal real time clock position.
            This is different from the position property and it is useful
            in computing things like real-time latency in a render cycle.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.MediaInfo">
            <summary>
            Provides stream, chapter and program info of the underlying media.
            Returns null when no media is loaded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.Parent">
            <summary>
            Gets the associated parent object.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.Clock">
            <summary>
            Represents a real-time time measuring device.
            Rendering media should occur as requested by the clock.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.Connector">
            <summary>
            Gets the event connector (platform specific).
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Unosquare#FFME#Shared#ILoggingHandler#HandleLogMessage(Unosquare.FFME.Shared.MediaLogMessage)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.DisposePreloadedSubtitles">
            <summary>
            Disposes the preloaded subtitles.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaEngine.InitLock">
            <summary>
            The initialize lock
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaEngine.IsInitialized">
            <summary>
            The has initialized flag
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaEngine.m_FFmpegDirectory">
            <summary>
            The ffmpeg directory
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaEngine.m_FFmpegLoadModeFlags">
            <summary>
            Stores the load mode flags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.Platform">
            <summary>
            Gets the platform-specific implementation requirements.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.FFmpegDirectory">
            <summary>
            Gets or sets the FFmpeg path from which to load the FFmpeg binaries.
            You must set this path before setting the Source property for the first time on any instance of this control.
            Setting this property when FFmpeg binaries have been registered will have no effect.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.FFmpegVersionInfo">
            <summary>
            Gets the FFmpeg version information. Returns null
            when the libraries have not been loaded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.FFmpegLoadModeFlags">
            <summary>
            Gets or sets the bitwise library identifiers to load.
            If FFmpeg is already loaded, the value cannot be changed.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.InputFormatNames">
            <summary>
            Gets the registered FFmpeg input format names.
            </summary>
            <exception cref="T:System.InvalidOperationException">When the MediaEngine has not been initialized</exception>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.InputFormatOptionsGlobal">
            <summary>
            Gets the global input format options information.
            </summary>
            <exception cref="T:System.InvalidOperationException">When the MediaEngine has not been initialized</exception>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.InputFormatOptions">
            <summary>
            Gets the input format options.
            </summary>
            <exception cref="T:System.InvalidOperationException">When the MediaEngine has not been initialized</exception>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.DecoderNames">
            <summary>
            Gets the registered FFmpeg decoder codec names.
            </summary>
            <exception cref="T:System.InvalidOperationException">When the MediaEngine has not been initialized</exception>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.DecoderOptionsGlobal">
            <summary>
            Gets the global options that apply to all decoders
            </summary>
            <exception cref="T:System.InvalidOperationException">When the MediaEngine has not been initialized</exception>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.DecoderOptions">
            <summary>
            Gets the decoder specific options.
            </summary>
            <exception cref="T:System.InvalidOperationException">When the MediaEngine has not been initialized</exception>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.AllCodecs">
            <summary>
            Gets all registered encoder and decoder codecs.
            </summary>
            <exception cref="T:System.InvalidOperationException">When the MediaEngine has not been initialized</exception>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.Initialize(Unosquare.FFME.Shared.IPlatform)">
            <summary>
            Initializes the Media Element Core.
            </summary>
            <param name="platform">The platform-specific implementation.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.LoadFFmpeg">
            <summary>
            Forces the pre-loading of the FFmpeg libraries according to the values of the
            <see cref="P:Unosquare.FFME.MediaEngine.FFmpegDirectory"/> and <see cref="P:Unosquare.FFME.MediaEngine.FFmpegLoadModeFlags"/>
            Also, sets the <see cref="P:Unosquare.FFME.MediaEngine.FFmpegVersionInfo"/> property. Throws an exception
            if the libraries cannot be loaded.
            </summary>
            <returns>true if libraries were loaded, false if libraries were already loaded.</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.RetrieveMediaInfo(System.String)">
            <summary>
            Retrieves the media information including all streams, chapters and programs.
            </summary>
            <param name="sourceUrl">The source URL.</param>
            <returns>The contents of the media information.</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.CreateVideoSeekIndex(System.String,System.Int32)">
            <summary>
            Creates a viedo seek index.
            </summary>
            <param name="sourceUrl">The source URL.</param>
            <param name="streamIndex">Index of the stream. Use -1 for automatic stream selection.</param>
            <returns>
            The seek index object
            </returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.LoadBlocks(System.String,Unosquare.FFME.Shared.MediaType,Unosquare.FFME.Shared.ILoggingHandler)">
            <summary>
            Reads all the blocks of the specified media type from the source url.
            </summary>
            <param name="sourceUrl">The subtitles URL.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="parent">The parent.</param>
            <returns>A buffer containing all the blocks</returns>
        </member>
        <member name="F:Unosquare.FFME.MediaEngine.m_IsSyncBuffering">
            <summary>
            This partial class implements:
            1. Packet reading from the Container
            2. Frame Decoding from packet buffer and Block buffering
            3. Block Rendering from block buffer
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.Blocks">
            <summary>
            Holds the materialized block cache for each media type.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.PreloadedSubtitles">
            <summary>
            Gets the preloaded subtitle blocks.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.PacketReadingCycle">
            <summary>
            Gets the packet reading cycle control event.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.FrameDecodingCycle">
            <summary>
            Gets the frame decoding cycle control event.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.BlockRenderingCycle">
            <summary>
            Gets the block rendering cycle control event.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.BufferChangedEvent">
            <summary>
            Completed whenever a change in the packet buffer is detected.
            This needs to be reset manually and prevents high CPU usage in the packet reading worker.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.Renderers">
            <summary>
            Holds the block renderers
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.LastRenderTime">
            <summary>
            Holds the last rendered StartTime for each of the media block types
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.IsSyncBuffering">
            <summary>
            Gets or sets a value indicating whether the decoder worker is sync-buffering
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.HasDecodingEnded">
            <summary>
            Gets or sets a value indicating whether the decoder worker has decoded all frames.
            This is an indication that the rendering worker should probe for end of media scenarios
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.CanExitSyncBuffering">
            <summary>
            Gets a value indicating whether the packet reader has finished sync-buffering.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.BufferLengthMax">
            <summary>
            Gets the buffer length maximum.
            port of MAX_QUEUE_SIZE (ffplay.c)
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.ShouldReadMorePackets">
            <summary>
            Gets a value indicating whether packets can be read and
            room is available in the download cache.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.ShouldWorkerReadPackets">
            <summary>
            Gets a value indicating whether the reading worker can read packets at the current time.
            This is simply a bit-wise AND of negating <see cref="P:Unosquare.FFME.MediaEngine.IsWorkerInterruptRequested"/> == false
            and <see cref="P:Unosquare.FFME.MediaEngine.ShouldReadMorePackets"/>
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaEngine.IsWorkerInterruptRequested">
            <summary>
            Gets a value indicating whether a worker interrupt has been requested by the command manager.
            This instructs potentially long loops in workers to immediately exit.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.StartWorkers">
            <summary>
            Initializes the media block buffers and
            starts packet reader, frame decoder, and block rendering workers.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.StopWorkers">
            <summary>
            Stops the packet reader, frame decoder, and block renderers
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.PreLoadSubtitles">
            <summary>
            Pre-loads the subtitles from the MediaOptions.SubtitlesUrl.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SnapPositionToBlockPosition(System.TimeSpan)">
            <summary>
            Returns the value of a discrete frame position of the main media component if possible.
            Otherwise, it simply rounds the position to the nearest millisecond.
            </summary>
            <param name="position">The position.</param>
            <returns>The snapped, discrete, normalized position</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.ResumePlayback">
            <summary>
            Resumes the playback by resuming the clock and updating the playback state to state.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.ChangePosition(System.TimeSpan)">
            <summary>
            Updates the clock position and notifies the new
            position to the <see cref="P:Unosquare.FFME.MediaEngine.State" />.
            </summary>
            <param name="position">The position.</param>
            <returns>The newly set position</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.ResetPosition">
            <summary>
            Resets the clock to the zero position and notifies the new
            position to rhe <see cref="P:Unosquare.FFME.MediaEngine.State"/>.
            </summary>
            <returns>The newly set position</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.CanReadMoreFramesOf(Unosquare.FFME.Shared.MediaType)">
            <summary>
            Gets a value indicating whether more frames can be decoded into blocks of the given type.
            </summary>
            <param name="t">The media type.</param>
            <returns>
              <c>true</c> if more frames can be decoded; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.SendBlockToRenderer(Unosquare.FFME.Shared.MediaBlock,System.TimeSpan)">
            <summary>
            Sends the given block to its corresponding media renderer.
            </summary>
            <param name="block">The block.</param>
            <param name="clockPosition">The clock position.</param>
            <returns>
            The number of blocks sent to the renderer
            </returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.AddNextBlock(Unosquare.FFME.Shared.MediaType)">
            <summary>
            Tries to receive the next frame from the decoder by decoding queued
            Packets and converting the decoded frame into a Media Block which gets
            queued into the playback block buffer.
            </summary>
            <param name="t">The MediaType.</param>
            <returns>True if a block could be added. False otherwise.</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.LogRenderBlock(Unosquare.FFME.Shared.MediaBlock,System.TimeSpan,System.Int32)">
            <summary>
            Logs a block rendering operation as a Trace Message
            if the debugger is attached.
            </summary>
            <param name="block">The block.</param>
            <param name="clockPosition">The clock position.</param>
            <param name="renderIndex">Index of the render.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.RunFrameDecodingWorker">
            <summary>
            Continually decodes the available packet buffer to have as
            many frames as possible in each frame queue and
            up to the MaxFrames on each component
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.InvalidateRenderer(Unosquare.FFME.Shared.MediaType)">
            <summary>
            Invalidates the last render time for the given component.
            Additionally, it calls Seek on the renderer to remove any caches
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.DelayDecoder(Unosquare.FFME.Primitives.DelayProvider,System.Int32)">
            <summary>
            Delays the decoder loop preventing 100% CPU core usage.
            </summary>
            <param name="delay">The delay.</param>
            <param name="decodedFrameCount">The decoded frame count.</param>
            <returns>True if a delay was actually introduced</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.DetectHasDecodingEnded(System.Int32,Unosquare.FFME.Shared.MediaType)">
            <summary>
            Detects the end of media in the decoding worker.
            </summary>
            <param name="decodedFrameCount">The decoded frame count.</param>
            <param name="main">The main.</param>
            <returns>True if media ended</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.RunPacketReadingWorker">
            <summary>
            Runs the read task which keeps a packet buffer as full as possible.
            It reports on DownloadProgress by queueing an update to the property
            in order to avoid any kind of disruption to this thread caused by the UI thread.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.StartBlockRenderingWorker">
            <summary>
            Starts the block rendering worker.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaEngine.StopBlockRenderingWorker">
            <summary>
            Stops the block rendering worker.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Primitives.AtomicBoolean">
            <summary>
            Fast, atomic boolean combining interlocked to write value and volatile to read values
            Idea taken from Memory model and .NET operations in article:
            http://igoro.com/archive/volatile-keyword-in-c-memory-model-explained/
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicBoolean.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicBoolean"/> class.
            </summary>
            <param name="initialValue">if set to <c>true</c> [initial value].</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicBoolean.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicBoolean"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicBoolean.FromLong(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicBoolean.ToLong(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Primitives.AtomicDateTime">
            <summary>
            Defines an atomic DateTime
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicDateTime.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicDateTime"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicDateTime.FromLong(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicDateTime.ToLong(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Primitives.AtomicDouble">
            <summary>
            Fast, atomic double combining interlocked to write value and volatile to read values
            Idea taken from Memory model and .NET operations in article:
            http://igoro.com/archive/volatile-keyword-in-c-memory-model-explained/
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicDouble.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicDouble"/> class.
            </summary>
            <param name="initialValue">if set to <c>true</c> [initial value].</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicDouble.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicDouble"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicDouble.FromLong(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicDouble.ToLong(System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Primitives.AtomicInteger">
            <summary>
            Represents an atomically readable or writable integer.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicInteger.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicInteger"/> class.
            </summary>
            <param name="initialValue">if set to <c>true</c> [initial value].</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicInteger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicInteger"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicInteger.FromLong(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicInteger.ToLong(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Primitives.AtomicLong">
            <summary>
            Fast, atomic long combining interlocked to write value and volatile to read values
            Idea taken from Memory model and .NET operations in article:
            http://igoro.com/archive/volatile-keyword-in-c-memory-model-explained/
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicLong.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicLong"/> class.
            </summary>
            <param name="initialValue">if set to <c>true</c> [initial value].</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicLong.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicLong"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicLong.FromLong(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicLong.ToLong(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Primitives.AtomicTimeSpan">
            <summary>
            Represents an atomic TimeSpan type
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTimeSpan.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicTimeSpan" /> class.
            </summary>
            <param name="initialValue">The initial value.</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTimeSpan.FromLong(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTimeSpan.ToLong(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Primitives.AtomicTypeBase`1">
            <summary>
            Provides a generic implementation of an Atomic (interlocked) type
            </summary>
            <typeparam name="T">The structure type backed by a 64-bit value</typeparam>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicTypeBase`1"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
        </member>
        <member name="P:Unosquare.FFME.Primitives.AtomicTypeBase`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.AtomicTypeBase`1.BackingValue">
            <summary>
            Gets or sets the backing value.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_Equality(Unosquare.FFME.Primitives.AtomicTypeBase{`0},Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <summary>
            Implements the operator.
            </summary>
            <param name="left">The left-hand side operand.</param>
            <param name="right">The right-hand side operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_Equality(Unosquare.FFME.Primitives.AtomicTypeBase{`0},`0)">
            <summary>
            Implements the operator.
            </summary>
            <param name="left">The left-hand side operand.</param>
            <param name="right">The right-hand side operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_Equality(`0,Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <summary>
            Implements the operator.
            </summary>
            <param name="left">The left-hand side operand.</param>
            <param name="right">The right-hand side operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_Inequality(Unosquare.FFME.Primitives.AtomicTypeBase{`0},Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <summary>
            Implements the operator.
            </summary>
            <param name="left">The left-hand side operand.</param>
            <param name="right">The right-hand side operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_Inequality(Unosquare.FFME.Primitives.AtomicTypeBase{`0},`0)">
            <summary>
            Implements the operator.
            </summary>
            <param name="left">The left-hand side operand.</param>
            <param name="right">The right-hand side operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_Inequality(`0,Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <summary>
            Implements the operator.
            </summary>
            <param name="left">The left-hand side operand.</param>
            <param name="right">The right-hand side operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_GreaterThan(Unosquare.FFME.Primitives.AtomicTypeBase{`0},`0)">
            <summary>
            Implements the operator.
            </summary>
            <param name="left">The left-hand side operand.</param>
            <param name="right">The right-hand side operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_GreaterThan(Unosquare.FFME.Primitives.AtomicTypeBase{`0},Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <summary>
            Implements the operator.
            </summary>
            <param name="left">The left-hand side operand.</param>
            <param name="right">The right-hand side operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_GreaterThan(`0,Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <summary>
            Implements the operator.
            </summary>
            <param name="left">The left-hand side operand.</param>
            <param name="right">The right-hand side operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_LessThan(Unosquare.FFME.Primitives.AtomicTypeBase{`0},`0)">
            <summary>
            Implements the operator.
            </summary>
            <param name="left">The left-hand side operand.</param>
            <param name="right">The right-hand side operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_LessThan(Unosquare.FFME.Primitives.AtomicTypeBase{`0},Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <summary>
            Implements the operator.
            </summary>
            <param name="left">The left-hand side operand.</param>
            <param name="right">The right-hand side operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_LessThan(`0,Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <summary>
            Implements the operator.
            </summary>
            <param name="left">The left-hand side operand.</param>
            <param name="right">The right-hand side operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_GreaterThanOrEqual(Unosquare.FFME.Primitives.AtomicTypeBase{`0},`0)">
            <summary>
            Implements the operator.
            </summary>
            <param name="left">The left-hand side operand.</param>
            <param name="right">The right-hand side operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_GreaterThanOrEqual(Unosquare.FFME.Primitives.AtomicTypeBase{`0},Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <summary>
            Implements the operator.
            </summary>
            <param name="left">The left-hand side operand.</param>
            <param name="right">The right-hand side operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_GreaterThanOrEqual(`0,Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <summary>
            Implements the operator.
            </summary>
            <param name="left">The left-hand side operand.</param>
            <param name="right">The right-hand side operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_LessThanOrEqual(Unosquare.FFME.Primitives.AtomicTypeBase{`0},`0)">
            <summary>
            Implements the operator.
            </summary>
            <param name="left">The left-hand side operand.</param>
            <param name="right">The right-hand side operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_LessThanOrEqual(Unosquare.FFME.Primitives.AtomicTypeBase{`0},Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <summary>
            Implements the operator.
            </summary>
            <param name="left">The left-hand side operand.</param>
            <param name="right">The right-hand side operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_LessThanOrEqual(`0,Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <summary>
            Implements the operator.
            </summary>
            <param name="left">The left-hand side operand.</param>
            <param name="right">The right-hand side operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_Increment(Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <summary>
            Implements the operator.
            </summary>
            <param name="instance">The operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.op_Decrement(Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <summary>
            Implements the operator.
            </summary>
            <param name="instance">The operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.CompareTo(`0)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.CompareTo(Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.Equals(Unosquare.FFME.Primitives.AtomicTypeBase{`0})">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.Equals(`0)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.FromLong(System.Int64)">
            <summary>
            Converts from a long value to the target type.
            </summary>
            <param name="backingValue">The backing value.</param>
            <returns>The value converted form a long value</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicTypeBase`1.ToLong(`0)">
            <summary>
            Converts from the target type to a long value
            </summary>
            <param name="value">The value.</param>
            <returns>The value converted to a long value</returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.AtomicULong">
            <summary>
            Provides an atomic type for an unsigned long.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicULong.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.AtomicULong"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicULong.FromLong(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.AtomicULong.ToLong(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Primitives.Benchmark">
            <summary>
            A simple benchmarking class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.Benchmark.Start(System.String)">
            <summary>
            Starts measuring with the given identifier.
            </summary>
            <param name="identifier">The identifier.</param>
            <returns>A disposable object that when disposed, adds a benchmark result.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.Benchmark.Dump">
            <summary>
            Outputs the benchmark statistics.
            </summary>
            <returns>A string containing human-readable statistics</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.Benchmark.Add(System.String,System.TimeSpan)">
            <summary>
            Adds the specified result to the given identifier.
            </summary>
            <param name="identifier">The identifier.</param>
            <param name="elapsed">The elapsed.</param>
        </member>
        <member name="T:Unosquare.FFME.Primitives.Benchmark.BenchmarkUnit">
            <summary>
            Represents a disposable benchmark unit.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.FFME.Primitives.Benchmark.BenchmarkUnit.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.Benchmark.BenchmarkUnit" /> class.
            </summary>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.Benchmark.BenchmarkUnit.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.Benchmark.BenchmarkUnit.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Primitives.CircularBuffer">
            <summary>
            A fixed-size buffer that acts as an infinite length one.
            This buffer is backed by unmanaged, very fast memory so ensure you call
            the dispose method when you are done using it.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Unosquare.FFME.Primitives.CircularBuffer.SyncLock">
            <summary>
            The locking object to perform synchronization.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Primitives.CircularBuffer.Buffer">
            <summary>
            The unmanaged buffer
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.CircularBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.CircularBuffer"/> class.
            </summary>
            <param name="bufferLength">Length of the buffer.</param>
        </member>
        <member name="P:Unosquare.FFME.Primitives.CircularBuffer.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.CircularBuffer.Length">
            <summary>
            Gets the capacity of this buffer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.CircularBuffer.ReadIndex">
            <summary>
            Gets the current, 0-based read index
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.CircularBuffer.RewindableCount">
            <summary>
            Gets the maximum rewindable amount of bytes.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.CircularBuffer.WriteIndex">
            <summary>
            Gets the current, 0-based write index.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.CircularBuffer.WriteTag">
            <summary>
            Gets an the object associated with the last write
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.CircularBuffer.ReadableCount">
            <summary>
            Gets the available bytes to read.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.CircularBuffer.WritableCount">
            <summary>
            Gets the number of bytes that can be written.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.CircularBuffer.CapacityPercent">
            <summary>
            Gets percentage of used bytes (readable/available, from 0.0 to 1.0).
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.CircularBuffer.Skip(System.Int32)">
            <summary>
            Skips the specified amount requested bytes to be read.
            </summary>
            <param name="requestedBytes">The requested bytes.</param>
            <exception cref="T:System.InvalidOperationException">When requested bytes GT readable count</exception>
        </member>
        <member name="M:Unosquare.FFME.Primitives.CircularBuffer.Rewind(System.Int32)">
            <summary>
            Rewinds the read position by specified requested amount of bytes.
            </summary>
            <param name="requestedBytes">The requested bytes.</param>
            <exception cref="T:System.InvalidOperationException">When requested GT rewindable</exception>
        </member>
        <member name="M:Unosquare.FFME.Primitives.CircularBuffer.Read(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Reads the specified number of bytes into the target array.
            </summary>
            <param name="requestedBytes">The requested bytes.</param>
            <param name="target">The target.</param>
            <param name="targetOffset">The target offset.</param>
            <exception cref="T:System.InvalidOperationException">When requested bytes is greater than readable count</exception>
        </member>
        <member name="M:Unosquare.FFME.Primitives.CircularBuffer.Write(System.IntPtr,System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
            Writes data to the backing buffer using the specified pointer and length.
            and associating a write tag for this operation.
            </summary>
            <param name="source">The source.</param>
            <param name="length">The length.</param>
            <param name="writeTag">The write tag.</param>
            <param name="overwrite">if set to <c>true</c>, overwrites the data even if it has not been read.</param>
            <exception cref="T:System.InvalidOperationException">When read needs to be called more often!</exception>
        </member>
        <member name="M:Unosquare.FFME.Primitives.CircularBuffer.Clear">
            <summary>
            Resets all states as if this buffer had just been created.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.CircularBuffer.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Primitives.DelayProvider">
            <summary>
            Represents logic providing several delay mechanisms
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.DelayProvider.#ctor(Unosquare.FFME.Primitives.DelayProvider.DelayStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.DelayProvider"/> class.
            </summary>
            <param name="strategy">The strategy.</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.DelayProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.DelayProvider"/> class.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Primitives.DelayProvider.DelayStrategy">
            <summary>
            Enumerates the different ways of providing delays
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Primitives.DelayProvider.DelayStrategy.ThreadSleep">
            <summary>
            Using the Thread.Sleep(1) mechanism
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Primitives.DelayProvider.DelayStrategy.TaskDelay">
            <summary>
            Using the Task.Delay(1).Wait mechanism
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Primitives.DelayProvider.DelayStrategy.ThreadPool">
            <summary>
            Using a wait event that completes in a background thread pool thread.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Primitives.DelayProvider.DelayStrategy.TimerEvent">
            <summary>
            Using a wait event that completes in a background thread timer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.DelayProvider.Strategy">
            <summary>
            Gets the selected delay strategy.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.DelayProvider.WaitOne">
            <summary>
            Creates the smallest possible, synchronous delay based on the selected strategy
            </summary>
            <returns>The elapsed time of the delay</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.DelayProvider.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.DelayProvider.DelaySleep">
            <summary>
            Implementation using Thread.Sleep
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.DelayProvider.DelayTask">
            <summary>
            Implementation using Task.Delay
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.DelayProvider.DelayThreadPool">
            <summary>
            Implementation using the ThreadPool with a wait event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.DelayProvider.DelayTimerEvent">
            <summary>
            Implementation using a Timer with a wait event.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Primitives.ISyncLocker">
            <summary>
            Defines a generic interface for synchronized locking mechanisms
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.ISyncLocker.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.ISyncLocker.AcquireWriterLock">
            <summary>
            Acquires a writer lock.
            The lock is released when the returned locking object is disposed.
            </summary>
            <returns>A disposable locking object.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.ISyncLocker.TryAcquireWriterLock(System.Int32,System.IDisposable@)">
            <summary>
            Tries to acquire a writer lock with a timeout.
            </summary>
            <param name="timeoutMilliseconds">The timeout milliseconds.</param>
            <param name="locker">The locker.</param>
            <returns>True if the lock was acquired</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.ISyncLocker.TryAcquireWriterLock(System.IDisposable@)">
            <summary>
            Tries to acquire a writer lock with a default timeout.
            </summary>
            <param name="locker">The locker.</param>
            /// <returns>True if the lock was acquired</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.ISyncLocker.AcquireReaderLock">
            <summary>
            Acquires a reader lock.
            The lock is released when the returned locking object is disposed.
            </summary>
            <returns>A disposable locking object.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.ISyncLocker.TryAcquireReaderLock(System.Int32,System.IDisposable@)">
            <summary>
            Tries to acquire a reader lock with a timeout.
            </summary>
            <param name="timeoutMilliseconds">The timeout milliseconds.</param>
            <param name="locker">The locker.</param>
            <returns>True if the lock was acquired</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.ISyncLocker.TryAcquireReaderLock(System.IDisposable@)">
            <summary>
            Tries to acquire a reader lock with a default timeout.
            </summary>
            <param name="locker">The locker.</param>
            <returns>True if the lock was acquired</returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.IWaitEvent">
            <inheritdoc />
            <summary>
            Provides a generalized API for ManualResetEvent and ManualResetEventSlim
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.IWaitEvent.IsCompleted">
            <summary>
            Gets a value indicating whether the event is in the completed state.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.IWaitEvent.IsInProgress">
            <summary>
            Gets a value indicating whether the Begin method has been called.
            It returns false after the Complete method is called
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.IWaitEvent.IsValid">
            <summary>
            Returns true if the underlying handle is not closed and it is still valid.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.IWaitEvent.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.IWaitEvent.Begin">
            <summary>
            Enters the state in which waiters need to wait.
            All future waiters will block when they call the Wait method
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.IWaitEvent.Complete">
            <summary>
            Leaves the state in which waiters need to wait.
            All current waiters will continue.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.IWaitEvent.Wait">
            <summary>
            Waits for the event to be completed
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.IWaitEvent.Wait(System.TimeSpan)">
            <summary>
            Waits for the event to be completed.
            Returns True when there was no timeout. False if the timeout was reached
            </summary>
            <param name="timeout">The maximum amount of time to wait for.</param>
            <returns>True when there was no timeout. False if the timeout was reached</returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.MediaBlockBuffer">
            <summary>
            Represents a set of pre-allocated media blocks of the same media type.
            A block buffer contains playback and pool blocks. Pool blocks are blocks that
            can be reused. Playback blocks are blocks that have been filled.
            This class is thread safe.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Primitives.MediaBlockBuffer.PoolBlocks">
            <summary>
            The blocks that are available to be filled.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Primitives.MediaBlockBuffer.PlaybackBlocks">
            <summary>
            The blocks that are available for rendering.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Primitives.MediaBlockBuffer.SyncLock">
            <summary>
            Controls multiple reads and exclusive writes
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.#ctor(System.Int32,Unosquare.FFME.Shared.MediaType)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.MediaBlockBuffer"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="mediaType">Type of the media.</param>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.MediaType">
            <summary>
            Gets the media type of the block buffer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.Capacity">
            <summary>
            Gets the maximum count of this buffer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.RangeStartTime">
            <summary>
            Gets the start time of the first block.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.RangeEndTime">
            <summary>
            Gets the end time of the last block.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.RangeDuration">
            <summary>
            Gets the range of time between the first block and the end time of the last block.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.RangeBitRate">
            <summary>
            Gets the compressed data bit rate from which media blocks were created.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.AverageBlockDuration">
            <summary>
            Gets the average duration of the currently available playback blocks.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.IsMonotonic">
            <summary>
            Gets a value indicating whether all the durations of the blocks are equal
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.MonotonicDuration">
            <summary>
            Gets the duration of the blocks. If the blocks are not monotonic returns zero.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.Count">
            <summary>
            Gets the number of available playback blocks.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.CapacityPercent">
            <summary>
            Gets the usage percent from 0.0 to 1.0
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.IsFull">
            <summary>
            Gets a value indicating whether the playback blocks are all allocated.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Unosquare.FFME.Shared.MediaBlock" /> at the specified index.
            </summary>
            <value>
            The <see cref="T:Unosquare.FFME.Shared.MediaBlock"/>.
            </value>
            <param name="index">The index.</param>
            <returns>The media block</returns>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaBlockBuffer.Item(System.TimeSpan)">
            <summary>
            Gets the <see cref="T:Unosquare.FFME.Shared.MediaBlock" /> at the specified timestamp.
            </summary>
            <value>
            The <see cref="T:Unosquare.FFME.Shared.MediaBlock"/>.
            </value>
            <param name="at">At time.</param>
            <returns>The media block</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.GetRangePercent(System.TimeSpan)">
            <summary>
            Gets the percentage of the range for the given time position.
            </summary>
            <param name="position">The position.</param>
            <returns>The percent of the range</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.Neighbors(Unosquare.FFME.Shared.MediaBlock)">
            <summary>
            Gets the neighboring blocks in an atomic operation.
            The first item in the array is the previous block. The second is the next block. The third is the current block.
            </summary>
            <param name="current">The current block to get neighbors from.</param>
            <returns>The previous (if any) and next (if any) blocks.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.Neighbors(System.TimeSpan)">
            <summary>
            Gets the neighboring blocks in an atomic operation.
            The first item in the array is the previous block. The second is the next block. The third is the current block.
            </summary>
            <param name="position">The current block position to get neighbors from.</param>
            <returns>The previous (if any) and next (if any) blocks.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.Next(Unosquare.FFME.Shared.MediaBlock)">
            <summary>
            Retrieves the block following the provided current block.
            If the argument is null and there are blocks, the first block is returned.
            </summary>
            <param name="current">The current block.</param>
            <returns>The next media block</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.ContinuousNext(Unosquare.FFME.Shared.MediaBlock)">
            <summary>
            Retrieves the next time-continuous block.
            </summary>
            <param name="current">The current.</param>
            <returns>The next time-continuous block</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.Previous(Unosquare.FFME.Shared.MediaBlock)">
            <summary>
            Retrieves the block prior the provided current block.
            If the argument is null and there are blocks, the last block is returned.
            </summary>
            <param name="current">The current block.</param>
            <returns>The next media block</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.IsInRange(System.TimeSpan)">
            <summary>
            Determines whether the given render time is within the range of playback blocks.
            </summary>
            <param name="renderTime">The render time.</param>
            <returns>
              <c>true</c> if [is in range] [the specified render time]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.IndexOf(System.TimeSpan)">
            <summary>
            Retrieves the index of the playback block corresponding to the specified
            render time. This uses very fast binary and linear search combinations.
            If there are no playback blocks it returns -1.
            If the render time is greater than the range end time, it returns the last playback block index.
            If the render time is less than the range start time, it returns the first playback block index.
            </summary>
            <param name="renderTime">The render time.</param>
            <returns>The media block's index</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.Add(Unosquare.FFME.Decoding.MediaFrame,Unosquare.FFME.Decoding.MediaContainer)">
            <summary>
            Adds a block to the playback blocks by converting the given frame.
            If there are no more blocks in the pool, the oldest block is returned to the pool
            and reused for the new block. The source frame is automatically disposed.
            </summary>
            <param name="source">The source.</param>
            <param name="container">The container.</param>
            <returns>The filled block.</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.Clear">
            <summary>
            Clears all the playback blocks returning them to the
            block pool.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.Debug">
            <summary>
            Returns a formatted string with information about this buffer
            </summary>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.GetSnapPosition(System.TimeSpan)">
            <summary>
            Gets the snap, discrete position of the corresponding block.
            If the position is greater than the end time of the block, the
            start time of the next available block is returned.
            </summary>
            <param name="position">The analog position.</param>
            <returns>A discrete frame position</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.CreateBlock(Unosquare.FFME.Shared.MediaType)">
            <summary>
            Block factory method.
            </summary>
            <param name="mediaType">Type of the media.</param>
            <exception cref="T:System.InvalidCastException">MediaBlock does not have a valid type</exception>
            <returns>An instance of the block of the specified type</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaBlockBuffer.UpdateCollectionProperties">
            <summary>
            Updates the <see cref="F:Unosquare.FFME.Primitives.MediaBlockBuffer.PlaybackBlocks"/> collection properties.
            This method must be called whenever the collection is modified.
            The reason this exists is to avoid computing and iterating over these values every time they are read
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Primitives.MediaTypeDictionary`1">
            <summary>
            Represents a very simple dictionary for MediaType keys
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Unosquare.FFME.Primitives.MediaTypeDictionary`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.MediaTypeDictionary`1"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.MediaTypeDictionary`1.Item(Unosquare.FFME.Shared.MediaType)">
            <summary>
            Gets or sets the item with the specified key.
            return the default value of the value type when the key does not exist.
            </summary>
            <param name="key">The key.</param>
            <returns>The item</returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.Promise">
            <summary>
            Represents a method that can be awaited via its Awaiter object.
            </summary>
            <seealso cref="T:Unosquare.FFME.Primitives.PromiseBase" />
        </member>
        <member name="M:Unosquare.FFME.Primitives.Promise.#ctor(System.Action,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.Promise"/> class.
            </summary>
            <param name="deferredAction">The deferred action.</param>
            <param name="continueOnCapturedContext">
            if set to <c>true</c> configures the awaiter to continue on the captured context.
            </param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.Promise.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.Promise"/> class.
            </summary>
            <param name="deferredAction">The deferred action.</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.Promise.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.Promise"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.Promise.PerformActions">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Primitives.PromiseBase">
            <summary>
            Represents actions to be performed in the future but that
            still are awaitable by other threads.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.FFME.Primitives.PromiseBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.PromiseBase"/> class.
            </summary>
            <param name="continueOnCapturedContext">
            if set to <c>true</c> configures the awaiter to continue on the captured context only.
            if set to <c>false</c> configures the awaiter to be continued on any thread context.
            </param>
        </member>
        <member name="P:Unosquare.FFME.Primitives.PromiseBase.Awaiter">
            <summary>
            Gets the configured task awaiter.
            You should await this object.
            The task returns true if the actions were run. Returns false
            if the actions were cancelled.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.PromiseBase.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.PromiseBase.IsExecuting">
            <summary>
            Gets a value indicating whether this instance is running.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Primitives.PromiseBase.AwaiterTask">
            <summary>
            Gets the task that awaits the promise. Do not await on this but use the <see cref="P:Unosquare.FFME.Primitives.PromiseBase.Awaiter"/> property instead.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.PromiseBase.BeginExecute">
            <summary>
            Starts to run the promise in a thread pool thread.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.PromiseBase.Execute">
            <summary>
            Runs the corresponding actions and completes the Awaiter.
            This causes threads awaiting the commands to stop awaiting
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.PromiseBase.Cancel(System.Boolean)">
            <summary>
            Prevents the actions from being run and sets the awaiter as completed.
            </summary>
            <param name="waitForExit">if set to <c>true</c> it waits for the awaiter to complete synchronously.</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.PromiseBase.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.PromiseBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Unosquare.FFME.Primitives.PromiseBase.PerformActions">
            <summary>
            Performs the actions represented by this deferred task.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Primitives.SyncLockerFactory">
            <summary>
            Provides factory methods to create synchronized reader-writer locks
            that support a generalized locking and releasing api and syntax.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Primitives.SyncLockerFactory.LockHolderType">
            <summary>
            Enumerates the locking operations
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Primitives.SyncLockerFactory.ISyncReleasable">
            <summary>
            Defines methods for releasing locks
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.ISyncReleasable.ReleaseWriterLock">
            <summary>
            Releases the writer lock.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.ISyncReleasable.ReleaseReaderLock">
            <summary>
            Releases the reader lock.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.Create">
            <summary>
            Creates a reader-writer lock backed by a standard ReaderWriterLock
            </summary>
            <returns>The synchronized locker</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.CreateSlim">
            <summary>
            Creates a reader-writer lock backed by a ReaderWriterLockSlim
            </summary>
            <returns>The synchronized locker</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.Create(System.Boolean)">
            <summary>
            Creates a reader-writer lock.
            </summary>
            <param name="useSlim">if set to <c>true</c> it uses the Slim version of a reader-writer lock.</param>
            <returns>The Sync Locker</returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockReleaser">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockReleaser.#ctor(Unosquare.FFME.Primitives.SyncLockerFactory.ISyncReleasable,Unosquare.FFME.Primitives.SyncLockerFactory.LockHolderType)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockReleaser"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="operation">The operation.</param>
        </member>
        <member name="P:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockReleaser.Empty">
            <summary>
            An action-less, dummy disposable object.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockReleaser.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker">
            <summary>
            The Sync Locker backed by a ReaderWriterLock
            </summary>
            <seealso cref="T:Unosquare.FFME.Primitives.ISyncLocker" />
            <seealso cref="T:Unosquare.FFME.Primitives.SyncLockerFactory.ISyncReleasable" />
        </member>
        <member name="P:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker.AcquireReaderLock">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker.TryAcquireReaderLock(System.Int32,System.IDisposable@)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker.AcquireWriterLock">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker.TryAcquireWriterLock(System.Int32,System.IDisposable@)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker.TryAcquireWriterLock(System.IDisposable@)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker.TryAcquireReaderLock(System.IDisposable@)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker.ReleaseWriterLock">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker.ReleaseReaderLock">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker.AcquireWriterLock(System.Int32,System.IDisposable@)">
            <summary>
            Acquires the writer lock.
            </summary>
            <param name="timeoutMilliseconds">The timeout milliseconds.</param>
            <param name="releaser">The releaser.</param>
            <returns>Success</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLocker.AcquireReaderLock(System.Int32,System.IDisposable@)">
            <summary>
            Acquires the reader lock.
            </summary>
            <param name="timeoutMilliseconds">The timeout milliseconds.</param>
            <param name="releaser">The releaser.</param>
            <returns>Success</returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim">
            <summary>
            The Sync Locker backed by ReaderWriterLockSlim
            </summary>
            <seealso cref="T:Unosquare.FFME.Primitives.ISyncLocker" />
            <seealso cref="T:Unosquare.FFME.Primitives.SyncLockerFactory.ISyncReleasable" />
        </member>
        <member name="P:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim.IsDisposed">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim.AcquireReaderLock">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim.TryAcquireReaderLock(System.Int32,System.IDisposable@)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim.AcquireWriterLock">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim.TryAcquireWriterLock(System.Int32,System.IDisposable@)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim.TryAcquireWriterLock(System.IDisposable@)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim.TryAcquireReaderLock(System.IDisposable@)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim.ReleaseWriterLock">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim.ReleaseReaderLock">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim.AcquireWriterLock(System.Int32,System.IDisposable@)">
            <summary>
            Acquires the writer lock.
            </summary>
            <param name="timeoutMilliseconds">The timeout milliseconds.</param>
            <param name="releaser">The releaser.</param>
            <returns>Success</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.SyncLockerFactory.SyncLockerSlim.AcquireReaderLock(System.Int32,System.IDisposable@)">
            <summary>
            Acquires the reader lock.
            </summary>
            <param name="timeoutMilliseconds">The timeout milliseconds.</param>
            <param name="releaser">The releaser.</param>
            <returns>Success</returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.WaitEventFactory">
            <summary>
            Provides a Manual Reset Event factory with a unified API
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.Create(System.Boolean)">
            <summary>
            Creates a Wait Event backed by a standard ManualResetEvent
            </summary>
            <param name="isCompleted">if initially set to completed. Generally true</param>
            <returns>The Wait Event</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.CreateSlim(System.Boolean)">
            <summary>
            Creates a Wait Event backed by a ManualResetEventSlim
            </summary>
            <param name="isCompleted">if initially set to completed. Generally true</param>
            <returns>The Wait Event</returns>
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.Create(System.Boolean,System.Boolean)">
            <summary>
            Creates a Wait Event backed by a ManualResetEventSlim
            </summary>
            <param name="isCompleted">if initially set to completed. Generally true</param>
            <param name="useSlim">if set to <c>true</c> creates a slim version of the wait event.</param>
            <returns>The Wait Event</returns>
        </member>
        <member name="T:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent">
            <inheritdoc />
            <summary>
            Defines a WaitEvent backed by a ManualResetEvent
            </summary>
            <seealso cref="T:Unosquare.FFME.Primitives.IWaitEvent" />
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent"/> class.
            </summary>
            <param name="isCompleted">if set to <c>true</c> [is completed].</param>
        </member>
        <member name="P:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.IsDisposed">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.IsValid">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.IsCompleted">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.IsInProgress">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.Begin">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.Complete">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.Wait">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEvent.Wait(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim">
            <inheritdoc />
            <summary>
            Defines a WaitEvent backed by a ManualResetEventSlim
            </summary>
            <seealso cref="T:Unosquare.FFME.Primitives.IWaitEvent" />
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim"/> class.
            </summary>
            <param name="isCompleted">if set to <c>true</c> [is completed].</param>
        </member>
        <member name="P:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.IsDisposed">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.IsValid">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.IsCompleted">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.IsInProgress">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.Begin">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.Complete">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.Wait">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Primitives.WaitEventFactory.WaitEventSlim.Wait(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Shared.AudioBlock">
            <summary>
            A scaled, pre-allocated audio frame container.
            The buffer is in 16-bit signed, interleaved sample data
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.AudioBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.AudioBlock"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.AudioBlock.SampleRate">
            <summary>
            Gets the sample rate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.AudioBlock.ChannelCount">
            <summary>
            Gets the channel count.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.AudioBlock.SamplesPerChannel">
            <summary>
            Gets the available samples per channel.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.AudioBlock.SamplesBufferLength">
            <summary>
            Gets the length of the samples buffer. This might differ from the <see cref="P:Unosquare.FFME.Shared.MediaBlock.BufferLength"/>
            property after scaling but must always be less than or equal to it.
            </summary>
            <value>
            The length of the samples buffer.
            </value>
        </member>
        <member name="M:Unosquare.FFME.Shared.AudioBlock.Deallocate">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Shared.Constants">
            <summary>
            Defaults and constants of the Media Engine
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.Constants.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.Shared.Constants"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.FFmpegSearchPath">
            <summary>
            Gets the assembly location.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.MediaTypes">
            <summary>
            Gets all media types in an array.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.Constants.Controller">
            <summary>
            Defines Controller Value Defaults
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Controller.DefaultSpeedRatio">
            <summary>
            The default speed ratio
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Controller.DefaultBalance">
            <summary>
            The default balance
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Controller.DefaultVolume">
            <summary>
            The default volume
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Controller.DefaultClosedCaptionsChannel">
            <summary>
            The default closed captions channel
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Controller.MinSpeedRatio">
            <summary>
            The minimum speed ratio
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Controller.MaxSpeedRatio">
            <summary>
            The maximum speed ratio
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Controller.MinBalance">
            <summary>
            The minimum balance
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Controller.MaxBalance">
            <summary>
            The maximum balance
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Controller.MaxVolume">
            <summary>
            The maximum volume
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Controller.MinVolume">
            <summary>
            The minimum volume
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.Constants.Audio">
            <summary>
            Defines decoder output constants for audio streams
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Audio.BufferPadding">
            <summary>
            The audio buffer padding
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Audio.BitsPerSample">
            <summary>
            The audio bits per sample (1 channel only)
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Audio.BytesPerSample">
            <summary>
            The audio bytes per sample
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Audio.SampleFormat">
            <summary>
            The audio sample format
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Audio.ChannelCount">
            <summary>
            The audio channel count
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Audio.SampleRate">
            <summary>
            The audio sample rate (per channel)
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.Constants.Video">
            <summary>
            Defines decoder output constants for audio streams
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Video.BitsPerComponent">
            <summary>
            The video bits per component
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Video.BitsPerPixel">
            <summary>
            The video bits per pixel
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Video.BytesPerPixel">
            <summary>
            The video bytes per pixel
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Video.VideoPixelFormat">
            <summary>
            The video pixel format. BGRA, 32bit
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.Constants.Interval">
            <summary>
            Defines timespans of different priority intervals
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Interval.HighPriority">
            <summary>
            The timer high priority interval for stuff like rendering
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Interval.MediumPriority">
            <summary>
            The timer medium priority interval for stuff like property updates
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.Constants.Interval.LowPriority">
            <summary>
            The timer low priority interval for stuff like logging
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.ContainerConfiguration">
            <summary>
            Represents a set of options that are used to initialize a media container before opening the stream.
            This includes both, demuxer and decoder options.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.ContainerConfiguration.ScanAllPmts">
            <summary>
            The scan all PMTS private option name
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.ContainerConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.ContainerConfiguration"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ContainerConfiguration.ForcedInputFormat">
            <summary>
            Gets or sets the forced input format. If let null or empty,
            the input format will be selected automatically.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ContainerConfiguration.ProtocolPrefix">
            <summary>
            Gets the protocol prefix.
            Typically async for local files and empty for other types.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ContainerConfiguration.ReadTimeout">
            <summary>
            Gets or sets the amount of time to wait for a an open or read
            operation to complete before it times out. It is 30 seconds by default
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ContainerConfiguration.GlobalOptions">
            <summary>
            Contains global options for the demuxer. For additional info
            please see: https://ffmpeg.org/ffmpeg-formats.html#Format-Options
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ContainerConfiguration.PrivateOptions">
            <summary>
            Contains private demuxer options. For additional info
            please see: https://ffmpeg.org/ffmpeg-all.html#Demuxers
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ContainerConfiguration.GlobalOptionsMeta">
            <summary>
            Gets a list of global options for the demuxers. These options apply to all demuxers.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ContainerConfiguration.PrivateOptionsMeta">
            <summary>
            Retrieves a dictionary of private options available to each of the registered demuxers.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.DecoderOptions">
            <summary>
            Represents decoder global and private options for all streams
            See https://www.ffmpeg.org/ffmpeg-codecs.html#Codec-Options
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.DecoderOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.DecoderOptions"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DecoderOptions.LowResolutionIndex">
            <summary>
            Gets or sets a value indicating whether [enable low resource].
            In theory this should be 0,1,2,3 for 1, 1/2, 1,4 and 1/8 resolutions.
            Port of low-res.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DecoderOptions.EnableFastDecoding">
            <summary>
            Gets or sets a value indicating whether to enable fast decoding.
            Port of fast
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DecoderOptions.EnableLowDelayDecoding">
            <summary>
            Enables low_delay flag for no delay in frame decoding.
            When frames are received by some codecs, they are delayed by 1 frame per active thread.
            This flag is not of much use because the decoder pre-caches and pre-orders a set of decoded
            frames internally.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DecoderOptions.Threads">
            <summary>
            Gets or sets the threads.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DecoderOptions.RefCountedFrames">
            <summary>
            Gets or sets whether to use reference counted frames.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DecoderOptions.LowResIndexOption">
            <summary>
            Gets or sets the index of the low resolution index.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DecoderOptions.Item(System.String)">
            <summary>
            Gets or sets the specified global option.
            See: https://www.ffmpeg.org/ffmpeg-codecs.html#Codec-Options
            </summary>
            <param name="globalOptionName">Name of the global option.</param>
            <returns>The value of the option</returns>
        </member>
        <member name="P:Unosquare.FFME.Shared.DecoderOptions.Item(System.Int32,System.String)">
            <summary>
            Gets or sets the specified private option
            See: https://www.ffmpeg.org/ffmpeg-codecs.html#toc-Decoders
            </summary>
            <param name="streamIndex">Index of the stream.</param>
            <param name="privateOptionName">Name of the private option.</param>
            <returns>The private option value</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.DecoderOptions.GetStreamCodecOptions(System.Int32)">
            <summary>
            Gets the combined global and private stream codec options as a dictionary.
            </summary>
            <param name="streamIndex">Index of the stream.</param>
            <returns>An options dictionary</returns>
        </member>
        <member name="T:Unosquare.FFME.Shared.DecoderOptions.GlobalOptionNames">
            <summary>
            Well-known codec option names
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.DecoderOptions.GlobalOptionNames.Threads">
            <summary>
            The threads
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.DecoderOptions.GlobalOptionNames.RefCountedFrames">
            <summary>
            The reference counted frames
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.DecoderOptions.GlobalOptionNames.LowRes">
            <summary>
            The low resource
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.DemuxerGlobalOptions">
            <summary>
            The libavformat library provides some generic global options, which can be set on all the muxers and demuxers.
            For additional information, please see: https://ffmpeg.org/ffmpeg-formats.html#Format-Options
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.DemuxerGlobalOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.DemuxerGlobalOptions"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DemuxerGlobalOptions.EnableReducedBuffering">
            <summary>
            Port of avioflags direct
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DemuxerGlobalOptions.ProbeSize">
            <summary>
            Set probing size in bytes, i.e. the size of the data to analyze to get stream information.
            A higher value will enable detecting more information in case it is dispersed into the stream,
            but will increase latency. Must be an integer not lesser than 32. It is 5000000 by default.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DemuxerGlobalOptions.PacketSize">
            <summary>
            Set packet size.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DemuxerGlobalOptions.FlagIgnoreIndex">
            <summary>
            Ignore index.
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DemuxerGlobalOptions.FlagEnableFastSeek">
            <summary>
            Enable fast, but inaccurate seeks for some formats.
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DemuxerGlobalOptions.FlagGeneratePts">
            <summary>
            Generate PTS.
            Port of genpts
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DemuxerGlobalOptions.FlagEnableNoFillIn">
            <summary>
            Do not fill in missing values that can be exactly calculated.
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DemuxerGlobalOptions.FlagIgnoreDts">
            <summary>
            Ignore DTS.
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DemuxerGlobalOptions.FlagDiscardCorrupt">
            <summary>
            Discard corrupted frames.
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DemuxerGlobalOptions.FlagSortDts">
            <summary>
            Try to interleave output packets by DTS.
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DemuxerGlobalOptions.FlagKeepSideData">
            <summary>
            Do not merge side data.
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DemuxerGlobalOptions.FlagEnableLatmPayload">
            <summary>
            Enable RTP MP4A-LATM payload.
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DemuxerGlobalOptions.FlagNoBuffer">
            <summary>
            Reduce the latency introduced by optional buffering
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DemuxerGlobalOptions.FlagStopAtShortest">
            <summary>
            Stop muxing at the end of the shortest stream.
            It may be needed to increase max_interleave_delta to avoid flushing the longer streams before EOF.
            Port of ffflags
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DemuxerGlobalOptions.SeekToAny">
            <summary>
            Allow seeking to non-keyframes on demuxer level when supported if set to 1. Default is 0.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DemuxerGlobalOptions.MaxAnalyzeDuration">
            <summary>
            Gets or sets the maximum duration to be analyzed before identifying stream information.
            In realtime streams this can be reduced to reduce latency (i.e. TimeSpan.Zero)
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.DemuxerGlobalOptions.CryptoKey">
            <summary>
            Set decryption key.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.Extensions">
            <summary>
            Provides various helpers and extension methods.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.PutAudioSample(System.Byte[],System.Int32,System.Int16)">
            <summary>
            Puts a short value in the target buffer as bytes
            </summary>
            <param name="buffer">The target.</param>
            <param name="offset">The offset.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.GetAudioSample(System.Byte[],System.Int32)">
            <summary>
            Gets the a signed 16 bit integer at the given offset.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns>The signed integer.</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.GetAudioSampleAmplitude(System.Byte[],System.Int32)">
            <summary>
            Gets the audio sample amplitude (absolute value of the sample).
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns>The sample amplitude</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.GetAudioSampleLevel(System.Byte[],System.Int32)">
            <summary>
            Gets the audio sample level for 0 to 1.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <returns>The amplitude level</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.Format(System.TimeSpan)">
            <summary>
            Returns a formatted timestamp string in Seconds
            </summary>
            <param name="ts">The ts.</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.FormatElapsed(System.DateTime)">
            <summary>
            Returns a formatted string with elapsed milliseconds between now and
            the specified date.
            </summary>
            <param name="dt">The dt.</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.Format(System.Int64,System.Double)">
            <summary>
            Returns a formatted string, dividing by the specified
            factor. Useful for debugging longs with byte positions or sizes.
            </summary>
            <param name="ts">The timestamp.</param>
            <param name="divideBy">The divide by.</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.Format(System.Int64)">
            <summary>
            Returns a formatted string.
            Useful for debugging longs with byte positions or sizes.
            </summary>
            <param name="ts">The timestamp.</param>
            <returns>The formatted string</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ToMultipleOf(System.Double,System.Double)">
            <summary>
            Converts the given value to a value that is of the given multiple.
            </summary>
            <param name="value">The value.</param>
            <param name="multiple">The multiple.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ToTimeSpan(System.Double,FFmpeg.AutoGen.AVRational)">
            <summary>
            Gets a timespan given a timestamp and a timebase.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="timeBase">The time base.</param>
            <returns>The TimeSpan</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ToLong(System.TimeSpan,FFmpeg.AutoGen.AVRational)">
            <summary>
            Converts a timespan to an AV_TIME_BASE compatible timestamp
            </summary>
            <param name="ts">The ts.</param>
            <param name="timeBase">The time base.</param>
            <returns>
            A long, ffmpeg compatible timestamp
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ToTimeSpan(System.Int64,FFmpeg.AutoGen.AVRational)">
            <summary>
            Gets a timespan given a timestamp and a timebase.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="timeBase">The time base.</param>
            <returns>The TimeSpan</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ToTimeSpan(System.Double,System.Double)">
            <summary>
            Gets a timespan given a timestamp and a timebase.
            </summary>
            <param name="pts">The PTS in seconds.</param>
            <param name="timeBase">The time base.</param>
            <returns>The TimeSpan</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ToTimeSpan(System.Int64,System.Double)">
            <summary>
            Gets a timespan given a timestamp and a timebase.
            </summary>
            <param name="pts">The PTS.</param>
            <param name="timeBase">The time base.</param>
            <returns>The TimeSpan</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ToTimeSpan(System.Double)">
            <summary>
            Gets a timespan given a timestamp (in AV_TIME_BASE units)
            </summary>
            <param name="pts">The PTS.</param>
            <returns>The TimeSpan</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ToTimeSpan(System.Int64)">
            <summary>
            Gets a timespan given a timestamp (in AV_TIME_BASE units)
            </summary>
            <param name="pts">The PTS.</param>
            <returns>The TimeSpan</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ToDouble(FFmpeg.AutoGen.AVRational)">
            <summary>
            Converts a fraction to a double
            </summary>
            <param name="rational">The rational.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.Normalize(System.TimeSpan)">
            <summary>
            Normalizes precision of the TimeSpan to the nearest whole millisecond.
            </summary>
            <param name="source">The source.</param>
            <returns>The normalized, whole-millisecond timespan</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps the specified value between the minimum and the maximum
            </summary>
            <typeparam name="T">The type of value to clamp</typeparam>
            <param name="value">The value.</param>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
            <returns>A value that indicates the relative order of the objects being compared</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.StartIndexOf``2(System.Collections.Generic.IList{``0},``1)">
            <summary>
            Finds the index of the item that is on or greater than the specified search value
            </summary>
            <typeparam name="T">The generic collection type</typeparam>
            <typeparam name="V">The value type to compare to</typeparam>
            <param name="items">The items.</param>
            <param name="value">The value.</param>
            <returns>The find index. Returns -1 if not found.</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.Main(Unosquare.FFME.Primitives.MediaTypeDictionary{Unosquare.FFME.Primitives.MediaBlockBuffer},Unosquare.FFME.Decoding.MediaContainer)">
            <summary>
            Gets the <see cref="T:Unosquare.FFME.Primitives.MediaBlockBuffer"/> for the main media type of the specified media container.
            </summary>
            <param name="blocks">The blocks.</param>
            <param name="container">The container.</param>
            <returns>The block buffer of the main media type</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.Except(System.Collections.Generic.IEnumerable{Unosquare.FFME.Shared.MediaType},Unosquare.FFME.Shared.MediaType)">
            <summary>
            Excludes the type of the media.
            </summary>
            <param name="all">All.</param>
            <param name="main">The main.</param>
            <returns>An array without the media type</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ComputePictureNumber(System.TimeSpan,System.TimeSpan,System.Int64)">
            <summary>
            Computes the picture number.
            </summary>
            <param name="startTime">The start time.</param>
            <param name="duration">The duration.</param>
            <param name="startNumber">The start number.</param>
            <returns>
            The serial picture number
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.Extensions.ComputeSmtpeTimeCode(System.TimeSpan,System.TimeSpan,FFmpeg.AutoGen.AVRational,System.Int64)">
            <summary>
            Computes the smtpe time code.
            </summary>
            <param name="streamStartTime">The start time offset.</param>
            <param name="frameDuration">The duration.</param>
            <param name="frameTimeBase">The time base.</param>
            <param name="frameNumber">The display picture number.</param>
            <returns>The FFmpeg computed SMTPE Time code</returns>
        </member>
        <member name="T:Unosquare.FFME.Shared.FFmpegLoadMode">
            <summary>
            The load mode of FFmpeg Libraries
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.FFmpegLoadMode.FullFeatures">
            <summary>
            The full features. Tries to load everything
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.FFmpegLoadMode.MinimumFeatures">
            <summary>
            Loads everything except for AVDevice and AVFilter
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.FFmpegLoadMode.AudioOnly">
            <summary>
            Loads the minimum set for Audio-only programs
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.FFmpegLoadMode.VideoOnly">
            <summary>
            Loads the minimum set for Video-only programs
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.HardwareDeviceInfo">
            <summary>
            Represents a hardware configuration pair of device and pixel format
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.HardwareDeviceInfo.#ctor(FFmpeg.AutoGen.AVCodecHWConfig*)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.HardwareDeviceInfo"/> class.
            </summary>
            <param name="config">The source configuration.</param>
        </member>
        <member name="P:Unosquare.FFME.Shared.HardwareDeviceInfo.DeviceType">
            <summary>
            Gets the type of hardware device.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.HardwareDeviceInfo.DeviceTypeName">
            <summary>
            Gets the name of the device type.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.HardwareDeviceInfo.PixelFormat">
            <summary>
            Gets the hardware output pixel format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.HardwareDeviceInfo.PixelFormatName">
            <summary>
            Gets the name of the pixel format.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.HardwareDeviceInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Unosquare.FFME.Shared.ILoggingHandler">
            <summary>
            Defines interface methods for logging message handlers
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.ILoggingHandler.HandleLogMessage(Unosquare.FFME.Shared.MediaLogMessage)">
            <summary>
            Handles a log message.
            </summary>
            <param name="message">The message object contining the data.</param>
        </member>
        <member name="T:Unosquare.FFME.Shared.ILoggingSource">
            <summary>
            Defines interface members for a class that
            defines a logging message handler <see cref="T:Unosquare.FFME.Shared.ILoggingHandler"/>
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ILoggingSource.LoggingHandler">
            <summary>
            Gets the logging handler.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.IMediaConnector">
            <summary>
            Connects handlers between the Media Engine event signals and a platform-specific implementation
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnMessageLogged(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.MediaLogMessage)">
            <summary>
            Called when a message is logged.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Unosquare.FFME.Shared.MediaLogMessage"/> instance containing the event data.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnMediaInitializing(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.ContainerConfiguration,System.String)">
            <summary>
            Called when the media input is initializing.
            </summary>
            <param name="sender">The sender.</param>
            <param name="config">The container configuration options.</param>
            <param name="mediaUrl">The media URL.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnMediaOpening(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.MediaOptions,Unosquare.FFME.Shared.MediaInfo)">
            <summary>
            Called when the media input was opened and provides a way to configure component streams.
            </summary>
            <param name="sender">The sender.</param>
            <param name="mediaOptions">The media options.</param>
            <param name="mediaInfo">The media information.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnMediaChanging(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.MediaOptions,Unosquare.FFME.Shared.MediaInfo)">
            <summary>
            Called when a change in media options is requested, such as a change in selected component streams.
            </summary>
            <param name="sender">The sender.</param>
            <param name="mediaOptions">The media options.</param>
            <param name="mediaInfo">The media information.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnMediaChanged(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.MediaInfo)">
            <summary>
            Called when a change in stream components has been completed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="mediaInfo">The media information.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnMediaOpened(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.MediaInfo)">
            <summary>
            Called when media has been fully opened and components were created.
            </summary>
            <param name="sender">The sender.</param>
            <param name="mediaInfo">The media information.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnMediaClosed(Unosquare.FFME.MediaEngine)">
            <summary>
            Called when media has been closed.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnMediaFailed(Unosquare.FFME.MediaEngine,System.Exception)">
            <summary>
            Called when a media failure occurs.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnMediaEnded(Unosquare.FFME.MediaEngine)">
            <summary>
            Called when media has reached the end of the stream.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnBufferingStarted(Unosquare.FFME.MediaEngine)">
            <summary>
            Called when packet buffering has started.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnBufferingEnded(Unosquare.FFME.MediaEngine)">
            <summary>
            Called when packet buffering has ended.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnSeekingStarted(Unosquare.FFME.MediaEngine)">
            <summary>
            Called when a seek operation has started.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnSeekingEnded(Unosquare.FFME.MediaEngine)">
            <summary>
            Called when a seek operation has ended.
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnPositionChanged(Unosquare.FFME.MediaEngine,System.TimeSpan,System.TimeSpan)">
            <summary>
            Called when media position changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaConnector.OnMediaStateChanged(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.PlaybackStatus,Unosquare.FFME.Shared.PlaybackStatus)">
            <summary>
            Called when the playback status changes.
            </summary>
            <param name="sender">The sender.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="T:Unosquare.FFME.Shared.IMediaEngineState">
            <summary>
            Provides Media Engine state as read-only properties
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.BitRate">
            <summary>
            Gets the input bit rate as reported by the container. Returns 0 if unavailable.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.DecodingBitRate">
            <summary>
            Gets the instantaneous, compressed bit rate of the decoders for the currently active component streams.
            This is provided in bits per second.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.VideoStreamIndex">
            <summary>
            Gets the index of the video stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.AudioStreamIndex">
            <summary>
            Gets the index of the audio stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.SubtitleStreamIndex">
            <summary>
            Gets the index of the subtitle stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.AudioBitRate">
            <summary>
            Gets the audio bit rate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.AudioBitsPerSample">
            <summary>
            Gets the audio bits per sample.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.AudioChannels">
            <summary>
            Gets the audio channels.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.AudioCodec">
            <summary>
            Gets the audio codec.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.AudioSampleRate">
            <summary>
            Gets the audio sample rate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.Balance">
            <summary>
            Gets the audio balance.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.BufferingProgress">
            <summary>
            Gets the buffering progress.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.CanPause">
            <summary>
            Gets a value indicating whether the media can pause.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.PacketBufferLength">
            <summary>
            Gets the byte length of the buffered packets
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.PacketBufferCount">
            <summary>
            Gets the number of packets buffered for all media components.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.DownloadProgress">
            <summary>
            Gets the download progress.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.PositionStep">
            <summary>
            Gets the duration of a frame step.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.HasAudio">
            <summary>
            Gets a value indicating whether the media has audio.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.HasMediaEnded">
            <summary>
            Gets a value indicating whether the media has ended.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.HasSubtitles">
            <summary>
            Gets a value indicating whether the media has subtitles.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.HasVideo">
            <summary>
            Gets a value indicating whether the media has video.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.HasClosedCaptions">
            <summary>
            Gets a value indicating whether the current video stream has closed captions
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.IsBuffering">
            <summary>
            Gets a value indicating whether the media is buffering.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.IsLiveStream">
            <summary>
            Gets a value indicating whether the media is a live stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.IsMuted">
            <summary>
            Gets or sets a value indicating whether the media is muted.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.IsNetworkStream">
            <summary>
            Gets a value indicating whether the media is a network stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.IsOpen">
            <summary>
            Gets a value indicating whether the media is currently open.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.IsOpening">
            <summary>
            Gets a value indicating whether the media is currently opening.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.IsClosing">
            <summary>
            Gets a value indicating whether the media is currently closing.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.IsChanging">
            <summary>
            Gets a value indicating whether the media is currently changing its components.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.IsPaused">
            <summary>
            Gets a value indicating whether the media is paused.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.IsPlaying">
            <summary>
            Gets a value indicating whether the media is playing.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.IsSeekable">
            <summary>
            Gets a value indicating whether the media is seekable.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.IsSeeking">
            <summary>
            Gets a value indicating whether the media is currently seeking.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.MediaFormat">
            <summary>
            Gets the media format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.MediaStreamSize">
            <summary>
            Gets the size in bytes of the current stream being read.
            For multi-file streams, get the size of the current file only.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.MediaState">
            <summary>
            Gets the playback status of the media.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.Metadata">
            <summary>
            Gets the media metadata such as title, language, etc.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.NaturalDuration">
            <summary>
            Gets the duration of the media.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.NaturalVideoHeight">
            <summary>
            Gets the height of the video in pixels.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.NaturalVideoWidth">
            <summary>
            Gets the width of the video in pixels.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.Position">
            <summary>
            Gets the current position of the media.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.FramePosition">
            <summary>
            Gets the discrete time position of the start of the current
            frame of the main component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.Source">
            <summary>
            Gets the URL of the open or opening media.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.SpeedRatio">
            <summary>
            Gets the playback speed ratio.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.VideoBitRate">
            <summary>
            Gets the video bit rate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.VideoCodec">
            <summary>
            Gets the video codec.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.VideoFrameRate">
            <summary>
            Gets the video frame rate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.VideoHardwareDecoder">
            <summary>
            Gets the video hardware decoder.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.VideoRotation">
            <summary>
            Gets the video rotation.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.VideoSmtpeTimeCode">
            <summary>
            Gets the video SMTPE time code.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.VideoAspectRatio">
            <summary>
            Gets the current video aspect ratio.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaEngineState.Volume">
            <summary>
            Gets the current audio volume.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.IMediaInputStream">
            <summary>
            Defines the properties and methods necessary for implementing a
            custom media input stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaInputStream.StreamUri">
            <summary>
            Gets the stream URI. This is just a pseudo URI to identify the stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaInputStream.CanSeek">
            <summary>
            Gets a value indicating whether this stream is seekable.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaInputStream.ReadBufferLength">
            <summary>
            Gets the length in bytes of the read buffer that will be allocated.
            Something like 4096 is recommended
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaInputStream.Read(System.Void*,System.Byte*,System.Int32)">
            <summary>
            Reads from the underlying stream and writes up to <paramref name="targetBufferLength"/> bytes
            to the <paramref name="targetBuffer"/>. Returns the number of bytes that were written.
            </summary>
            <param name="opaque">The opaque.</param>
            <param name="targetBuffer">The target buffer.</param>
            <param name="targetBufferLength">Length of the target buffer.</param>
            <returns>The number of bytes that have been read</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaInputStream.Seek(System.Void*,System.Int64,System.Int32)">
            <summary>
            Seeks to the specified offset. The offset can be in byte position or in time units.
            This is specified by the whence parameter which is one of the AVSEEK prefixed constants.
            </summary>
            <param name="opaque">The opaque.</param>
            <param name="offset">The offset.</param>
            <param name="whence">The whence.</param>
            <returns>The position in bytes or time scale that has been read</returns>
        </member>
        <member name="T:Unosquare.FFME.Shared.IMediaRenderer">
            <summary>
            Provides a unified API for media rendering classes
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IMediaRenderer.MediaCore">
            <summary>
            Gets the parent media engine.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaRenderer.WaitForReadyState">
            <summary>
            Waits for the renderer to be ready to render.
            This is called only once before all Render calls are made
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaRenderer.Play">
            <summary>
            Executed when the Play method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaRenderer.Pause">
            <summary>
            Executed when the Pause method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaRenderer.Stop">
            <summary>
            Executed when the Pause method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaRenderer.Close">
            <summary>
            Executed when the Close method is called on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaRenderer.Seek">
            <summary>
            Executed after a Seek operation is performed on the parent MediaElement
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaRenderer.Render(Unosquare.FFME.Shared.MediaBlock,System.TimeSpan)">
            <summary>
            Called when a media block is due rendering.
            This needs to return immediately so the calling thread is not disturbed.
            </summary>
            <param name="mediaBlock">The media block.</param>
            <param name="clockPosition">The clock position.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.IMediaRenderer.Update(System.TimeSpan)">
            <summary>
            Called on every block rendering clock cycle just in case some update operation needs to be performed.
            This needs to return immediately so the calling thread is not disturbed.
            </summary>
            <param name="clockPosition">The clock position.</param>
        </member>
        <member name="T:Unosquare.FFME.Shared.INativeMethods">
            <summary>
            Defines platform-specific methods
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.INativeMethods.SetDllDirectory(System.String)">
            <summary>
            Sets the DLL directory in which external dependencies can be located.
            </summary>
            <param name="path">The path.</param>
            <returns>True for success. False for failure</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.INativeMethods.CopyMemory(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Fast pointer memory block copy function
            </summary>
            <param name="targetAddress">The target address.</param>
            <param name="sourceAddress">The source address.</param>
            <param name="copyLength">Length of the copy.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.INativeMethods.FillMemory(System.IntPtr,System.UInt32,System.Byte)">
            <summary>
            Fills the memory with the specified value.
            </summary>
            <param name="startAddress">The start address.</param>
            <param name="length">The length.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Unosquare.FFME.Shared.IPlatform">
            <summary>
            Contains factory methods and properties containing platform-specific implementations
            of the functionality that is required by an instance of the Media Engine
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IPlatform.NativeMethods">
            <summary>
            Retrieves the platform-specific Native methods
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IPlatform.IsInDebugMode">
            <summary>
            Gets a value indicating whether this instance is in debug mode.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.IPlatform.IsInDesignTime">
            <summary>
            Gets a value indicating whether this instance is in design time.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.IPlatform.CreateRenderer(Unosquare.FFME.Shared.MediaType,Unosquare.FFME.MediaEngine)">
            <summary>
            Creates a renderer of the specified media type.
            </summary>
            <param name="mediaType">Type of the media.</param>
            <param name="mediaCore">The media engine.</param>
            <returns>The renderer</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.IPlatform.HandleFFmpegLogMessage(Unosquare.FFME.Shared.MediaLogMessage)">
            <summary>
            Handles global FFmpeg library messages
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Unosquare.FFME.Shared.MediaBlock">
            <summary>
            A base class for blocks of the different MediaTypes.
            Blocks are the result of decoding and scaling a frame.
            Blocks have pre-allocated buffers which makes them memory and CPU efficient.
            Reuse blocks as much as possible. Once you create a block from a frame,
            you don't need the frame anymore so make sure you dispose the frame.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaBlock.#ctor(Unosquare.FFME.Shared.MediaType)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.MediaBlock" /> class.
            </summary>
            <param name="mediaType">Type of the media.</param>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.MediaType">
            <summary>
            Gets the media type of the data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.CompressedSize">
            <summary>
            Gets the size of the compressed frame.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.IsStartTimeGuessed">
            <summary>
            Gets a value indicating whether the start time was guessed from siblings
            or the source frame PTS comes from a NO PTS value
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.StartTime">
            <summary>
            Gets the time at which this data should be presented (PTS)
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.Duration">
            <summary>
            Gets the amount of time this data has to be presented
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.EndTime">
            <summary>
            Gets the end time.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.StreamIndex">
            <summary>
            Gets the index of the stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.SnapTime">
            <summary>
            Gets a safe timestamp the the block can be displayed.
            Returns StartTime if the duration is Zero or negative.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.Buffer">
            <summary>
            Gets a pointer to the first byte of the unmanaged data buffer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.BufferLength">
            <summary>
            Gets the length of the unmanaged buffer in bytes.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.IsAllocated">
            <summary>
            Gets a value indicating whether an unmanaged buffer has been allocated.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.IsDisposed">
            <summary>
            Gets a value indicating whether this block is disposed
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.Index">
            <summary>
            Gets or sets the index within the block buffer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.Next">
            <summary>
            Gets or sets the next MediaBlock.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaBlock.Previous">
            <summary>
            Gets or sets the previous MediaBlock.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaBlock.TryAcquireReaderLock(System.IDisposable@)">
            <summary>
            Tries the acquire a reader lock on the unmanaged buffer.
            Returns false if the buffer has been disposed.
            </summary>
            <param name="locker">The locker.</param>
            <returns>The disposable lock</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaBlock.TryAcquireWriterLock(System.IDisposable@)">
            <summary>
            Tries the acquire a writer lock on the unmanaged buffer.
            Returns false if the buffer has been disposed or a lock operation times out.
            </summary>
            <param name="locker">The locker.</param>
            <returns>The disposable lock</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaBlock.Contains(System.TimeSpan)">
            <summary>
            Determines whether this media block holds the specified position.
            Returns false if it does not have a valid duration.
            </summary>
            <param name="position">The position.</param>
            <returns>
              <c>true</c> if [contains] [the specified position]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaBlock.CompareTo(Unosquare.FFME.Shared.MediaBlock)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaBlock.CompareTo(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaBlock.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaBlock.Allocate(System.Int32)">
            <summary>
            Allocates the specified buffer length.
            </summary>
            <param name="bufferLength">Length of the buffer.</param>
            <returns>True if the buffer is successfully allocated</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaBlock.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaBlock.Deallocate">
            <summary>
            De-allocates the picture buffer and resets the related buffer properties
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.MediaContainerException">
            <inheritdoc cref="T:System.Exception"/>
            <summary>
            A Media Container Exception
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaContainerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.MediaContainerException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Unosquare.FFME.Shared.MediaEngineState">
            <summary>
            Contains all the status properties of the stream being handled by the media engine.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.#ctor(Unosquare.FFME.MediaEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.MediaEngineState" /> class.
            </summary>
            <param name="mediaCore">The associated media core.</param>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.Source">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.SpeedRatio">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.Volume">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.Balance">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsMuted">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.MediaState">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.Position">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.FramePosition">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.HasMediaEnded">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.VideoSmtpeTimeCode">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.VideoHardwareDecoder">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.HasClosedCaptions">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsPlaying">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsPaused">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsSeeking">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsClosing">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsOpening">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsChanging">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsOpen">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.PositionStep">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.BitRate">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.Metadata">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.CanPause">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.MediaFormat">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.MediaStreamSize">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.VideoStreamIndex">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.AudioStreamIndex">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.SubtitleStreamIndex">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.HasAudio">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.HasVideo">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.HasSubtitles">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.VideoCodec">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.VideoBitRate">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.VideoRotation">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.NaturalVideoWidth">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.NaturalVideoHeight">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.VideoAspectRatio">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.VideoFrameRate">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.AudioCodec">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.AudioBitRate">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.AudioChannels">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.AudioSampleRate">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.AudioBitsPerSample">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.NaturalDuration">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsLiveStream">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsNetworkStream">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsSeekable">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.IsBuffering">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.DecodingBitRate">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.BufferingProgress">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.DownloadProgress">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.PacketBufferLength">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaEngineState.PacketBufferCount">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.UpdateSource(System.Uri)">
            <summary>
            Updates the <see cref="P:Unosquare.FFME.Shared.MediaEngineState.Source"/> property.
            </summary>
            <param name="newSource">The new source.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.UpdateFixedContainerProperties">
            <summary>
            Updates the fixed container properties.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.UpdateDynamicBlockProperties(Unosquare.FFME.Shared.MediaBlock,Unosquare.FFME.Primitives.MediaBlockBuffer)">
            <summary>
            Updates state properties coming from a new media block.
            </summary>
            <param name="block">The block.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.UpdateMediaEnded(System.Boolean,System.TimeSpan)">
            <summary>
            Updates the media ended state and notifies the parent if there is a change from false to true.
            </summary>
            <param name="hasEnded">if set to <c>true</c> [has ended].</param>
            <param name="endTime">The time span to update the <see cref="P:Unosquare.FFME.Shared.MediaEngineState.NaturalDuration"/> with.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.UpdatePosition">
            <summary>
            Updates the position related properties.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.UpdatePosition(System.TimeSpan)">
            <summary>
            Updates the position related properties.
            </summary>
            <param name="newPosition">The new position.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.ResetAll">
            <summary>
            Resets all media state properties
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.UpdateMediaState(Unosquare.FFME.Shared.PlaybackStatus)">
            <summary>
            Updates the MediaState property.
            </summary>
            <param name="mediaState">State of the media.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.ResetMediaProperties">
            <summary>
            Resets the controller properties.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.InitializeBufferingStatistics">
            <summary>
            Resets all the buffering properties to their defaults.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.UpdateDecodingBitRate(System.Int64)">
            <summary>
            Updates the decoding bit rate.
            </summary>
            <param name="bitRate">The bit rate.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.UpdateBufferingStats(System.Int64,System.Int32,System.Int32)">
            <summary>
            Updates the buffering properties: <see cref="P:Unosquare.FFME.Shared.MediaEngineState.PacketBufferCount" />, <see cref="P:Unosquare.FFME.Shared.MediaEngineState.PacketBufferLength" />,
            <see cref="P:Unosquare.FFME.Shared.MediaEngineState.IsBuffering" />, <see cref="P:Unosquare.FFME.Shared.MediaEngineState.BufferingProgress" />, <see cref="P:Unosquare.FFME.Shared.MediaEngineState.DownloadProgress" />.
            If a change is detected on the <see cref="P:Unosquare.FFME.Shared.MediaEngineState.IsBuffering" /> property then a notification is sent.
            </summary>
            <param name="bufferLength">Length of the packet buffer.</param>
            <param name="bufferCount">The packet buffer count.</param>
            <param name="bufferCountMax">The packet buffer count maximum for all components</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaEngineState.ResetBufferingStatistics">
            <summary>
            Resets the buffering statistics.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.MediaInfo">
            <summary>
            Holds media information about the input, its chapters, programs and individual stream components
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaInfo.#ctor(Unosquare.FFME.Decoding.MediaContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.MediaInfo"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.InputUrl">
            <summary>
            Gets the input URL string used to access and create the media container
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.Format">
            <summary>
            Gets the name of the container format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.Metadata">
            <summary>
            Gets the metadata for the input. This may include stuff like title, creation date, company name, etc.
            Individual stream components, chapters and programs may contain additional metadata.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.Duration">
            <summary>
            Gets the duration of the input as reported by the container format.
            Individual stream components may have different values.
            Returns TimeSpan.MinValue if unknown.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.StartTime">
            <summary>
            Gets the start timestamp of the input as reported by the container format.
            Individual stream components may have different values.
            Returns TimeSpan.MinValue if unknown.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.BitRate">
            <summary>
            If available, returns a non-zero value as reported by the container format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.Chapters">
            <summary>
            Gets a list of chapters
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.Programs">
            <summary>
            Gets a list of programs with their associated streams.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.Streams">
            <summary>
            Gets the dictionary of stream information components by stream index.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaInfo.BestStreams">
            <summary>
            Provides access to the best streams of each media type found in the container.
            This uses some internal FFmpeg heuristics.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaInfo.ExtractStreams(FFmpeg.AutoGen.AVFormatContext*)">
            <summary>
            Extracts the stream infos from the input.
            </summary>
            <param name="inputContext">The input context.</param>
            <returns>The list of stream infos</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaInfo.FindBestStreams(FFmpeg.AutoGen.AVFormatContext*,System.Collections.ObjectModel.ReadOnlyDictionary{System.Int32,Unosquare.FFME.Shared.StreamInfo})">
            <summary>
            Finds the best streams for audio video, and subtitles.
            </summary>
            <param name="ic">The ic.</param>
            <param name="streams">The streams.</param>
            <returns>The star infos</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaInfo.ExtractChapters(FFmpeg.AutoGen.AVFormatContext*)">
            <summary>
            Extracts the chapters from the input.
            </summary>
            <param name="ic">The ic.</param>
            <returns>The chapters</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaInfo.ExtractPrograms(FFmpeg.AutoGen.AVFormatContext*,System.Collections.ObjectModel.ReadOnlyDictionary{System.Int32,Unosquare.FFME.Shared.StreamInfo})">
            <summary>
            Extracts the programs from the input and creates associations between programs and streams.
            </summary>
            <param name="ic">The ic.</param>
            <param name="streams">The streams.</param>
            <returns>The program information</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaInfo.GetHardwareDecoders(FFmpeg.AutoGen.AVCodecID)">
            <summary>
            Gets the available hardware decoder codecs for the given codec id (codec family).
            </summary>
            <param name="codecFamily">The codec family.</param>
            <returns>A list of hardware-enabled decoder codec names</returns>
        </member>
        <member name="T:Unosquare.FFME.Shared.StreamInfo">
            <summary>
            Represents media stream information
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.StreamId">
            <summary>
            Gets the stream identifier. This is different from the stream index.
            Typically this value is not very useful.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.StreamIndex">
            <summary>
            Gets the index of the stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.CodecType">
            <summary>
            Gets the type of the codec.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.CodecTypeName">
            <summary>
            Gets the name of the codec type. Audio, Video, Subtitle, Data, etc.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.Codec">
            <summary>
            Gets the codec identifier.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.CodecName">
            <summary>
            Gets the name of the codec.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.CodecProfile">
            <summary>
            Gets the codec profile. Only valid for H.264 or
            video codecs that use profiles. Otherwise empty.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.CodecTag">
            <summary>
            Gets the codec tag. Not very useful except for fixing bugs with
            some demuxer scenarios.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.HasClosedCaptions">
            <summary>
            Gets a value indicating whether this stream has closed captions.
            Typically this is set for video streams.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.IsLossless">
            <summary>
            Gets a value indicating whether this stream contains lossless compressed data.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.PixelFormat">
            <summary>
            Gets the pixel format. Only valid for Video streams.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.PixelWidth">
            <summary>
            Gets the width of the video frames.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.PixelHeight">
            <summary>
            Gets the height of the video frames.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.FieldOrder">
            <summary>
            Gets the field order. This is useful to determine
            if the video needs de-interlacing
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.IsInterlaced">
            <summary>
            Gets a value indicating whether the video frames are interlaced
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.ColorRange">
            <summary>
            Gets the video color range.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.SampleRate">
            <summary>
            Gets the audio sample rate.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.SampleFormat">
            <summary>
            Gets the audio sample format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.TimeBase">
            <summary>
            Gets the stream time base unit in seconds.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.SampleAspectRatio">
            <summary>
            Gets the sample aspect ratio.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.DisplayAspectRatio">
            <summary>
            Gets the display aspect ratio.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.BitRate">
            <summary>
            Gets the reported bit rate. 9 for unavailable.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.MaxBitRate">
            <summary>
            Gets the maximum bit rate for variable bit rate streams. 0 if unavailable.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.InfoFrameCount">
            <summary>
            Gets the number of frames that were read to obtain the stream's information.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.ReferenceFrameCount">
            <summary>
            Gets the number of reference frames.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.FPS">
            <summary>
            Gets the average FPS reported by the stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.TBR">
            <summary>
            Gets the real (base) frame rate of the stream
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.TBN">
            <summary>
            Gets the fundamental unit of time in 1/seconds used to represent timestamps in the stream, according to the stream data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.TBC">
            <summary>
            Gets the fundamental unit of time in 1/seconds used to represent timestamps in the stream ,according to the codec
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.Disposition">
            <summary>
            Gets the disposition flags.
            Please see ffmpeg.AV_DISPOSITION_* fields.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.IsAttachedPictureDisposition">
            <summary>
            Gets a value indicating whether this instance is attached picture disposition.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.StartTime">
            <summary>
            Gets the start time.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.Duration">
            <summary>
            Gets the duration.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.Metadata">
            <summary>
            Gets the stream's metadata.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.HardwareDevices">
            <summary>
            Gets the compatible hardware device configurations for the stream's codec.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.HardwareDecoders">
            <summary>
            Gets a list of compatible hardware decoder names.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.StreamInfo.Language">
            <summary>
            Gets the language string from the stream's metadata.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.ChapterInfo">
            <summary>
            Represents a chapter within a container
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ChapterInfo.Index">
            <summary>
            Gets the chapter index.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ChapterInfo.ChapterId">
            <summary>
            Gets the chapter identifier.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ChapterInfo.StartTime">
            <summary>
            Gets the start time of the chapter.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ChapterInfo.EndTime">
            <summary>
            Gets the end time of the chapter.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ChapterInfo.Metadata">
            <summary>
            Gets the chapter metadata.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.ProgramInfo">
            <summary>
            Represents a program and its associated streams within a container.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ProgramInfo.ProgramNumber">
            <summary>
            Gets the program number.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ProgramInfo.ProgramId">
            <summary>
            Gets the program identifier.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ProgramInfo.Metadata">
            <summary>
            Gets the program metadata.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ProgramInfo.Streams">
            <summary>
            Gets the associated program streams.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.ProgramInfo.Name">
            <summary>
            Gets the name of the program. Empty if unavailable.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.MediaLogMessage">
            <summary>
            Represents the contents of a logging message that was sent to the log manager.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaLogMessage.#ctor(Unosquare.FFME.Shared.ILoggingHandler,Unosquare.FFME.Shared.MediaLogMessageType,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.MediaLogMessage" /> class.
            </summary>
            <param name="loggingHandler">The object that shall handle the message when it is output by the queue.</param>
            <param name="messageType">Type of the message.</param>
            <param name="messageText">The message text.</param>
            <param name="aspectName">Name of the code aspect the message came from.</param>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaLogMessage.Handler">
            <summary>
            Gets the object that shall handle the message when it is output by the queue.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaLogMessage.TimestampUtc">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaLogMessage.MessageType">
            <summary>
            Gets the type of the message.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaLogMessage.Message">
            <summary>
            Gets the contents of the message.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaLogMessage.AspectName">
            <summary>
            Gets the aspect or feature that sent the logged message.
            May or may not be available.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.MediaLogMessageType">
            <summary>
            Defines the different log message types received by the log handler
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaLogMessageType.None">
            <summary>
            The none message type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaLogMessageType.Info">
            <summary>
            The information message type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaLogMessageType.Debug">
            <summary>
            The debug message type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaLogMessageType.Trace">
            <summary>
            The trace message type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaLogMessageType.Error">
            <summary>
            The error message type
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaLogMessageType.Warning">
            <summary>
            The warning message type
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.MediaOptions">
            <summary>
            Represents options that applied creating the individual media stream components.
            Once the container has created the media components, changing these options will have no effect.
            See: https://www.ffmpeg.org/ffmpeg-all.html#Main-options
            Partly a port of https://github.com/FFmpeg/FFmpeg/blob/master/fftools/ffmpeg_opt.c
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.MediaOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.MediaOptions"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.DecoderParams">
            <summary>
            Provides access to the global and per-stream decoder options
            See https://www.ffmpeg.org/ffmpeg-codecs.html#Codec-Options
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.DecoderCodec">
            <summary>
            A dictionary of stream indexes and force decoder codec names.
            This is equivalent to the -codec Main option.
            See: https://www.ffmpeg.org/ffmpeg-all.html#Main-options (-codec option)
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.SubtitlesDelay">
            <summary>
            Gets or sets the amount of time to offset the subtitles by
            This is an FFME-only property -- Not a port of ffmpeg.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.VideoHardwareDevice">
            <summary>
            Use Stream's HardwareDevices property to get a list of
            compatible hardware accelerators.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.IsAudioDisabled">
            <summary>
            Prevent reading from audio stream components.
            Port of audio_disable
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.IsVideoDisabled">
            <summary>
            Prevent reading from video stream components.
            Port of video_disable
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.IsSubtitleDisabled">
            <summary>
            Prevent reading from subtitle stream components.
            Port of subtitle_disable
            Subtitles are not yet first-class citizens in FFmpeg and
            this is why they are disabled by default.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.VideoFilter">
            <summary>
            Allows for a custom video filter string.
            Please see: https://ffmpeg.org/ffmpeg-filters.html#Video-Filters
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.VideoForcedFps">
            <summary>
            Specifies a forced FPS value for the input video stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.VideoStream">
            <summary>
            Initially contains the best suitable video stream.
            Can be changed to a different stream reference.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.VideoSeekIndex">
            <summary>
            Gets or sets the video seek index.
            Use <see cref="M:Unosquare.FFME.MediaEngine.CreateVideoSeekIndex(System.String,System.Int32)"/> and set this
            field while loading the options.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.AudioFilter">
            <summary>
            Allows for a custom audio filter string.
            Please see: https://ffmpeg.org/ffmpeg-filters.html#Audio-Filters
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.AudioStream">
            <summary>
            Initially contains the best suitable audio stream.
            Can be changed to a different stream reference.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.SubtitleStream">
            <summary>
            Initially contains the best suitable subtitle stream.
            Can be changed to a different stream reference.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.MediaOptions.SubtitlesUrl">
            <summary>
            Gets or sets the subtitles URL.
            If set, the subtitles will be side-loaded and the loaded media
            subtitles (if any) will be ignored.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.MediaType">
            <summary>
            Enumerates the different Media Types compatible with AVMEDIATYPE_* constants
            defined by FFmpeg
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaType.None">
            <summary>
            Represents an un-existing media type (-1)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaType.Video">
            <summary>
            The video media type (0)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaType.Audio">
            <summary>
            The audio media type (1)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.MediaType.Subtitle">
            <summary>
            The subtitle media type (3)
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.OptionMeta">
            <summary>
            Provides information about a named option for a demuxer or a codec.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.OptionMeta.#ctor(FFmpeg.AutoGen.AVOption*)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.OptionMeta"/> class.
            </summary>
            <param name="option">The option.</param>
        </member>
        <member name="P:Unosquare.FFME.Shared.OptionMeta.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.OptionMeta.Flags">
            <summary>
            Gets the flags.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.OptionMeta.IsEncodingOption">
            <summary>
            Gets a value indicating whether this instance is encoding option.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.OptionMeta.IsDecodingOption">
            <summary>
            Gets a value indicating whether this instance is decoding option.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.OptionMeta.IsFilteringOption">
            <summary>
            Gets a value indicating whether this instance is filtering option.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.OptionMeta.IsAudioOption">
            <summary>
            Gets a value indicating whether this instance is audio option.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.OptionMeta.IsSubtitleOption">
            <summary>
            Gets a value indicating whether this instance is subtitle option.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.OptionMeta.IsVideoOption">
            <summary>
            Gets a value indicating whether this instance is video option.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.OptionMeta.IsBsfOption">
            <summary>
            Gets a value indicating whether this instance is BSF option.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.OptionMeta.IsReadonly">
            <summary>
            Gets a value indicating whether this instance is readonly.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.OptionMeta.IsExported">
            <summary>
            Gets a value indicating whether this instance is exported.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.OptionMeta.OptionType">
            <summary>
            Gets the type of the option.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.OptionMeta.DefaultLong">
            <summary>
            Gets the default long.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.OptionMeta.DefaultDouble">
            <summary>
            Gets the default double.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.OptionMeta.DefaultRational">
            <summary>
            Gets the default rational.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.OptionMeta.HelpText">
            <summary>
            Gets the help text.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.OptionMeta.Min">
            <summary>
            Gets the minimum.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.OptionMeta.Max">
            <summary>
            Gets the maximum.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.OptionMeta.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Unosquare.FFME.Shared.PlaybackStatus">
            <summary>
            Media States compatible with MediaState enumeration
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.PlaybackStatus.Manual">
            <summary>
            The manual status
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.PlaybackStatus.Play">
            <summary>
            The play status
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.PlaybackStatus.Close">
            <summary>
            The close status
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.PlaybackStatus.Pause">
            <summary>
            The pause status
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.PlaybackStatus.Stop">
            <summary>
            The stop status
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.ResolutionDivider">
            <summary>
            Enumerates the different low resolution divider indices.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.ResolutionDivider.Full">
            <summary>
            Represents no resolution reduction
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.ResolutionDivider.Half">
            <summary>
            Represents 1/2 resolution
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.ResolutionDivider.Quarter">
            <summary>
            Represents 1/4 resolution
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Shared.ResolutionDivider.Eighth">
            <summary>
            Represents 1/8 resolution
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.SubtitleBlock">
            <summary>
            A subtitle frame container. Simply contains text lines.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.SubtitleBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.SubtitleBlock"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.SubtitleBlock.Text">
            <summary>
            Gets the lines of text for this subtitle frame with all formatting stripped out.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.SubtitleBlock.OriginalText">
            <summary>
            Gets the original text in SRT or ASS format.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.SubtitleBlock.OriginalTextType">
            <summary>
            Gets the type of the original text.
            Returns None when it's a bitmap or when it's None
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Shared.VideoBlock">
            <inheritdoc />
            <summary>
            A pre-allocated, scaled video block. The buffer is in BGR, 24-bit format
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoBlock.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.VideoBlock" /> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.PixelWidth">
            <summary>
            Gets the number of horizontal pixels in the image.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.PixelHeight">
            <summary>
            Gets the number of vertical pixels in the image.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.PixelAspectWidth">
            <summary>
            Gets the pixel aspect width.
            This is NOT the display aspect width.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.PixelAspectHeight">
            <summary>
            Gets the pixel aspect height.
            This is NOT the display aspect height.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.SmtpeTimeCode">
            <summary>
            Gets the SMTPE time code.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.IsHardwareFrame">
            <summary>
            Gets a value indicating whether this frame was decoded in a hardware context.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.HardwareAcceleratorName">
            <summary>
            Gets the name of the hardware decoder if the frame was decoded in a hardware context.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.DisplayPictureNumber">
            <summary>
            Gets the display picture number (frame number).
            If not set by the decoder, this attempts to obtain it by dividing the start time by the
            frame duration
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.CodedPictureNumber">
            <summary>
            Gets the coded picture number set by the decoder.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.ClosedCaptions">
            <summary>
            Gets the closed caption packets for this video block.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoBlock.PictureBufferStride">
            <summary>
            Gets the picture buffer stride.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoBlock.Allocate(Unosquare.FFME.Decoding.VideoFrame,FFmpeg.AutoGen.AVPixelFormat)">
            <summary>
            Allocates a block of memory suitable for a picture buffer
            and sets the corresponding properties.
            </summary>
            <param name="source">The source.</param>
            <param name="pixelFormat">The pixel format.</param>
            <returns>True if the allocation was successful</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoBlock.Deallocate">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Shared.VideoSeekIndex">
            <summary>
            Provides a collection of <see cref="T:Unosquare.FFME.Shared.VideoSeekIndexEntry"/>.
            Seek entries are contain specific positions where key frames (or I frames) are located
            within a seekable stream.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoSeekIndex.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.VideoSeekIndex"/> class.
            </summary>
            <param name="sourceUrl">The source URL.</param>
            <param name="streamIndex">Index of the stream.</param>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoSeekIndex.Entries">
            <summary>
            Provides access to the seek entries.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoSeekIndex.StreamIndex">
            <summary>
            Gets the stream index this seeking index belongs to.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoSeekIndex.SourceUrl">
            <summary>
            Gets the source URL this seeking index belongs to.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoSeekIndex.Load(System.IO.Stream)">
            <summary>
            Loads the specified stream in the CSV-like UTF8 format it was written by the <see cref="M:Unosquare.FFME.Shared.VideoSeekIndex.Save(System.IO.Stream)"/> method.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The loaded index from the specified stream.</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoSeekIndex.Save(System.IO.Stream)">
            <summary>
            Writes the index data to the specified stream in CSV-like UTF8 text format.
            </summary>
            <param name="stream">The stream to write data to.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoSeekIndex.Find(System.TimeSpan)">
            <summary>
            Finds the closest seek entry that is on or prior to the seek target.
            </summary>
            <param name="seekTarget">The seek target.</param>
            <returns>The seek entry or null of not found</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoSeekIndex.TryAdd(Unosquare.FFME.Decoding.VideoFrame)">
            <summary>
            Tries to add an entry created from the frame.
            </summary>
            <param name="managedFrame">The managed frame.</param>
            <returns>
            True if the index entry was created from the frame.
            False if the frame is of wrong picture type or if it already existed.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoSeekIndex.AddMonotonicEntries(System.TimeSpan)">
            <summary>
            Adds the monotonic entries up to a stream duration.
            </summary>
            <param name="streamDuration">Duration of the stream.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoSeekIndex.ComputeMonotonicDistance">
            <summary>
            Gets the monotonic presentation distance units that separate the last entries in the index.
            Returns -1 if there are less than 2 entries or if the entries are not monotonic.
            </summary>
            <returns>-1 if the entries are not monotonic</returns>
        </member>
        <member name="T:Unosquare.FFME.Shared.VideoSeekIndex.VideoSeekIndexEntryComparer">
            <summary>
            A comparer for <see cref="T:Unosquare.FFME.Shared.VideoSeekIndexEntry"/>
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoSeekIndex.VideoSeekIndexEntryComparer.Compare(Unosquare.FFME.Shared.VideoSeekIndexEntry,Unosquare.FFME.Shared.VideoSeekIndexEntry)">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Shared.VideoSeekIndexEntry">
            <summary>
            Represents a seek entry to a position within the stream
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoSeekIndexEntry.#ctor(System.Int32,System.Int32,System.Int32,System.Int64,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.VideoSeekIndexEntry" /> class.
            </summary>
            <param name="streamIndex">Index of the stream.</param>
            <param name="timeBaseNum">The time base numerator.</param>
            <param name="timeBaseDen">The time base deonominator.</param>
            <param name="startTimeTicks">The start time ticks.</param>
            <param name="presentationTime">The presentation time.</param>
            <param name="decodingTime">The decoding time.</param>
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoSeekIndexEntry.#ctor(Unosquare.FFME.Decoding.VideoFrame)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Shared.VideoSeekIndexEntry"/> class.
            </summary>
            <param name="frame">The frame.</param>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoSeekIndexEntry.StreamIndex">
            <summary>
            Gets the stream index of this index entry.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoSeekIndexEntry.StreamTimeBase">
            <summary>
            Gets the stream time base.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoSeekIndexEntry.StartTime">
            <summary>
            Gets the start time of the frame.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoSeekIndexEntry.PresentationTime">
            <summary>
            Gets the original, unadjusted presentation time.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Shared.VideoSeekIndexEntry.DecodingTime">
            <summary>
            Gets the original, unadjusted decoding time.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoSeekIndexEntry.CompareTo(Unosquare.FFME.Shared.VideoSeekIndexEntry)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoSeekIndexEntry.CompareTo(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoSeekIndexEntry.ToString">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoSeekIndexEntry.FromCsvString(System.String)">
            <summary>
            Creates an entry based on a CSV string
            </summary>
            <param name="line">The line.</param>
            <returns>An index entry or null if unsuccessful.</returns>
        </member>
        <member name="M:Unosquare.FFME.Shared.VideoSeekIndexEntry.ToCsvString">
            <summary>
            Converts values of this instance to a line of CSV text.
            </summary>
            <returns>The comma-separated values</returns>
        </member>
    </members>
</doc>
