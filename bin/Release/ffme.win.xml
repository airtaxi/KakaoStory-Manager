<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ffme.win</name>
    </assembly>
    <members>
        <member name="T:Unosquare.FFME.Events.BitmapDataBuffer">
            <summary>
            Contains metadata about a raw bitmap back-buffer
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Events.BitmapDataBuffer.#ctor(System.Windows.Media.Imaging.WriteableBitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Events.BitmapDataBuffer"/> class.
            </summary>
            <param name="w">The w.</param>
        </member>
        <member name="M:Unosquare.FFME.Events.BitmapDataBuffer.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Windows.Media.Imaging.BitmapPalette,System.Windows.Media.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Events.BitmapDataBuffer" /> class.
            </summary>
            <param name="scan0">The scan0.</param>
            <param name="stride">The stride.</param>
            <param name="bytesPerPixel">The bytes per pixel.</param>
            <param name="pixelWidth">Width of the pixel.</param>
            <param name="pixelHeight">Height of the pixel.</param>
            <param name="dpiX">The dpi x.</param>
            <param name="dpiY">The dpi y.</param>
            <param name="palette">The palette.</param>
            <param name="pixelFormat">The pixel format.</param>
        </member>
        <member name="P:Unosquare.FFME.Events.BitmapDataBuffer.BufferLength">
            <summary>
            Gets the length of the buffer (Stride x Pixel Height).
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.BitmapDataBuffer.Scan0">
            <summary>
            Gets a pointer to the raw pixel data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.BitmapDataBuffer.Stride">
            <summary>
            Gets the byte width of each row of pixels
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.BitmapDataBuffer.BitsPerPixel">
            <summary>
            Gets the bits per pixel.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.BitmapDataBuffer.BytesPerPixel">
            <summary>
            Gets the bytes per pixel.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.BitmapDataBuffer.PixelWidth">
            <summary>
            Gets width of the bitmap
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.BitmapDataBuffer.PixelHeight">
            <summary>
            Gets height of the bitmap
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.BitmapDataBuffer.DpiX">
            <summary>
            Gets the DPI on the X axis
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.BitmapDataBuffer.DpiY">
            <summary>
            Gets the DPI on the Y axis
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.BitmapDataBuffer.UpdateRect">
            <summary>
            Gets the update rect.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.BitmapDataBuffer.Palette">
            <summary>
            Gets the palette.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.BitmapDataBuffer.PixelFormat">
            <summary>
            Gets the pixel format.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Events.BitmapDataBuffer.CreateDrawingBitmap">
            <summary>
            Creates a Drawing Bitmap from this data buffer.
            </summary>
            <returns>The bitmap</returns>
        </member>
        <member name="T:Unosquare.FFME.Events.MediaInitializingEventArgs">
            <summary>
            Represents the event arguments of the MediaInitializing routed event.
            </summary>
            <seealso cref="T:System.Windows.RoutedEventArgs" />
        </member>
        <member name="M:Unosquare.FFME.Events.MediaInitializingEventArgs.#ctor(Unosquare.FFME.Shared.ContainerConfiguration,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Events.MediaInitializingEventArgs" /> class.
            </summary>
            <param name="config">The container configuration options.</param>
            <param name="url">The URL.</param>
        </member>
        <member name="P:Unosquare.FFME.Events.MediaInitializingEventArgs.Configuration">
            <summary>
            Set or change the container configuration options before the media is opened.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.MediaInitializingEventArgs.Url">
            <summary>
            Gets the URL.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Events.MediaOpenedRoutedEventArgs">
            <summary>
            Represents the event arguments of the <see cref="E:Unosquare.FFME.MediaElement.MediaOpened"/> or
            <see cref="E:Unosquare.FFME.MediaElement.MediaChanged"/> routed events.
            </summary>
            <seealso cref="T:System.Windows.RoutedEventArgs" />
        </member>
        <member name="M:Unosquare.FFME.Events.MediaOpenedRoutedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,Unosquare.FFME.Shared.MediaInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Events.MediaOpenedRoutedEventArgs" /> class.
            </summary>
            <param name="routedEvent">The routed event.</param>
            <param name="source">The source.</param>
            <param name="info">The input information.</param>
        </member>
        <member name="P:Unosquare.FFME.Events.MediaOpenedRoutedEventArgs.Info">
            <summary>
            Provides internal details of the media, including its component streams.
            Typically, options are set based on what this information contains.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Events.MediaStateChangedRoutedEventArgs">
            <summary>
            Contains the media state changed routed event args
            </summary>
            <seealso cref="T:System.Windows.RoutedEventArgs" />
        </member>
        <member name="M:Unosquare.FFME.Events.MediaStateChangedRoutedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,System.Windows.Controls.MediaState,System.Windows.Controls.MediaState)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Events.MediaStateChangedRoutedEventArgs"/> class.
            </summary>
            <param name="routedEvent">The routed event.</param>
            <param name="source">The source.</param>
            <param name="oldState">State of the previous.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="P:Unosquare.FFME.Events.MediaStateChangedRoutedEventArgs.MediaState">
            <summary>
            Gets the current media state.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.MediaStateChangedRoutedEventArgs.OldMediaState">
            <summary>
            Gets the position.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Events.RenderingAudioEventArgs">
            <summary>
            Provides the audio samples rendering payload as event arguments.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Unosquare.FFME.Events.RenderingAudioEventArgs.#ctor(System.Byte[],System.Int32,Unosquare.FFME.Shared.MediaEngineState,Unosquare.FFME.Shared.StreamInfo,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Events.RenderingAudioEventArgs" /> class.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="length">The length.</param>
            <param name="engineState">The engine.</param>
            <param name="stream">The stream.</param>
            <param name="startTime">The start time.</param>
            <param name="duration">The duration.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingAudioEventArgs.Buffer">
            <summary>
            Gets a the raw data buffer going into the audio device.
            Samples are provided in PCM 16-bit signed, interleaved stereo.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingAudioEventArgs.BufferLength">
            <summary>
            Gets the length in bytes of the samples buffer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingAudioEventArgs.SampleRate">
            <summary>
            Gets the number of samples in 1 second.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingAudioEventArgs.ChannelCount">
            <summary>
            Gets the number of channels.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingAudioEventArgs.BitsPerSample">
            <summary>
            Gets the number of bits per sample.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingAudioEventArgs.Samples">
            <summary>
            Gets the number of samples in the buffer for all channels.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingAudioEventArgs.SamplesPerChannel">
            <summary>
            Gets the number of samples in the buffer per channel.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Events.RenderingEventArgs">
            <summary>
            A base class to represent media block
            rendering event arguments.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Unosquare.FFME.Events.RenderingEventArgs.#ctor(Unosquare.FFME.Shared.IMediaEngineState,Unosquare.FFME.Shared.StreamInfo,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Events.RenderingEventArgs" /> class.
            </summary>
            <param name="engineState">The media engine state.</param>
            <param name="stream">The stream.</param>
            <param name="startTime">The position.</param>
            <param name="duration">The duration.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingEventArgs.EngineState">
            <summary>
            Provides access to the underlying media engine state
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingEventArgs.Stream">
            <summary>
            Provides Stream Information coming from the media container.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingEventArgs.Clock">
            <summary>
            Gets the clock position at which the media
            was called for rendering
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingEventArgs.StartTime">
            <summary>
            Gets the starting time at which this media
            has to be presented.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingEventArgs.Duration">
            <summary>
            Gets how long this media has to be presented.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Events.RenderingSubtitlesEventArgs">
            <summary>
            Provides the subtitles rendering payload as event arguments.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Unosquare.FFME.Events.RenderingSubtitlesEventArgs.#ctor(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},FFmpeg.AutoGen.AVSubtitleType,Unosquare.FFME.Shared.MediaEngineState,Unosquare.FFME.Shared.StreamInfo,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Events.RenderingSubtitlesEventArgs" /> class.
            </summary>
            <param name="text">The text.</param>
            <param name="originalText">The original text.</param>
            <param name="format">The format.</param>
            <param name="engineState">The engine.</param>
            <param name="stream">The stream.</param>
            <param name="startTime">The start time.</param>
            <param name="duration">The duration.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingSubtitlesEventArgs.Text">
            <summary>
            Gets the text stripped out of ASS or SRT formatting.
            This is what the default subtitle renderer will display
            on the screen.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingSubtitlesEventArgs.OriginalText">
            <summary>
            Gets the text as originally decoded including
            all markup and formatting.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingSubtitlesEventArgs.Format">
            <summary>
            Gets the type of subtitle format the original
            subtitle text is in.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingSubtitlesEventArgs.Cancel">
            <summary>
            When set to true, clears the current subtitle and
            prevents the subtitle block from being rendered.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Events.RenderingVideoEventArgs">
            <summary>
            The video rendering event arguments
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Unosquare.FFME.Events.RenderingVideoEventArgs.#ctor(Unosquare.FFME.Events.BitmapDataBuffer,System.Collections.ObjectModel.ReadOnlyCollection{Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket},System.String,System.Int64,Unosquare.FFME.Shared.MediaEngineState,Unosquare.FFME.Shared.StreamInfo,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Events.RenderingVideoEventArgs" /> class.
            </summary>
            <param name="bitmap">The bitmap.</param>
            <param name="closedCaptions">The closed captions.</param>
            <param name="smtpeTimeCode">The smtpe time code.</param>
            <param name="pictureNumber">The picture number.</param>
            <param name="engineState">The engine.</param>
            <param name="stream">The stream.</param>
            <param name="startTime">The start time.</param>
            <param name="duration">The duration.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingVideoEventArgs.Bitmap">
            <summary>
            Gets the writable bitmap filled with the video frame pixels.
            Feel free to capture or change this buffer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingVideoEventArgs.ClosedCaptions">
            <summary>
            Gets the closed caption decoded packets.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingVideoEventArgs.PictureNumber">
            <summary>
            Gets the display picture number (frame number).
            If not set by the decoder, this attempts to obtain it by dividing the start time by the
            frame duration
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.RenderingVideoEventArgs.SmtpeTimeCode">
            <summary>
            Gets the SMTPE time code.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Events.MediaLogMessageEventArgs">
            <summary>
            Contains the Message Logged Event Arguments
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:Unosquare.FFME.Events.MediaLogMessageEventArgs.#ctor(Unosquare.FFME.Shared.MediaLogMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Events.MediaLogMessageEventArgs"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="P:Unosquare.FFME.Events.MediaLogMessageEventArgs.TimestampUtc">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.MediaLogMessageEventArgs.MessageType">
            <summary>
            Gets the type of the message.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.MediaLogMessageEventArgs.Message">
            <summary>
            Gets the contents of the message.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.MediaLogMessageEventArgs.AspectName">
            <summary>
            Gets the aspect or feature that sent the logged message.
            May or may not be available.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Events.MediaLogMessageEventArgs.ToString">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Events.MediaLogMessageEventArgs.GetTypePrefix">
            <summary>
            Gets the type prefix.
            </summary>
            <returns>A 3-letter abbreviation</returns>
        </member>
        <member name="T:Unosquare.FFME.Events.PositionChangedRoutedEventArgs">
            <summary>
            Contains the position changed routed event args
            </summary>
            <seealso cref="T:System.Windows.RoutedEventArgs" />
        </member>
        <member name="M:Unosquare.FFME.Events.PositionChangedRoutedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,Unosquare.FFME.Shared.IMediaEngineState,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Events.PositionChangedRoutedEventArgs" /> class.
            </summary>
            <param name="routedEvent">The routed event.</param>
            <param name="source">The source.</param>
            <param name="engineState">State of the engine.</param>
            <param name="oldPosition">The old position.</param>
            <param name="newPosition">The new position.</param>
        </member>
        <member name="P:Unosquare.FFME.Events.PositionChangedRoutedEventArgs.Position">
            <summary>
            Gets the current position.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.PositionChangedRoutedEventArgs.OldPosition">
            <summary>
            Gets the old position.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.PositionChangedRoutedEventArgs.EngineState">
            <summary>
            Provides access to the underlying media engine state
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Events.MediaOpeningEventArgs">
            <summary>
            Represents the event arguments of the <see cref="E:Unosquare.FFME.MediaElement.MediaOpening"/>
            or <see cref="E:Unosquare.FFME.MediaElement.MediaChanging"/> routed events.
            </summary>
            <seealso cref="T:System.Windows.RoutedEventArgs" />
        </member>
        <member name="M:Unosquare.FFME.Events.MediaOpeningEventArgs.#ctor(Unosquare.FFME.Shared.MediaOptions,Unosquare.FFME.Shared.MediaInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Events.MediaOpeningEventArgs" /> class.
            </summary>
            <param name="options">The options.</param>
            <param name="info">The input information.</param>
        </member>
        <member name="P:Unosquare.FFME.Events.MediaOpeningEventArgs.Options">
            <summary>
            Set or change the options before the media is opened.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Events.MediaOpeningEventArgs.Info">
            <summary>
            Provides internal details of the media, including its component streams.
            Typically, options are set based on what this information contains.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Aspects">
            <summary>
            Provides constants for logging aspect identifiers
            </summary>
        </member>
        <member name="T:Unosquare.FFME.MediaElement">
            <summary>
            Represents a control that contains audio and/or video.
            In contrast with System.Windows.Controls.MediaElement, this version uses
            the FFmpeg library to perform reading and decoding of media streams.
            </summary>
            <seealso cref="T:System.Windows.Controls.UserControl" />
            <seealso cref="T:System.IDisposable" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
            <seealso cref="T:System.Windows.Markup.IUriContext" />
        </member>
        <member name="F:Unosquare.FFME.MediaElement.NotificationPropertyCache">
            <summary>
            Holds the state of the notification properties
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.PropertyUpdatesWorker">
            <summary>
            The property updates worker timer
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.StartPropertyUpdatesWorker">
            <summary>
            Starts the property updates worker.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">MediaElement does not have minimum set of MediaProperties</exception>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.HandledAsynchronousDispose">
            <summary>
            Handles the asynchronous dispose of the underlying Media Engine.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.UpdateNotificationProperties">
            <summary>
            Updates the notification properties.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.UpdateDependencyProperties">
            <summary>
            Updates the dependency properties.
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.RenderingVideo">
            <summary>
            Occurs right before the video is presented on the screen.
            You can update the pixels on the bitmap before it is rendered on the screen.
            Or you could take a screen shot.
            Ensure you handle this very quickly as it runs on the UI thread.
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.RenderingAudio">
            <summary>
            Occurs right before the audio is added to the audio buffer.
            You can update the bytes before they are queued.
            Ensure you handle this quickly before you get choppy audio.
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.RenderingSubtitles">
            <summary>
            Occurs right before the subtitles are rendered.
            You can update the text.
            Ensure you handle this quickly before you get choppy subtitles.
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.AudioDeviceStopped">
            <summary>
            Occurs when the currently selected audio device stops or loses its buffer.
            Call the <see cref="M:Unosquare.FFME.MediaElement.ChangeMedia"/> method and select a new audio device
            in order to output to a new audio device
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseRenderingVideoEvent(Unosquare.FFME.Shared.VideoBlock,Unosquare.FFME.Events.BitmapDataBuffer,System.TimeSpan)">
            <summary>
            Raises the rendering video event.
            </summary>
            <param name="videoBlock">The block.</param>
            <param name="bitmap">The bitmap.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseRenderingAudioEvent(System.Byte[],System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Raises the rendering audio event.
            </summary>
            <param name="buffer">The audio buffer.</param>
            <param name="bufferLength">Length of the buffer.</param>
            <param name="startTime">The start time.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseRenderingSubtitlesEvent(Unosquare.FFME.Shared.SubtitleBlock,System.TimeSpan)">
            <summary>
            Raises the rendering subtitles event.
            Returning true cancels the rendering of subtitles.
            </summary>
            <param name="block">The block.</param>
            <param name="clock">The clock.</param>
            <returns>True if the rendering should be prevented</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseAudioDeviceStoppedEvent">
            <summary>
            Raises the audio device stopped event.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.AffectsMeasureAndRender">
            <summary>
            The affects measure and render metadata options
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.DisposeLock">
            <summary>
            The dispose lock -- Prevents running actions while disposing.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.IsOpeningViaCommand">
            <summary>
            Signals whether the open task was called via the open command
            so that the source property changing handler does not re-run the open command.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.m_IsDisposed">
            <summary>
            To detect redundant calls
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.AllowContentChange">
            <summary>
            The allow content change flag
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.MediaElement"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.MediaElement" /> class.
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.FFmpegMessageLogged">
            <summary>
            Occurs when a logging message from the FFmpeg library has been received.
            This is shared across all instances of Media Elements.
            </summary>
            <remarks>
            This event is raised on a background thread.
            All interaction with UI elements requires calls on their corresponding dispatcher.
            </remarks>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.MessageLogged">
            <summary>
            Occurs when a logging message has been logged.
            This does not include FFmpeg messages.
            </summary>
            <remarks>
            This event is raised on a background thread.
            All interaction with UI elements requires calls on their corresponding dispatcher.
            </remarks>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.MediaInitializing">
            <summary>
            Raised before the input stream of the media is initialized.
            Use this method to modify the input options.
            </summary>
            <remarks>
            This event is raised on a background thread.
            All interaction with UI elements requires calls on their corresponding dispatcher.
            </remarks>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.MediaOpening">
            <summary>
            Raised before the input stream of the media is opened.
            Use this method to modify the media options and select streams.
            </summary>
            <remarks>
            This event is raised on a background thread.
            All interaction with UI elements requires calls on their corresponding dispatcher.
            </remarks>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.MediaChanging">
            <summary>
            Raised before a change in media options is applied.
            Use this method to modify the selected streams.
            </summary>
            <remarks>
            This event is raised on a background thread.
            All interaction with UI elements requires calls on their corresponding dispatcher.
            </remarks>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.MediaElement.FFmpegDirectory">
            <summary>
            Gets or sets the FFmpeg path from which to load the FFmpeg binaries.
            You must set this path before setting the Source property for the first time on any instance of this control.
            Setting this property when FFmpeg binaries have been registered will throw an exception.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.FFmpegLoadModeFlags">
            <summary>
            Specifies the bitwise flags that correspond to FFmpeg library identifiers.
            Please use the <see cref="T:Unosquare.FFME.Shared.FFmpegLoadMode"/> class for valid combinations.
            If FFmpeg is already loaded, the value cannot be changed.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.FFmpegVersionInfo">
            <summary>
            Gets the FFmpeg version information. Returns null
            when the libraries have not been loaded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.EnableWpfMultiThreadedVideo">
            <summary>
            Gets or sets a value indicating whether the video visualization control
            creates its own dispatcher thread to handle rendering of video frames.
            This is an experimental feature and it is useful when creating video walls.
            For example if you want to display multiple videos at a time and don't want to
            use time from the main UI thread. This feature is only valid if we are in
            a WPF context.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.System#Windows#Markup#IUriContext#BaseUri">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.MediaElement.Unosquare#FFME#Shared#ILoggingSource#LoggingHandler">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
              <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.MediaCore">
            <summary>
            Provides access to the underlying media engine driving this control.
            This property is intended for advance usages only.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.VideoView">
            <summary>
            This is the image that holds video bitmaps. It is a Hosted Image which means that in a WPF
            GUI context, it runs on its own dispatcher (multi-threaded UI)
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.CaptionsView">
            <summary>
            Gets the closed captions view control.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.SubtitlesView">
            <summary>
            A ViewBox holding the subtitle text blocks
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.ContentGrid">
            <summary>
            Gets the grid control holding the rest of the controls.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.LoadFFmpeg">
            <summary>
            Forces the pre-loading of the FFmpeg libraries according to the values of the
            <see cref="P:Unosquare.FFME.MediaElement.FFmpegDirectory"/> and <see cref="P:Unosquare.FFME.MediaElement.FFmpegLoadModeFlags"/>
            Also, sets the <see cref="P:Unosquare.FFME.MediaElement.FFmpegVersionInfo"/> property. Throws an exception
            if the libraries cannot be loaded.
            </summary>
            <returns>true if libraries were loaded, false if libraries were already loaded.</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.ChangeMedia">
            <summary>
            Requests new media options to be applied, including stream component selection.
            Handle the <see cref="E:Unosquare.FFME.MediaElement.MediaChanging"/> event to set new <see cref="T:Unosquare.FFME.Shared.MediaOptions"/> based on
            <see cref="P:Unosquare.FFME.MediaElement.MediaInfo"/> properties.
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.Play">
            <summary>
            Begins or resumes playback of the currently loaded media.
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.Pause">
            <summary>
            Pauses playback of the currently loaded media.
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.Stop">
            <summary>
            Pauses and rewinds the currently loaded media.
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.Close">
            <summary>
            Closes the currently loaded media.
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.Seek(System.TimeSpan)">
            <summary>
            Seeks to the specified target position.
            This is an alternative to using the <see cref="P:Unosquare.FFME.MediaElement.Position"/> dependency property.
            </summary>
            <param name="target">The target time to seek to.</param>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.StepForward">
            <summary>
            Seeks a single frame forward.
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.StepBackward">
            <summary>
            Seeks a single frame backward.
            </summary>
            <returns>The awaitable command</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.Open(System.Uri)">
            <summary>
            Opens the specified URI.
            This is an alternative method of opening media vs using the
            <see cref="P:Unosquare.FFME.MediaElement.Source"/> Dependency Property.
            </summary>
            <param name="uri">The URI.</param>
            <returns>The awaitable task.</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.Open(Unosquare.FFME.Shared.IMediaInputStream)">
            <summary>
            Opens the specified custom input stream.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The awaitable task</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.Unosquare#FFME#Shared#ILoggingHandler#HandleLogMessage(Unosquare.FFME.Shared.MediaLogMessage)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.MediaElement.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.MediaElement.BindProperty(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Windows.DependencyObject,System.String,System.Windows.Data.BindingMode)">
            <summary>
            Binds the property.
            </summary>
            <param name="target">The target.</param>
            <param name="targetProperty">The target property.</param>
            <param name="source">The source.</param>
            <param name="sourcePath">The source path.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.OnCoerceContentValue(System.Windows.DependencyObject,System.Object)">
            <summary>
            Called when [coerce content value].
            </summary>
            <param name="d">The d.</param>
            <param name="baseValue">The base value.</param>
            <returns>The content property value</returns>
            <exception cref="T:System.InvalidOperationException">When content has been locked.</exception>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.InitializeComponent">
            <summary>
            Initializes the component.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.HandleVideoViewLayoutUpdates(System.Object,System.EventArgs)">
            <summary>
            Handles the video view layout updates.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.Volume">
            <summary>
            Gets/Sets the Volume property on the MediaElement.
            Note: Valid values are from 0 to 1
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.VolumeProperty">
            <summary>
            The DependencyProperty for the MediaElement.Volume property.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.Balance">
            <summary>
            Gets/Sets the Balance property on the MediaElement.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.BalanceProperty">
            <summary>
            The DependencyProperty for the MediaElement.Balance property.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsMuted">
            <summary>
            Gets/Sets the IsMuted property on the MediaElement.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.IsMutedProperty">
            <summary>
            The DependencyProperty for the MediaElement.IsMuted property.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.SpeedRatio">
            <summary>
            Gets/Sets the SpeedRatio property on the MediaElement.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.SpeedRatioProperty">
            <summary>
            The DependencyProperty for the MediaElement.SpeedRatio property.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.Position">
            <summary>
            Gets/Sets the Position property on the MediaElement.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.PositionProperty">
            <summary>
            The DependencyProperty for the MediaElement.Position property.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.Source">
            <summary>
            Gets/Sets the Source on this MediaElement.
            The Source property is the Uri of the media to be played.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.SourceProperty">
            <summary>
            DependencyProperty for FFmpegMediaElement Source property.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.Stretch">
            <summary>
            Gets/Sets the Stretch on this MediaElement.
            The Stretch property determines how large the MediaElement will be drawn.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.StretchProperty">
            <summary>
            DependencyProperty for Stretch property.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.StretchDirection">
            <summary>
            Gets/Sets the stretch direction of the ViewBox, which determines the restrictions on
            scaling that are applied to the content inside the ViewBox.  For instance, this property
            can be used to prevent the content from being smaller than its native size or larger than
            its native size.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.StretchDirectionProperty">
            <summary>
            DependencyProperty for StretchDirection property.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.ScrubbingEnabled">
            <summary>
            Gets or sets a value that indicates whether the MediaElement will update frames
            for seek operations while paused. This is a dependency property.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.ScrubbingEnabledProperty">
            <summary>
            The DependencyProperty for the MediaElement.ScrubbingEnabled property.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.LoadedBehavior">
            <summary>
            Specifies the action that the media element should execute when it
            is loaded. The default behavior is that it is under manual control
            (i.e. the caller should call methods such as Play in order to play
            the media). If a source is set, then the default behavior changes to
            to be playing the media. If a source is set and a loaded behavior is
            also set, then the loaded behavior takes control.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.LoadedBehaviorProperty">
            <summary>
            The DependencyProperty for the MediaElement.LoadedBehavior property.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.UnloadedBehavior">
            <summary>
            Specifies how the underlying media should behave when
            it has ended. The default behavior is to Pause the media.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.UnloadedBehaviorProperty">
            <summary>
            The DependencyProperty for the MediaElement.UnloadedBehavior property.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.ClosedCaptionsChannel">
            <summary>
            Gets/Sets the ClosedCaptionsChannel property on the MediaElement.
            Note: Valid values are from 0 to 1
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.ClosedCaptionsChannelProperty">
            <summary>
            The DependencyProperty for the MediaElement.ClosedCaptionsChannel property.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.RendererOptions">
            <summary>
            Provides access to various internal media renderer options.
            The default options are optimal to work for most media streams.
            This is an advanced feature and it is not recommended to change these
            options without careful consideration.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.NaturalDuration">
            <summary>
            Gets the Media's natural duration
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.RemainingDuration">
            <summary>
            Gets the remaining playback duration. Returns Forever for indeterminate values.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.FramePosition">
            <summary>
            Gets the discrete time position of the start of the current
            frame of the main component.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.BitRate">
            <summary>
            Gets the stream's total bit rate as reported by the container.
            Returns 0 if unavailable.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.DecodingBitRate">
            <summary>
            Gets the instantaneous, compressed bit rate of the decoders for the currently active component streams.
            This is provided in bits per second.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.Metadata">
            <summary>
            Provides key-value pairs of the metadata contained in the media.
            Returns null when media has not been loaded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.MediaInfo">
            <summary>
            Provides stream, chapter and program info of the underlying media.
            Returns null when no media is loaded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.VideoStreamIndex">
            <summary>
            Gets the index of the video stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.AudioStreamIndex">
            <summary>
            Gets the index of the audio stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.SubtitleStreamIndex">
            <summary>
            Gets the index of the subtitle stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.MediaFormat">
            <summary>
            Gets the media format. Returns null when media has not been loaded.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.MediaStreamSize">
            <summary>
            Gets the size in bytes of the current stream being read.
            For multi-file streams, get the size of the current file only.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.PositionStep">
            <summary>
            Gets the duration of a single frame step.
            If there is a video component with a frame rate, this property returns the length of a frame.
            If there is no video component it simply returns a tenth of a second.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.HasAudio">
            <summary>
            Returns whether the given media has audio.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.HasVideo">
            <summary>
            Returns whether the given media has video. Only valid after the
            MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.HasSubtitles">
            <summary>
            Returns whether the given media has subtitles. Only valid after the
            MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.VideoCodec">
            <summary>
            Gets the video codec.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.VideoBitRate">
            <summary>
            Gets the video bit rate.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.VideoRotation">
            <summary>
            Returns the clockwise angle that needs to be applied to the video for it to be displayed
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.NaturalVideoWidth">
            <summary>
            Returns the natural width of the media in the video.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.NaturalVideoHeight">
            <summary>
            Returns the natural height of the media in the video.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.VideoFrameRate">
            <summary>
            Gets the video frame rate.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.VideoHardwareDecoder">
            <summary>
            Gets the name of the video hardware decoder in use.
            Enabling hardware acceleration does not guarantee decoding will be performed in hardware.
            When hardware decoding of frames is in use this will return the name of the HW accelerator.
            Otherwise it will return an empty string.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.AudioCodec">
            <summary>
            Gets the audio codec.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.AudioBitRate">
            <summary>
            Gets the audio bit rate.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.AudioChannels">
            <summary>
            Gets the audio channels count.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.AudioSampleRate">
            <summary>
            Gets the audio sample rate.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.AudioBitsPerSample">
            <summary>
            Gets the audio bits per sample.
            Only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.CanPause">
            <summary>
            Returns whether the currently loaded media can be paused.
            This is only valid after the MediaOpened event has fired.
            Note that this property is computed based on whether the stream is detected to be a live stream.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsLiveStream">
            <summary>
            Returns whether the currently loaded media is live or realtime
            This is only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsNetworkStream">
            <summary>
            Returns whether the currently loaded media is a network stream.
            This is only valid after the MediaOpened event has fired.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsSeekable">
            <summary>
            Gets a value indicating whether the currently loaded media can be seeked.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsPlaying">
            <summary>
            Gets a value indicating whether the media is playing.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsPaused">
            <summary>
            Gets a value indicating whether the media is playing.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.HasMediaEnded">
            <summary>
            Gets a value indicating whether the media has reached its end.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsBuffering">
            <summary>
            Get a value indicating whether the media is buffering.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsSeeking">
            <summary>
            Gets a value indicating whether the media seeking is in progress.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.VideoSmtpeTimeCode">
            <summary>
            Returns the current video SMTPE time code if available.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.VideoAspectRatio">
            <summary>
            Gets the current video aspect ratio if available.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.BufferingProgress">
            <summary>
            Gets a value that indicates the percentage of buffering progress made.
            Range is from 0 to 1
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.DownloadProgress">
            <summary>
            Gets a value that indicates the percentage of download progress made.
            Range is from 0 to 1
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.PacketBufferLength">
            <summary>
            Gets the amount of bytes in the packet buffer for the active stream components.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.PacketBufferCount">
            <summary>
            Gets the number of packets buffered for all components
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsOpening">
            <summary>
            Gets a value indicating whether the media is in the process of opening.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsClosing">
            <summary>
            Gets a value indicating whether the media is in the process of closing.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsChanging">
            <summary>
            Gets a value indicating whether the media is currently changing its components.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.IsOpen">
            <summary>
            Gets a value indicating whether this media element
            currently has an open media url.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.MediaState">
            <summary>
            Gets the current playback state.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.MediaElement.HasClosedCaptions">
            <summary>
            Gets a value indicating whether the video stream contains closed captions
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.BufferingStartedEvent">
            <summary>
            BufferingStarted is a routed event
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.BufferingEndedEvent">
            <summary>
            BufferingEnded is a routed event
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.SeekingStartedEvent">
            <summary>
            SeekingStarted is a routed event
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.SeekingEndedEvent">
            <summary>
            SeekingEnded is a routed event
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.MediaFailedEvent">
            <summary>
            MediaFailedEvent is a routed event.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.MediaOpenedEvent">
            <summary>
            MediaOpened is a routed event.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.MediaReadyEvent">
            <summary>
            MediaOpened is a routed event.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.MediaClosedEvent">
            <summary>
            MediaClosed is a routed event.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.MediaChangedEvent">
            <summary>
            MediaChangedEvent is a routed event.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.PositionChangedEvent">
            <summary>
            PositionChanged is a routed event
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.MediaStateChangedEvent">
            <summary>
            MediaStateChanged is a routed event
            </summary>
        </member>
        <member name="F:Unosquare.FFME.MediaElement.MediaEndedEvent">
            <summary>
            MediaEnded is a routed event
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.BufferingStarted">
            <summary>
            Occurs when buffering of packets was started
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.BufferingEnded">
            <summary>
            Occurs when buffering of packets was Ended
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.SeekingStarted">
            <summary>
            Occurs when Seeking of packets was started
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.SeekingEnded">
            <summary>
            Occurs when Seeking of packets was Ended
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.MediaOpened">
            <summary>
            Raised when the media is opened
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.MediaReady">
            <summary>
            Raised after the media is opened and ready to receive commands
            such as <see cref="M:Unosquare.FFME.MediaElement.Seek(System.TimeSpan)"/>
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.MediaChanged">
            <summary>
            Raised after a change in media options and components is applied.
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.MediaClosed">
            <summary>
            Raised when the media is closed
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.MediaEnded">
            <summary>
            Raised when the corresponding media ends.
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.PositionChanged">
            <summary>
            Occurs when media position is changed
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.MediaStateChanged">
            <summary>
            Occurs when media state is changed
            </summary>
        </member>
        <member name="E:Unosquare.FFME.MediaElement.MediaFailed">
            <summary>
            Raised when the media fails to load or a fatal error has occurred which prevents playback.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.CreateExceptionRoutedEventArgs(System.Windows.RoutedEvent,System.Object,System.Exception)">
            <summary>
            Creates a new instance of exception routed event arguments.
            This method exists because the constructor has not been made public for that class.
            </summary>
            <param name="routedEvent">The routed event.</param>
            <param name="sender">The sender.</param>
            <param name="errorException">The error exception.</param>
            <returns>The event arguments</returns>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseFFmpegMessageLogged(System.Object,Unosquare.FFME.Shared.MediaLogMessage)">
            <summary>
            Raises the FFmpeg message logged.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:Unosquare.FFME.Shared.MediaLogMessage"/> instance containing the event data.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseMessageLoggedEvent(Unosquare.FFME.Shared.MediaLogMessage)">
            <summary>
            Raises the message logged event.
            </summary>
            <param name="e">The <see cref="T:Unosquare.FFME.Shared.MediaLogMessage"/> instance containing the event data.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseMediaInitializingEvent(Unosquare.FFME.Shared.ContainerConfiguration,System.String)">
            <summary>
            Raises the media initializing event.
            </summary>
            <param name="config">The container configuration options.</param>
            <param name="url">The URL.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseMediaOpeningEvent(Unosquare.FFME.Shared.MediaOptions,Unosquare.FFME.Shared.MediaInfo)">
            <summary>
            Raises the media opening event.
            </summary>
            <param name="options">The options.</param>
            <param name="mediaInfo">The media information.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.RaiseMediaChangingEvent(Unosquare.FFME.Shared.MediaOptions,Unosquare.FFME.Shared.MediaInfo)">
            <summary>
            Raises the media changing event.
            </summary>
            <param name="options">The options.</param>
            <param name="mediaInfo">The media information.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.PostMediaFailedEvent(System.Exception)">
            <summary>
            Raises the media failed event.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.PostMediaOpenedEvent(Unosquare.FFME.Shared.MediaInfo)">
            <summary>
            Raises the media opened event.
            </summary>
            <param name="mediaInfo">The media information.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.PostMediaReadyEvent">
            <summary>
            Raises the media ready event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.PostMediaClosedEvent">
            <summary>
            Raises the media closed event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.PostMediaChangedEvent(Unosquare.FFME.Shared.MediaInfo)">
            <summary>
            Raises the media changed event.
            </summary>
            <param name="mediaInfo">The media information.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.PostPositionChangedEvent(System.TimeSpan,System.TimeSpan)">
            <summary>
            Raises the position changed event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.PostMediaStateChangedEvent(System.Windows.Controls.MediaState,System.Windows.Controls.MediaState)">
            <summary>
            Raises the media state changed event.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.PostBufferingStartedEvent">
            <summary>
            Raises the buffering started event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.PostBufferingEndedEvent">
            <summary>
            Raises the buffering ended event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.PostSeekingStartedEvent">
            <summary>
            Raises the Seeking started event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.PostSeekingEndedEvent">
            <summary>
            Raises the Seeking ended event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.PostMediaEndedEvent">
            <summary>
            Raises the media ended event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.NotifyPropertyChangedEvent(System.String)">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers
            that support <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.LogEventStart(System.Windows.RoutedEvent)">
            <summary>
            Logs the start of an event
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="M:Unosquare.FFME.MediaElement.LogEventDone(System.Windows.RoutedEvent)">
            <summary>
            Logs the end of an event.
            </summary>
            <param name="e">The event.</param>
        </member>
        <member name="T:Unosquare.FFME.Platform.GuiTimer">
            <summary>
            Encapsulates different types of timers for different GUI context types
            into a single API. It provides one-at-a-time synchronized execution of the supplied
            Action. Call Dispose on an instance to stop the timer.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.FFME.Platform.GuiTimer.#ctor(Unosquare.FFME.Platform.GuiContextType,System.TimeSpan,System.Action,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Platform.GuiTimer" /> class.
            </summary>
            <param name="contextType">Type of the context.</param>
            <param name="interval">The interval.</param>
            <param name="callback">The callback.</param>
            <param name="disposeCallback">The dispose callback.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.GuiTimer.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Platform.GuiTimer"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:Unosquare.FFME.Platform.GuiTimer.ContextType">
            <summary>
            Gets the type of the context.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Platform.GuiTimer.Interval">
            <summary>
            Gets the interval.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Platform.GuiTimer.IsExecutingCycle">
            <summary>
            Gets a value indicating whether this instance is executing a cycle.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Platform.GuiTimer.WaitOne">
            <summary>
            Waits for one cycle to be completed.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Platform.GuiTimer.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.GuiTimer.RunTimerCycle(System.Object)">
            <summary>
            Runs the timer cycle.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.GuiTimer.CreateThreadingTimer">
            <summary>
            Creates the threading timer.
            </summary>
            <returns>The timer</returns>
        </member>
        <member name="M:Unosquare.FFME.Platform.GuiTimer.CreateDispatcherTimer">
            <summary>
            Creates the dispatcher timer.
            </summary>
            <returns>The timer</returns>
        </member>
        <member name="M:Unosquare.FFME.Platform.GuiTimer.CreateFormsTimer">
            <summary>
            Creates the forms timer.
            </summary>
            <returns>The timer</returns>
        </member>
        <member name="T:Unosquare.FFME.Platform.PropertyMapper">
            <summary>
            A helper class to map and process synchronization
            between media engine state properties and the MediaElement control.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Platform.PropertyMapper.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.Platform.PropertyMapper"/> class.
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">When a property exposed by the underlying MediaCore is not mapped.</exception>
        </member>
        <member name="P:Unosquare.FFME.Platform.PropertyMapper.MissingPropertyMappings">
            <summary>
            Contains the property names found in the Media Engine State type, but not found in the Media Element
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Platform.PropertyMapper.MediaElementDependencyProperties">
            <summary>
            Gets the media element dependency properties.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Platform.PropertyMapper.MediaElementNotificationProperties">
            <summary>
            Gets the media element notification properties.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Platform.PropertyMapper.MediaEngineStateProperties">
            <summary>
            Gets the media engine state properties.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Platform.PropertyMapper.DetectNotificationPropertyChanges(Unosquare.FFME.MediaElement,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Detects the properties that have changed since the last snapshot.
            </summary>
            <param name="m">The m.</param>
            <param name="lastSnapshot">The last snapshot.</param>
            <returns>A list of property names that have changed.</returns>
        </member>
        <member name="M:Unosquare.FFME.Platform.PropertyMapper.DetectDependencyPropertyChanges(Unosquare.FFME.MediaElement)">
            <summary>
            Detects which dependency properties are out of sync with the Media Engine State properties
            </summary>
            <param name="m">The m.</param>
            <returns>A dictionary of dependency properties to synchronize along with the engine values.</returns>
        </member>
        <member name="M:Unosquare.FFME.Platform.PropertyMapper.SnapshotNotifications(Unosquare.FFME.MediaElement,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Compiles the state into the target dictionary of property names and property values
            </summary>
            <param name="m">The m.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.PropertyMapper.RetrieveDependencyProperties(System.Type)">
            <summary>
            Retrieves the dependency properties.
            </summary>
            <param name="t">The t.</param>
            <returns>A list of dependency properties</returns>
        </member>
        <member name="M:Unosquare.FFME.Platform.PropertyMapper.RetrieveProperties(System.Type,System.Boolean)">
            <summary>
            Retrieves the properties.
            </summary>
            <param name="t">The t.</param>
            <param name="declaredOnly">if set to <c>true</c> [declared only].</param>
            <returns>A list of properties</returns>
        </member>
        <member name="T:Unosquare.FFME.Platform.GuiContextType">
            <summary>
            Enumerates GUI Context Types
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Platform.GuiContextType.None">
            <summary>
            An invalid GUI context (console applications)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Platform.GuiContextType.WPF">
            <summary>
            A WPF GUI context (i.e. has dispatcher and is not Windows Forms)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Platform.GuiContextType.WinForms">
            <summary>
            A Windows Forms GUI Context
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Platform.WindowsMediaConnector">
            <summary>
            The Media engine connector
            </summary>
            <seealso cref="T:Unosquare.FFME.Shared.IMediaConnector" />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsMediaConnector.#ctor(Unosquare.FFME.MediaElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Platform.WindowsMediaConnector"/> class.
            </summary>
            <param name="parent">The control.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsMediaConnector.OnBufferingEnded(Unosquare.FFME.MediaEngine)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsMediaConnector.OnBufferingStarted(Unosquare.FFME.MediaEngine)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsMediaConnector.OnMediaClosed(Unosquare.FFME.MediaEngine)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsMediaConnector.OnMediaEnded(Unosquare.FFME.MediaEngine)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsMediaConnector.OnMediaFailed(Unosquare.FFME.MediaEngine,System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsMediaConnector.OnMediaOpened(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.MediaInfo)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsMediaConnector.OnMediaOpening(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.MediaOptions,Unosquare.FFME.Shared.MediaInfo)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsMediaConnector.OnMediaChanging(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.MediaOptions,Unosquare.FFME.Shared.MediaInfo)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsMediaConnector.OnMediaChanged(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.MediaInfo)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsMediaConnector.OnMediaInitializing(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.ContainerConfiguration,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsMediaConnector.OnMessageLogged(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.MediaLogMessage)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsMediaConnector.OnSeekingEnded(Unosquare.FFME.MediaEngine)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsMediaConnector.OnSeekingStarted(Unosquare.FFME.MediaEngine)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsMediaConnector.OnPositionChanged(Unosquare.FFME.MediaEngine,System.TimeSpan,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsMediaConnector.OnMediaStateChanged(Unosquare.FFME.MediaEngine,Unosquare.FFME.Shared.PlaybackStatus,Unosquare.FFME.Shared.PlaybackStatus)">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Platform.WindowsNativeMethods">
            <summary>
            Windows-specific native methods
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsNativeMethods.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.Platform.WindowsNativeMethods"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsNativeMethods.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Unosquare.FFME.Platform.WindowsNativeMethods"/> class from being created.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Platform.WindowsNativeMethods.MemoryCopyStrategy">
            <summary>
            Enumerates memory copy methods
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Platform.WindowsNativeMethods.MemoryCopyStrategy.Native">
            <summary>
            The native
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Platform.WindowsNativeMethods.MemoryCopyStrategy.ParallelNative">
            <summary>
            The parallel native
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Platform.WindowsNativeMethods.MemoryCopyStrategy.Buffer">
            <summary>
            The buffer
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Platform.WindowsNativeMethods.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="P:Unosquare.FFME.Platform.WindowsNativeMethods.CopyStrategy">
            <summary>
            Gets or sets a value indicating whether Parallel Copy is enabled.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsNativeMethods.FillMemory(System.IntPtr,System.UInt32,System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsNativeMethods.ZeroMemory(System.IntPtr,System.Int32)">
            <summary>
            Zeroes the memory.
            </summary>
            <param name="destination">The destination.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsNativeMethods.SetDllDirectory(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsNativeMethods.CopyMemory(System.IntPtr,System.IntPtr,System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsNativeMethods.CopyMemoryParallel(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            An experimental method of copying large chunks of memory in parallel.
            Does not seem to have any advantages of the native CopyMemory direct call.
            </summary>
            <param name="targetAddress">The target address.</param>
            <param name="sourceAddress">The source address.</param>
            <param name="copyLength">Length of the copy.</param>
        </member>
        <member name="T:Unosquare.FFME.Platform.WindowsNativeMethods.NativeMethods">
            <summary>
            Contains Interop native methods
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsNativeMethods.NativeMethods.SetDllDirectory(System.String)">
            <summary>
            Sets the DLL directory in which external dependencies can be located.
            </summary>
            <param name="lpPathName">the full path.</param>
            <returns>True if set, false if not set</returns>
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsNativeMethods.NativeMethods.CopyMemory(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Fast pointer memory block copy function
            </summary>
            <param name="destination">The destination.</param>
            <param name="source">The source.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsNativeMethods.NativeMethods.FillMemory(System.IntPtr,System.UInt32,System.Byte)">
            <summary>
            Fills the memory.
            </summary>
            <param name="destination">The destination.</param>
            <param name="length">The length.</param>
            <param name="fill">The fill.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsNativeMethods.NativeMethods.ZeroMemory(System.IntPtr,System.Int32)">
            <summary>
            Zeroes the memory.
            </summary>
            <param name="dest">The dest.</param>
            <param name="length">The length.</param>
        </member>
        <member name="T:Unosquare.FFME.Platform.WindowsPlatform">
            <summary>
            Root for platform-specific implementations
            </summary>
            <seealso cref="T:Unosquare.FFME.Shared.IPlatform" />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsPlatform.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.Platform.WindowsPlatform"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsPlatform.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Unosquare.FFME.Platform.WindowsPlatform"/> class from being created.
            </summary>
            <exception cref="T:System.InvalidOperationException">Unable to get a valid GUI context.</exception>
        </member>
        <member name="P:Unosquare.FFME.Platform.WindowsPlatform.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>
            The instance.
            </value>
        </member>
        <member name="P:Unosquare.FFME.Platform.WindowsPlatform.NativeMethods">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Platform.WindowsPlatform.IsInDebugMode">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Platform.WindowsPlatform.IsInDesignTime">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsPlatform.CreateRenderer(Unosquare.FFME.Shared.MediaType,Unosquare.FFME.MediaEngine)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.WindowsPlatform.HandleFFmpegLogMessage(Unosquare.FFME.Shared.MediaLogMessage)">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Platform.GuiContext">
            <summary>
            Provides properties and methods for the
            WPF or Windows Forms GUI Threading context
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Platform.GuiContext.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.FFME.Platform.GuiContext"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Platform.GuiContext.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Unosquare.FFME.Platform.GuiContext"/> class from being created.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Platform.GuiContext.Current">
            <summary>
            Gets the current instance.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Platform.GuiContext.Type">
            <summary>
            Gets the type of the context.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Platform.GuiContext.Thread">
            <summary>
            Gets the thread on which this context was created
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Platform.GuiContext.IsInDesignTime">
            <summary>
            Gets a value indicating whether the context is in design time
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Platform.GuiContext.IsInDebugMode">
            <summary>
            Gets a value indicating whether a debugger was attached when the context initialized.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Platform.GuiContext.IsValid">
            <summary>
            Returns true if this context is valid.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Platform.GuiContext.ThreadContext">
            <summary>
            Gets the synchronization context.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Platform.GuiContext.GuiDispatcher">
            <summary>
            Gets the GUI dispatcher. Only valid for WPF contexts
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Platform.GuiContext.InvokeAsync(System.Windows.Threading.DispatcherPriority,System.Action)">
            <summary>
            Invokes a task on the GUI thread
            </summary>
            <param name="priority">The priority.</param>
            <param name="callback">The callback.</param>
            <returns>The awaitable task</returns>
        </member>
        <member name="M:Unosquare.FFME.Platform.GuiContext.InvokeAsync(System.Action)">
            <summary>
            Invokes a task on the GUI thread
            </summary>
            <param name="callback">The callback.</param>
            <returns>The awaitable task</returns>
        </member>
        <member name="M:Unosquare.FFME.Platform.GuiContext.EnqueueInvoke(System.Action)">
            <summary>
            Invokes a task on the GUI thread
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.GuiContext.EnqueueInvoke(System.Windows.Threading.DispatcherPriority,System.Action)">
            <summary>
            Invokes a task on the GUI thread
            </summary>
            <param name="priority">The priority.</param>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.GuiContext.InvokeAsyncInternal(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object[])">
            <summary>
            Invokes a task on the GUI thread
            </summary>
            <param name="priority">The priority.</param>
            <param name="callback">The callback.</param>
            <param name="arguments">The arguments.</param>
            <returns>The awaitable task.</returns>
        </member>
        <member name="T:Unosquare.FFME.Platform.SoundTouch">
            <inheritdoc />
            <summary>
            SoundTouch audio processing library wrapper (SoundTouch.cs)
            Original code by
            Copyright (c) Olli Parviainen
            http://www.surina.net/soundtouch
            LGPL License
            Modified Code by:
            Mario Di Vece
            Changes:
            Set-prefixed methods to property setters
            Native wrappers to NativeMethods class name
            Adding enum with settings as defined in the header file
            Settings getters and setters as indexers
            Implemented Dispose pattern correctly.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Platform.SoundTouch"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Unosquare.FFME.Platform.SoundTouch"/> class.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Platform.SoundTouch.Setting">
            <summary>
            Settings as defined in SoundTouch.h
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Platform.SoundTouch.Setting.UseAntiAliasFilter">
            <summary>
            Enable/disable anti-alias filter in pitch transposer (0 = disable)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Platform.SoundTouch.Setting.AntiAliasFilterLength">
            <summary>
            Pitch transposer anti-alias filter length (8 .. 128 taps, default = 32)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Platform.SoundTouch.Setting.UseQuickSeek">
            <summary>
            Enable/disable quick seeking algorithm in tempo changer routine
            (enabling quick seeking lowers CPU utilization but causes a minor sound
             quality compromising)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Platform.SoundTouch.Setting.SequenceMilliseconds">
            <summary>
            Time-stretch algorithm single processing sequence length in milliseconds. This determines
            to how long sequences the original sound is chopped in the time-stretch algorithm.
            See "STTypes.h" or README for more information.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Platform.SoundTouch.Setting.SeekWindowMilliseconds">
            <summary>
            Time-stretch algorithm seeking window length in milliseconds for algorithm that finds the
            best possible overlapping location. This determines from how wide window the algorithm
            may look for an optimal joining location when mixing the sound sequences back together.
            See "STTypes.h" or README for more information.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Platform.SoundTouch.Setting.OverlapMilliseconds">
            <summary>
            Time-stretch algorithm overlap length in milliseconds. When the chopped sound sequences
            are mixed back together, to form a continuous sound stream, this parameter defines over
            how long period the two consecutive sequences are let to overlap each other.
            See "STTypes.h" or README for more information.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Platform.SoundTouch.Setting.NominalInputSequence">
             <summary>
             Call "getSetting" with this ID to query processing sequence size in samples.
             This value gives approximate value of how many input samples you'll need to
             feed into SoundTouch after initial buffering to get out a new batch of
             output samples.
            
             This value does not include initial buffering at beginning of a new processing
             stream, use SETTING_INITIAL_LATENCY to get the initial buffering size.
            
             Notices:
             - This is read-only parameter, i.e. setSetting ignores this parameter
             - This parameter value is not constant but change depending on
               tempo/pitch/rate/sample rate settings.
             </summary>
        </member>
        <member name="F:Unosquare.FFME.Platform.SoundTouch.Setting.NominalOutputSequence">
             <summary>
             Call "getSetting" with this ID to query nominal average processing output
             size in samples. This value tells approximate value how many output samples
             SoundTouch outputs once it does DSP processing run for a batch of input samples.
            
             Notices:
             - This is read-only parameter, i.e. setSetting ignores this parameter
             - This parameter value is not constant but change depending on
               tempo/pitch/rate/sample rate settings.
             </summary>
        </member>
        <member name="F:Unosquare.FFME.Platform.SoundTouch.Setting.InitialLatency">
             <summary>
             Call "getSetting" with this ID to query initial processing latency, i.e.
             approx. how many samples you'll need to enter to SoundTouch pipeline before
             you can expect to get first batch of ready output samples out.
            
             After the first output batch, you can then expect to get approx.
             SETTING_NOMINAL_OUTPUT_SEQUENCE ready samples out for every
             SETTING_NOMINAL_INPUT_SEQUENCE samples that you enter into SoundTouch.
            
             Example:
                 processing with parameter -tempo=5
                 => initial latency = 5509 samples
                    input sequence  = 4167 samples
                    output sequence = 3969 samples
            
             Accordingly, you can expect to feed in approx. 5509 samples at beginning of
             the stream, and then you'll get out the first 3969 samples. After that, for
             every approx. 4167 samples that you'll put in, you'll receive again approx.
             3969 samples out.
            
             This also means that average latency during stream processing is
             INITIAL_LATENCY-OUTPUT_SEQUENCE/2, in the above example case 5509-3969/2
             = 3524 samples
            
             Notices:
             - This is read-only parameter, i.e. setSetting ignores this parameter
             - This parameter value is not constant but change depending on
               tempo/pitch/rate/sample rate settings.
             </summary>
        </member>
        <member name="P:Unosquare.FFME.Platform.SoundTouch.Version">
            <summary>
            Get SoundTouch version string
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Platform.SoundTouch.IsAvailable">
            <summary>
            Gets a value indicating whether the SoundTouch Library (dll) is available
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Platform.SoundTouch.AvailableSampleCount">
            <summary>
            Returns number of processed samples currently available in SoundTouch for immediate output.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Platform.SoundTouch.UnprocessedSampleCount">
            <summary>
            Returns number of samples currently unprocessed in SoundTouch internal buffer
            </summary>
            <returns>Number of sample frames</returns>
        </member>
        <member name="P:Unosquare.FFME.Platform.SoundTouch.IsEmpty">
            <summary>
            Check if there aren't any samples available for outputting.
            </summary>
            <returns>nonzero if there aren't any samples available for outputting</returns>
        </member>
        <member name="P:Unosquare.FFME.Platform.SoundTouch.Item(Unosquare.FFME.Platform.SoundTouch.Setting)">
            <summary>
            Changes or gets a setting controlling the processing system behaviour. See the
            'SETTING_...' defines for available setting ID's.
            </summary>
            <value>
            The <see cref="T:System.Int32"/>.
            </value>
            <param name="settingId">The setting identifier.</param>
            <returns>The value of the setting</returns>
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.SetSampleRate(System.UInt32)">
            <summary>
            Sets sample rate.
            Value: Sample rate, e.g. 44100
            </summary>
            <param name="value">The sample rate value.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.SetChannels(System.UInt32)">
            <summary>
            Sets the number of channels
            Value: 1 = mono, 2 = stereo, n = multichannel
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.SetTempo(System.Single)">
            <summary>
            Sets new tempo control value.
            Value: Tempo setting. Normal tempo = 1.0, smaller values
            represent slower tempo, larger faster tempo.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.SetTempoChange(System.Single)">
            <summary>
            Sets new tempo control value as a difference in percents compared
            to the original tempo (-50 .. +100 %);
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.SetRate(System.Single)">
            <summary>
            Sets new rate control value.
            Rate setting. Normal rate = 1.0, smaller values
            represent slower rate, larger faster rate.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.SetRateChange(System.Single)">
            <summary>
            Sets new rate control value as a difference in percents compared
            to the original rate (-50 .. +100 %);
            Value: Rate setting is in %
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.SetPitch(System.Single)">
            <summary>
            Sets new pitch control value.
            Value: Pitch setting. Original pitch = 1.0, smaller values
            represent lower pitches, larger values higher pitch.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.SetPitchOctaves(System.Single)">
            <summary>
            Sets pitch change in octaves compared to the original pitch
            (-1.00 .. +1.00 for +- one octave);
            Value: Pitch setting in octaves
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.SetPitchSemiTones(System.Single)">
            <summary>
            Sets pitch change in semi-tones compared to the original pitch
            (-12 .. +12 for +- one octave);
            Value: Pitch setting in semitones
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.Flush">
            <summary>
            Flushes the last samples from the processing pipeline to the output.
            Clears also the internal processing buffers.
            Note: This function is meant for extracting the last samples of a sound
            stream. This function may introduce additional blank samples in the end
            of the sound stream, and thus it's not recommended to call this function
            in the middle of a sound stream.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.Clear">
            <summary>
            Clears all the samples in the object's output and internal processing
            buffers.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.PutSamples(System.Single[],System.UInt32)">
            <summary>
            Adds 'numSamples' pcs of samples from the 'samples' memory position into
            the input of the object. Notice that sample rate _has_to_ be set before
            calling this function, otherwise throws a runtime_error exception.
            </summary>
            <param name="samples">Sample buffer to input</param>
            <param name="numSamples">Number of sample frames in buffer. Notice
            that in case of multi-channel sound a single sample frame contains
            data for all channels</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.PutSamplesI16(System.Int16[],System.UInt32)">
            <summary>
            int16 version of putSamples(): This accept int16 (i.e. short) sample data
            and internally converts it to float format before processing
            </summary>
            <param name="samples">Sample input buffer.</param>
            <param name="numSamples">Number of sample frames in buffer. Notice
            that in case of multi-channel sound a single
            sample frame contains data for all channels.</param>
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.ReceiveSamples(System.Single[],System.UInt32)">
            <summary>
            Receive processed samples from the processor.
            </summary>
            <param name="outBuffer">Buffer where to copy output samples</param>
            <param name="maxSamples">Max number of sample frames to receive</param>
            <returns>The number of samples received</returns>
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.ReceiveSamplesI16(System.Int16[],System.UInt32)">
            <summary>
            int16 version of receiveSamples(): This converts internal float samples
            into int16 (i.e. short) return data type
            </summary>
            <param name="outBuffer">Buffer where to copy output samples.</param>
            <param name="maxSamples">How many samples to receive at max.</param>
            <returns>Number of received sample frames</returns>
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Platform.SoundTouch.DisposeInternal">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Platform.SoundTouch.NativeMethods">
            <summary>
            Provides direct access to mapped DLL methods
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Playlists.AttributeSet">
            <summary>
            Represents a dictionary of attributes (key-value pairs)
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Playlists.AttributeSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Playlists.AttributeSet"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Playlists.AttributeSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Playlists.AttributeSet"/> class.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.AttributeSet.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Playlists.AttributeSet.GetEntryValue(System.String)">
            <summary>
            Gets the entry value safely.
            </summary>
            <param name="entryKey">The entry key.</param>
            <returns>The entry value or null</returns>
        </member>
        <member name="M:Unosquare.FFME.Playlists.AttributeSet.SetEntryValue(System.String,System.String)">
            <summary>
            Sets the entry value and returns true if the value changes
            </summary>
            <param name="entryKey">The entry key.</param>
            <param name="value">The value.</param>
            <returns>True if the property changed, false otherwise.</returns>
        </member>
        <member name="T:Unosquare.FFME.Playlists.Playlist`1">
            <inheritdoc cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>
            <summary>
            Represents an observable collection of playlist entries.
            General guidelines taken from http://xmtvplayer.com/build-m3u-file
            </summary>
            <typeparam name="T">The type of playlist items</typeparam>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Playlists.Playlist`1"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Playlists.Playlist`1"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Unosquare.FFME.Playlists.Playlist`1.Name">
            <summary>
            Gets or sets the name of this playlist.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Playlists.Playlist`1.Attributes">
            <summary>
            Gets the extended attributes key-value pairs.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Open(System.String)">
            <summary>
            Loads the playlist from the specified path, assuming UTF8 encoding
            </summary>
            <param name="filePath">The text.</param>
            <returns>The loaded playlist</returns>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Open(System.IO.Stream)">
            <summary>
            Loads the playlist from the specified stream as UTF8.
            </summary>
            <param name="stream">The stream.</param>
            <returns>The loaded playlist</returns>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Open(System.String,System.Text.Encoding)">
            <summary>
            Loads the playlist from the specified file path.
            </summary>
            <param name="path">The path.</param>
            <param name="encoding">The encoding.</param>
            <returns>
            The loaded playlist
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Open(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the playlist from the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
            <returns>The loaded playlist.</returns>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Load(System.String)">
            <summary>
            Loads from the specified file path.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Load(System.String,System.Text.Encoding)">
            <summary>
            Loads from the specified file path.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Load(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the playlist data into this playlist
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Save(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the playlist to the specified stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Save(System.IO.Stream)">
            <summary>
            Saves the playlist to the specified stream with UTF8 encoding.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Save(System.String)">
            <summary>
            Saves the playlist to the specified path in UTF8 encoding.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.NotifyAttributeChangedFor(System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Add(System.String,System.TimeSpan,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Adds an entry to the playlist.
            </summary>
            <param name="title">The title.</param>
            <param name="duration">The duration.</param>
            <param name="url">The URL.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.Playlist`1.Add(System.String,System.TimeSpan,System.String)">
            <summary>
            Adds an entry to the playlist without extended attributes.
            </summary>
            <param name="title">The title.</param>
            <param name="duration">The duration.</param>
            <param name="url">The URL.</param>
        </member>
        <member name="T:Unosquare.FFME.Playlists.Playlist">
            <summary>
            A standard Playlist class with regular PlaylistEntry items
            </summary>
            <seealso cref="T:System.Collections.ObjectModel.ObservableCollection`1" />
        </member>
        <member name="T:Unosquare.FFME.Playlists.PlaylistEntry">
            <summary>
            Represents a generic playlist entry
            </summary>
        </member>
        <member name="E:Unosquare.FFME.Playlists.PlaylistEntry.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Playlists.PlaylistEntry.MediaUrl">
            <summary>
            Gets or sets the media URL.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Playlists.PlaylistEntry.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Playlists.PlaylistEntry.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Playlists.PlaylistEntry.Attributes">
            <summary>
            Gets the extended attributes.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Playlists.PlaylistEntry.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks if a property already matches a desired value.  Sets the property and
            notifies listeners only when necessary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a property with both getter and setter.</param>
            <param name="value">Desired value for the property.</param>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName.</param>
            <returns>True if the value was changed, false if the existing value matched the
            desired value.</returns>
        </member>
        <member name="M:Unosquare.FFME.Playlists.PlaylistEntry.OnPropertyChanged(System.String)">
            <summary>
            Notifies listeners that a property value has changed.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners.  This
            value is optional and can be provided automatically when invoked from compilers
            that support <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
        </member>
        <member name="T:Unosquare.FFME.Playlists.PlaylistExtensions">
            <summary>
            Helper methods for parsing m3u8 playlists
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Playlists.PlaylistExtensions.ParseHeaderLine``1(Unosquare.FFME.Playlists.Playlist{``0},System.String)">
            <summary>
            Parses the header line of a playlist.
            </summary>
            <typeparam name="T">The type of playlist items</typeparam>
            <param name="playlist">The playlist to parse data attributes into.</param>
            <param name="line">The line.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.PlaylistExtensions.BeginExtendedInfoLine(Unosquare.FFME.Playlists.PlaylistEntry,System.String)">
            <summary>
            Parses the extended information line into a Playlist entry.
            </summary>
            <param name="entry">The playlist entry item to parse data into.</param>
            <param name="line">The line of text.</param>
        </member>
        <member name="M:Unosquare.FFME.Playlists.PlaylistExtensions.ParseAttributes(System.String)">
            <summary>
            Parses the attributes.
            </summary>
            <param name="headerData">The header data.</param>
            <returns>a list of attributes</returns>
        </member>
        <member name="M:Unosquare.FFME.Playlists.PlaylistExtensions.ParseNextAttribute(System.String,Unosquare.FFME.Playlists.PlaylistExtensions.ParsedAttribute)">
            <summary>
            Parses the next attribute.
            </summary>
            <param name="headerData">The header data.</param>
            <param name="lastAttribute">The last attribute.</param>
            <returns>THe parsed attribute</returns>
        </member>
        <member name="T:Unosquare.FFME.Playlists.PlaylistExtensions.ParsedAttribute">
            <summary>
            A POCO class to hold parsed attributes
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.AudioDeviceInfo`1">
            <summary>
            Represents a device identifier
            </summary>
            <typeparam name="T">The type of the device identifier</typeparam>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioDeviceInfo`1.#ctor(`0,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.AudioDeviceInfo`1" /> class.
            </summary>
            <param name="deviceId">The device identifier.</param>
            <param name="name">The name.</param>
            <param name="provider">The provider.</param>
            <param name="isDefault">if set to <c>true</c> [is default].</param>
            <param name="tag">The tag.</param>
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioDeviceInfo`1.DeviceId">
            <summary>
            Gets the device identifier.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioDeviceInfo`1.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioDeviceInfo`1.Provider">
            <summary>
            Gets the provider.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioDeviceInfo`1.Tag">
            <summary>
            Gets the tag.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioDeviceInfo`1.IsDefault">
            <summary>
            Gets a value indicating whether this device is the default.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioDeviceInfo`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Unosquare.FFME.Rendering.ClosedCaptionsBuffer">
            <summary>
            Provides a Closed Captions packet buffer and state manager
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.ColumnCount">
            <summary>
            The column count of the character grid
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.RowCount">
            <summary>
            The row count of the character grid
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.MaxBufferLength">
            <summary>
            The maximum length of the individual packet buffers
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.DefaultBaseRowIndex">
            <summary>
            The default base row is row 11 (index 10)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.DefaultFieldChannel">
            <summary>
            To keep track of previous data channel
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.DefaultScrollSize">
            <summary>
            The scroll mode (Roll Up 2/3/4) modes
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.DefaultStateMode">
            <summary>
            The default parser state
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.TimeoutSeconds">
            <summary>
            The number of seconds before a CC timeout occurs
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.PacketBuffer">
            <summary>
            The linear, non-demuxed packet buffer
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.ChannelPacketBuffer">
            <summary>
            The independent channel packet buffers
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.SyncLock">
            <summary>
            Prevents Writing and resetting at the same time, causing the keys to become
            invalid when processing packets.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.ClosedCaptionsBuffer"/> class.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.ParserStateMode">
            <summary>
            Defines the different state parsing modes
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.ParserStateMode.None">
            <summary>
            When no state has been detected yet
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.ParserStateMode.Scrolling">
            <summary>
            The direct CC display mode
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.ParserStateMode.Buffered">
            <summary>
            The buffered text display mode
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.ParserStateMode.Data">
            <summary>
            The non-display data mode
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.ParserStateMode.XDS">
            <summary>
            The XDS, non-display mode
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.State">
            <summary>
            Provides access to the state of each of the character cells in the grid
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.ScrollBaseRowIndex">
            <summary>
            Gets the index of the scroll base row.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.ScrollSize">
            <summary>
            Gets the size of the scroll.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.IsUnderlined">
            <summary>
            Gets a value indicating whether the current and following
            caption text packets are underlined
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.IsItalics">
            <summary>
            Gets a value indicating whether the current and following
            caption text packets are italicized
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.StateMode">
            <summary>
            Gets a value indicating whether this instance is in buffered mode.
            </summary>
            <value>
              <c>true</c> if this instance is in buffered mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.CursorRowIndex">
            <summary>
            Gets the current row index position of the cursor
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.CursorColumnIndex">
            <summary>
            Gets the current column index position of the cursor
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.CurrentPacket">
            <summary>
            Gets the currently active packet.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.WriteTag">
            <summary>
            Gets the last start time position of the video block containing the CC packets.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.Channel">
            <summary>
            Gets currently active CC channel.
            Changing the channel resets the entire state
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.Field1LastChannel">
            <summary>
            Gets the last channel specified by Field with parity 1.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.Field2LastChannel">
            <summary>
            Gets the last channel specified by Field with parity 2.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.LastReceiveTime">
            <summary>
            Gets the last receive time of the current channel.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.SetText(System.Int32,System.String)">
            <summary>
            Sets the specified text on the given line.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.Write(Unosquare.FFME.Shared.VideoBlock,Unosquare.FFME.MediaEngine)">
            <summary>
            Writes the packets and demuxes them into its independent channel buffers
            </summary>
            <param name="currentBlock">The current block.</param>
            <param name="mediaCore">The media core.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.Reset">
            <summary>
            Resets all the state variables and internal buffers
            to their default values.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.UpdateState(Unosquare.FFME.ClosedCaptions.CaptionsChannel,System.TimeSpan)">
            <summary>
            Updates the state using the packets that were demuxed into the specified channel.
            This can be called outside the GUI thread.
            </summary>
            <param name="channel">The channel.</param>
            <param name="clockPosition">The clock position.</param>
            <returns>A boolean to determine if the display needs repainting.</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.TrimBuffers">
            <summary>
            Trims all the packet buffers to their maximum allowable length.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ClosedCaptionsBuffer.TrimBuffer(System.Collections.Generic.IDictionary{System.Int64,Unosquare.FFME.ClosedCaptions.ClosedCaptionPacket})">
            <summary>
            Trims the packet buffer to the maximum allowable length
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="T:Unosquare.FFME.Rendering.ClosedCaptionsCell">
            <summary>
            Represents a grid cell state containing a Display and a back-buffer
            of a character and its properties.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ClosedCaptionsCell.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.ClosedCaptionsCell" /> class.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="columnIndex">Index of the column.</param>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsCell.RowIndex">
            <summary>
            Gets the index of the row this cell belongs to.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsCell.ColumnIndex">
            <summary>
            Gets the index of the column this cell belongs to.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsCell.Display">
            <summary>
            Gets or sets the character.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsCell.Buffer">
            <summary>
            Gets or sets the buffered character.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ClosedCaptionsCell.DisplayBuffer">
            <summary>
            Copies the buffer content on to the display content
            and clears the buffer content.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ClosedCaptionsCell.Reset">
            <summary>
            Resets the entire state and contents of this cell
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.ClosedCaptionsCellState">
            <summary>
            Contains single-character text and its attributes
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsCellState.Text">
            <summary>
            Gets the character as a string.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsCellState.Character">
            <summary>
            Gets or sets the character.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsCellState.Opacity">
            <summary>
            Gets or sets the opacity (from 0.0 to 1.0 opaque).
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsCellState.Foreground">
            <summary>
            Gets or sets the foreground text color.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsCellState.Background">
            <summary>
            Gets or sets the background color.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsCellState.IsUnderlined">
            <summary>
            Gets or sets a value indicating whether this instance is underline.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ClosedCaptionsCellState.IsItalics">
            <summary>
            Gets or sets a value indicating whether this instance is italics.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ClosedCaptionsCellState.CopyFrom(Unosquare.FFME.Rendering.ClosedCaptionsCellState)">
            <summary>
            Copies text and attributes from another cell state content.
            </summary>
            <param name="cell">The cell.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ClosedCaptionsCellState.Clear">
            <summary>
            Clears the text and its attributes.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.ClosedCaptionsControl">
            <summary>
            A control that renders Closed Captions.
            </summary>
            <seealso cref="T:System.Windows.Controls.Viewbox" />
        </member>
        <member name="M:Unosquare.FFME.Rendering.ClosedCaptionsControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.ClosedCaptionsControl"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ClosedCaptionsControl.SendPackets(Unosquare.FFME.Shared.VideoBlock,Unosquare.FFME.MediaEngine)">
            <summary>
            Sends the packets to the CC packet buffer for state management.
            </summary>
            <param name="currentBlock">The current block.</param>
            <param name="mediaCore">The media core.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ClosedCaptionsControl.Render(Unosquare.FFME.ClosedCaptions.CaptionsChannel,System.TimeSpan)">
            <summary>
            Updates the CC Packet State Buffer and Renders it.
            </summary>
            <param name="channel">The channel.</param>
            <param name="clockPosition">The clock position.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ClosedCaptionsControl.Reset">
            <summary>
            Resets the CC Packet State Buffer and Renders it.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ClosedCaptionsControl.InitializeComponent">
            <summary>
            Initializes the component.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ClosedCaptionsControl.PaintBuffer">
            <summary>
            Takes the current state of the CC packet buffer and projects the visual properties
            on to the CC visual grid of characters
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.ImageHost">
            <summary>
            Implements an Image control that is hosted on its own independent dispatcher
            but maintains composability with the main UI.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ImageHost.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.ImageHost"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ImageHost.Source">
            <summary>
            Gets or sets the source.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ImageHost.Stretch">
            <summary>
            Gets or sets the stretch.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ImageHost.StretchDirection">
            <summary>
            Gets or sets the stretch direction.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ImageHost.CreateHostedElement">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Rendering.ElementHostBase`1">
            <summary>
            Provides a base class for a framework element that is capable of
            being hosted on its own dispatcher. This allows for multi threaded
            UI composition.
            </summary>
            <typeparam name="T">The contained framework element</typeparam>
            <seealso cref="T:System.Windows.FrameworkElement" />
        </member>
        <member name="F:Unosquare.FFME.Rendering.ElementHostBase`1.ElementLoadedEvent">
            <summary>
            The thread separated control loaded event
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ElementHostBase`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.ElementHostBase`1"/> class.
            </summary>
            <param name="hasOwnDispatcher">if set to <c>true</c>, it creates its own separate thread and associated dispatcher</param>
        </member>
        <member name="E:Unosquare.FFME.Rendering.ElementHostBase`1.ElementLoaded">
            <summary>
            Occurs when the thread separated control loads.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ElementHostBase`1.HasOwnDispatcher">
            <summary>
            Gets a value indicating whether this instance is running on its own dispatcher.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ElementHostBase`1.ElementDispatcher">
            <summary>
            Gets the dispatcher this element is hosted on.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ElementHostBase`1.Element">
            <summary>
            Provides access to the framework element hosted within this element
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ElementHostBase`1.AvailableSize">
            <summary>
            Gets the available render area
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ElementHostBase`1.Host">
            <summary>
            Gets the host visual. This becomes the root element of this control
            that glues the presentation source running on a different dispatcher
            to the main UI dispatcher.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ElementHostBase`1.VisualChildrenCount">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.ElementHostBase`1.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.ElementHostBase`1.PresentationSource">
            <summary>
            Gets or sets the presentation source which roots the visual elements on
            the independent dispatcher.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ElementHostBase`1.InvokeAsync(System.Action)">
            <summary>
            Invokes the specified action on the hosted visual element's dispatcher.
            </summary>
            <param name="action">The action.</param>
            <returns>The awaitable operation</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ElementHostBase`1.InvokeAsync(System.Windows.Threading.DispatcherPriority,System.Action)">
            <summary>
            Invokes the specified action on the hosted visual element's dispatcher.
            </summary>
            <param name="priority">The priority.</param>
            <param name="action">The action.</param>
            <returns>The awaitable operation</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ElementHostBase`1.OnInitialized(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.ElementHostBase`1.GetVisualChild(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.ElementHostBase`1.CreateHostedElement">
            <summary>
            Creates the element contained by this host
            </summary>
            <returns>An instance of the framework element to be hosted</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ElementHostBase`1.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.ElementHostBase`1.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.ElementHostBase`1.HandleUnloadedEvent(System.Object,System.EventArgs)">
            <summary>
            Handles the unloaded event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ElementHostBase`1.GetElementProperty``1(System.Windows.DependencyProperty)">
            <summary>
            Gets the element property.
            </summary>
            <typeparam name="V">The property type</typeparam>
            <param name="property">The property.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ElementHostBase`1.SetElementProperty``1(System.Windows.DependencyProperty,``0)">
            <summary>
            Sets the element property.
            </summary>
            <typeparam name="V">The value type</typeparam>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.ElementHostBase`1.HandleLoadedEvent(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the loaded event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Unosquare.FFME.Rendering.ElementHostBase`1.HostedPresentationSource">
            <summary>
            A presentation source class to root a Visual (a HostVisual) on to its own visual tree
            </summary>
            <seealso cref="T:System.Windows.FrameworkElement" />
        </member>
        <member name="M:Unosquare.FFME.Rendering.ElementHostBase`1.HostedPresentationSource.#ctor(System.Windows.Media.HostVisual)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.ElementHostBase`1.HostedPresentationSource"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="P:Unosquare.FFME.Rendering.ElementHostBase`1.HostedPresentationSource.RootVisual">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.ElementHostBase`1.HostedPresentationSource.IsDisposed">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.ElementHostBase`1.HostedPresentationSource.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.ElementHostBase`1.HostedPresentationSource.GetCompositionTargetCore">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.ElementHostBase`1.HostedPresentationSource.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.FFME.Rendering.RendererOptions">
            <summary>
            Provides access to various internal media renderer options
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.RendererOptions.DefaultDirectSoundDevice">
            <summary>
            The default DirectSound device
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.RendererOptions.DefaultLegacyAudioDevice">
            <summary>
            The default Windows MME Legacy Audio Device
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.RendererOptions.AudioDisableSync">
            <summary>
            By default, the audio renderer will skip or wait for samples to
            synchronize to video.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.RendererOptions.DirectSoundDevice">
            <summary>
            Gets or sets the DirectSound device identifier. It is the default playback device by default.
            Only valid if <see cref="P:Unosquare.FFME.Rendering.RendererOptions.UseLegacyAudioOut"/> is set to false which is the default.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.RendererOptions.LegacyAudioDevice">
            <summary>
            Gets or sets the wave device identifier. -1 is the default playback device.
            Only valid if <see cref="P:Unosquare.FFME.Rendering.RendererOptions.UseLegacyAudioOut"/> is set to true.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.RendererOptions.UseLegacyAudioOut">
            <summary>
            Gets or sets a value indicating whether the legacy MME (WinMM) should be used
            as an audio output device as opposed to DirectSound. This defaults to false.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.RendererOptions.EnumerateDirectSoundDevices">
            <summary>
            Enumerates the DirectSound devices.
            </summary>
            <returns>The available DirectSound devices</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.RendererOptions.EnumerateLegacyAudioDevices">
            <summary>
            Enumerates the (Legacy) Windows Multimedia Extensions devices.
            </summary>
            <returns>The available MME devices</returns>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.DirectSoundDeviceInfo">
            <summary>
            Class for enumerating DirectSound devices
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.DirectSoundDeviceInfo.Guid">
            <summary>
            The device identifier
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.DirectSoundDeviceInfo.Description">
            <summary>
            Device description
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.DirectSoundDeviceInfo.ModuleName">
            <summary>
            Device module name
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer">
            <summary>
            NativeDirectSoundOut using DirectSound COM interop.
            Contact author: Alexandre Mutel - alexandre_mutel at yahoo.fr
            Modified by: Graham "Gee" Plumb
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.DefaultPlaybackDeviceId">
            <summary>
            DirectSound default playback device GUID
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.#ctor(Unosquare.FFME.Rendering.AudioRenderer,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer" /> class.
            (40ms seems to work under Vista).
            </summary>
            <param name="renderer">The renderer.</param>
            <param name="deviceId">Selected device</param>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.Unosquare#FFME#Shared#ILoggingSource#LoggingHandler">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.Renderer">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.PlaybackState">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.IsRunning">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.DesiredLatency">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
              <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.EnumerateDevices">
            <summary>
            Gets the DirectSound output devices in the system
            </summary>
            <returns>The available DirectSound devices</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.Start">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.Clear">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.EnumerateDevicesCallback(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Enumerates the devices.
            </summary>
            <param name="deviceGuidPtr">The device unique identifier pointer.</param>
            <param name="descriptionPtr">The description string pointer.</param>
            <param name="modulePtr">The module string pointer.</param>
            <param name="contextPtr">The context pointer.</param>
            <returns>The devices</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.CreatePositionNotification(System.Threading.WaitHandle,System.UInt32)">
            <summary>
            Creates a DirectSound position notification.
            </summary>
            <param name="eventHandle">The event handle.</param>
            <param name="offset">The offset.</param>
            <returns>A DirectSound Position Notification</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.InitializeDirectSound">
            <summary>
            Initializes the direct sound.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.PerformContinuousPlayback">
            <summary>
            Processes the samples in a separate thread.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.IsBufferLost">
            <summary>
            Determines whether the SecondaryBuffer is lost.
            </summary>
            <returns>
            <c>true</c> if [is buffer lost]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.MillisToBytes(System.Int32)">
            <summary>
            Convert ms to bytes size according to WaveFormat
            </summary>
            <param name="millis">The ms</param>
            <returns>number of bytes</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.ClearBackBuffer">
            <summary>
            Clean up the SecondaryBuffer
            </summary>
            <remarks>
            <para>
            In DirectSound, when playback is started,
            the rest of the sound that was played last time is played back as noise.
            This happens even if the secondary buffer is completely silenced,
            so it seems that the buffer in the primary buffer or higher is not cleared.
            </para>
            <para>
            To solve this problem fill the secondary buffer with silence data when stop playback.
            </para>
            </remarks>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.FeedBackBuffer(System.Int32)">
            <summary>
            Feeds the SecondaryBuffer with the WaveStream
            </summary>
            <param name="bytesToCopy">number of bytes to feed</param>
            <returns>The number of bytes that were read</returns>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.DirectSound.DefaultCaptureDeviceId">
            <summary>
            DirectSound default capture device GUID
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.DirectSound.DefaultVoicePlaybackDeviceId">
            <summary>
            DirectSound default device for voice playback
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.DirectSound.DefaultVoiceCaptureDeviceId">
            <summary>
            DirectSound default device for voice capture
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.DirectSound.EnumerateDevicesDelegate">
            <summary>
            The DSEnumCallback function is an application-defined callback function that enumerates the DirectSound drivers.
            The system calls this function in response to the application's call to the DirectSoundEnumerate or DirectSoundCaptureEnumerate function.
            </summary>
            <param name="deviceGuidPtr">Address of the GUID that identifies the device being enumerated, or NULL for the primary device. This value can be passed to the DirectSoundCreate8 or DirectSoundCaptureCreate8 function to create a device object for that driver. </param>
            <param name="descriptionPtr">Address of a null-terminated string that provides a textual description of the DirectSound device. </param>
            <param name="modulePtr">Address of a null-terminated string that specifies the module name of the DirectSound driver corresponding to this device. </param>
            <param name="contextPtr">Address of application-defined data. This is the pointer passed to DirectSoundEnumerate or DirectSoundCaptureEnumerate as the lpContext parameter. </param>
            <returns>Returns TRUE to continue enumerating drivers, or FALSE to stop.</returns>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.DirectSound.IDirectSound">
            <summary>
            IDirectSound interface
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.DirectSound.IDirectSoundBuffer">
            <summary>
            IDirectSoundBuffer interface
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.DirectSound.IDirectSoundNotify">
            <summary>
            IDirectSoundNotify interface
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.DirectSound.DirectSoundBufferPositionNotify.Equals(Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.DirectSound.DirectSoundBufferPositionNotify)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.NativeMethods.DirectSoundCreate(System.Guid@,Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.DirectSound.IDirectSound@,System.IntPtr)">
            <summary>
            Instantiate DirectSound from the DLL
            </summary>
            <param name="deviceGuid">The GUID.</param>
            <param name="directSound">The direct sound.</param>
            <param name="pUnkOuter">The p unk outer.</param>
            <returns>The result code</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.NativeMethods.DirectSoundEnumerateA(Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.DirectSound.EnumerateDevicesDelegate,System.IntPtr)">
            <summary>
            The DirectSoundEnumerate function enumerates the DirectSound drivers installed in the system.
            </summary>
            <param name="lpDSEnumCallback">callback function</param>
            <param name="lpContext">User context</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.DirectSoundPlayer.NativeMethods.GetDesktopWindow">
            <summary>
            Gets the HANDLE of the desktop window.
            </summary>
            <returns>HANDLE of the Desktop window</returns>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.IWavePlayer">
            <summary>
            Represents the interface to a device that can play a Wave data
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.IWavePlayer.PlaybackState">
            <summary>
            Current playback state
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.IWavePlayer.IsRunning">
            <summary>
            Gets a value indicating whether the audio playback is running.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.IWavePlayer.DesiredLatency">
            <summary>
            Gets or sets the desired latency in milliseconds
            Should be set before a call to Init
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.IWavePlayer.Renderer">
            <summary>
            Gets the renderer that owns this wave player.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.IWavePlayer.Start">
            <summary>
            Begin playback
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.IWavePlayer.Clear">
            <summary>
            Clears the internal audio data with silence data.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.IWaveProvider">
            <summary>
            Generic interface for all WaveProviders.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.IWaveProvider.WaveFormat">
            <summary>
            Gets the WaveFormat of this WaveProvider.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.IWaveProvider.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Fill the specified buffer with wave data.
            </summary>
            <param name="buffer">The buffer to fill of wave data.</param>
            <param name="offset">Offset into buffer</param>
            <param name="count">The number of bytes to read</param>
            <returns>
            the number of bytes written to the buffer.
            </returns>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.MmTime">
            <summary>
            http://msdn.microsoft.com/en-us/library/dd757347(v=VS.85).aspx
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.MmTime.Equals(Unosquare.FFME.Rendering.Wave.MmTime)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.PlaybackState">
            <summary>
            Enumerates the various wave output playback states
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.PlaybackState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.PlaybackState.Playing">
            <summary>
            Playing
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat">
            <summary>
            Supported wave formats for WaveOutCapabilities
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_1M08">
            <summary>
            11.025 kHz, Mono,   8-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_1S08">
            <summary>
            11.025 kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_1M16">
            <summary>
            11.025 kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_1S16">
            <summary>
            11.025 kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_2M08">
            <summary>
            22.05  kHz, Mono,   8-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_2S08">
            <summary>
            22.05  kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_2M16">
            <summary>
            22.05  kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_2S16">
            <summary>
            22.05  kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_4M08">
            <summary>
            44.1   kHz, Mono,   8-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_4S08">
            <summary>
            44.1   kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_4M16">
            <summary>
            44.1   kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_4S16">
            <summary>
             44.1   kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_44M08">
            <summary>
            44.1   kHz, Mono,   8-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_44S08">
            <summary>
            44.1   kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_44M16">
            <summary>
            44.1   kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_44S16">
            <summary>
            44.1   kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_48M08">
            <summary>
            48     kHz, Mono,   8-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_48S08">
            <summary>
             48     kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_48M16">
            <summary>
            48     kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_48S16">
            <summary>
            48     kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_96M08">
            <summary>
            96     kHz, Mono,   8-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_96S08">
            <summary>
            96     kHz, Stereo, 8-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_96M16">
            <summary>
            96     kHz, Mono,   16-bit
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.SupportedWaveFormat.WAVE_FORMAT_96S16">
            <summary>
            96     kHz, Stereo, 16-bit
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.WaveFormat">
            <summary>
            Represents a Wave file format
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveFormat.formatTag">
            <summary>The format tag -- always 0x0001 PCM</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveFormat.channels">
            <summary>number of channels</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveFormat.sampleRate">
            <summary>sample rate</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveFormat.averageBytesPerSecond">
            <summary>for buffer estimation</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveFormat.blockAlign">
            <summary>block size of data</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveFormat.bitsPerSample">
            <summary>number of bits per sample of mono data</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveFormat.extraSize">
            <summary>number of following bytes</summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.Wave.WaveFormat"/> class.
            PCM 48Khz stereo 16 bit signed, interleaved, 2-channel format
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.Wave.WaveFormat"/> class.
            </summary>
            <param name="sampleRate">Sample Rate</param>
            <param name="channels">Number of channels</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.Wave.WaveFormat"/> class.
            </summary>
            <param name="rate">The rate.</param>
            <param name="bits">The bits.</param>
            <param name="channels">The channels.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">channels - channels</exception>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveFormat.Channels">
            <summary>
            Returns the number of channels (1=mono,2=stereo etc)
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveFormat.SampleRate">
            <summary>
            Returns the sample rate (samples per second)
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveFormat.AverageBytesPerSecond">
            <summary>
            Returns the average number of bytes used per second
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveFormat.BlockAlign">
            <summary>
            Returns the block alignment
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveFormat.BitsPerSample">
            <summary>
            Returns the number of bits per sample (usually 16 or 32, sometimes 24 or 8)
            Can be 0 for some codecs
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveFormat.ExtraSize">
            <summary>
            Returns the number of extra bytes used by this wave format. Often 0,
            except for compressed formats which store extra data after the WAVEFORMATEX header
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveFormat.ConvertMillisToByteSize(System.Int32)">
            <summary>
            Gets the size of a wave buffer equivalent to the latency in milliseconds.
            </summary>
            <param name="milliseconds">The milliseconds.</param>
            <returns>The size</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveFormat.ConvertByteSizeToDuration(System.Int32)">
            <summary>
            Converts from byte size to duration
            </summary>
            <param name="byteSize">Size of the byte.</param>
            <returns>The duration given the byte size</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveFormat.ToString">
            <summary>
            Reports this WaveFormat as a string
            </summary>
            <returns>String describing the wave format</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveFormat.Equals(System.Object)">
            <summary>
            Compares with another WaveFormat object
            </summary>
            <param name="obj">Object to compare to</param>
            <returns>True if the objects are the same</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveFormat.GetHashCode">
            <summary>
            Provides a Hashcode for this WaveFormat
            </summary>
            <returns>A hashcode</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveFormat.Equals(Unosquare.FFME.Rendering.Wave.WaveFormat)">
            <inheritdoc />
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.WaveHeader">
            <summary>
            WaveHeader interop structure (WAVEHDR)
            http://msdn.microsoft.com/en-us/library/dd743837%28VS.85%29.aspx
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeader.DataBuffer">
            <summary>pointer to locked data buffer (lpData)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeader.BufferLength">
            <summary>length of data buffer (dwBufferLength)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeader.BytesRecorded">
            <summary>used for input only (dwBytesRecorded)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeader.UserData">
            <summary>for client's use (dwUser)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeader.Flags">
            <summary>assorted flags (dwFlags)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeader.Loops">
            <summary>loop control counter (dwLoops)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeader.Next">
            <summary>PWaveHdr, reserved for driver (lpNext)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeader.Reserved">
            <summary>reserved for driver</summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.WaveHeaderFlags">
            <summary>
            Wave Header Flags enumeration
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeaderFlags.BeginLoop">
            <summary>
            This buffer is the first buffer in a loop.  This flag is used only with output buffers.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeaderFlags.Done">
            <summary>
            Set by the device driver to indicate that it is finished with the buffer and is returning it to the application.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeaderFlags.EndLoop">
            <summary>
            This buffer is the last buffer in a loop.  This flag is used only with output buffers.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeaderFlags.InQueue">
            <summary>
            Set by Windows to indicate that the buffer is queued for playback.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveHeaderFlags.Prepared">
            <summary>
            Set by Windows to indicate that the buffer has been prepared with the waveInPrepareHeader or waveOutPrepareHeader function.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.WaveInterop">
            <summary>
            MME Wave function interop
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveInOutOpenFlags.CallbackNull">
            <summary>
            CALLBACK_NULL
            No callback
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveInOutOpenFlags.CallbackFunction">
            <summary>
            CALLBACK_FUNCTION
            dwCallback is a FAR PROC
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveInOutOpenFlags.CallbackEvent">
            <summary>
            CALLBACK_EVENT
            dwCallback is an EVENT handle
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveInOutOpenFlags.CallbackWindow">
            <summary>
            CALLBACK_WINDOW
            dwCallback is a HWND
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveInOutOpenFlags.CallbackThread">
            <summary>
            CALLBACK_THREAD
            callback is a thread ID
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveMessage.WaveInOpen">
            <summary>
            WIM_OPEN
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveMessage.WaveInClose">
            <summary>
            WIM_CLOSE
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveMessage.WaveInData">
            <summary>
            WIM_DATA
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveMessage.WaveOutClose">
            <summary>
            WOM_CLOSE
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveMessage.WaveOutDone">
            <summary>
            WOM_DONE
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveInterop.WaveMessage.WaveOutOpen">
            <summary>
            WOM_OPEN
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveInterop.RetrieveAudioDeviceCount">
            <summary>
            Retrieves the audio device count.
            </summary>
            <returns>The number of registered audio devices</returns>
            <exception cref="T:System.TimeoutException">Occurs when the interop lock cannot be acquired.</exception>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveInterop.AllocateHeader(System.IntPtr,Unosquare.FFME.Rendering.Wave.WaveHeader)">
            <summary>
            Allocates the header.
            </summary>
            <param name="deviceHandle">The device handle.</param>
            <param name="header">The header.</param>
            <exception cref="T:System.TimeoutException">Occurs when the interop lock cannot be acquired.</exception>
            <exception cref="T:Unosquare.FFME.Rendering.LegacyAudioException">Occurs when the MME interop call fails</exception>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveInterop.ReleaseHeader(System.IntPtr,Unosquare.FFME.Rendering.Wave.WaveHeader)">
            <summary>
            Releases the header.
            </summary>
            <param name="deviceHandle">The device handle.</param>
            <param name="header">The header.</param>
            <exception cref="T:System.TimeoutException">Occurs when the interop lock cannot be acquired.</exception>
            <exception cref="T:Unosquare.FFME.Rendering.LegacyAudioException">Occurs when the MME interop call fails</exception>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveInterop.WriteAudioData(System.IntPtr,Unosquare.FFME.Rendering.Wave.WaveHeader)">
            <summary>
            Writes the audio data.
            </summary>
            <param name="deviceHandle">The device handle.</param>
            <param name="header">The header.</param>
            <exception cref="T:System.TimeoutException">Occurs when the interop lock cannot be acquired.</exception>
            <exception cref="T:Unosquare.FFME.Rendering.LegacyAudioException">Occurs when the MME interop call fails</exception>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveInterop.OpenAudioDevice(System.Int32,Unosquare.FFME.Rendering.Wave.WaveFormat,Unosquare.FFME.Rendering.Wave.WaveInterop.WaveCallback,System.IntPtr,Unosquare.FFME.Rendering.Wave.WaveInterop.WaveInOutOpenFlags)">
            <summary>
            Opens the audio device.
            </summary>
            <param name="deviceId">The device identifier.</param>
            <param name="format">The format.</param>
            <param name="callback">The callback.</param>
            <param name="instanceHandle">The instance handle.</param>
            <param name="openFlags">The open flags.</param>
            <returns>The audio device handle</returns>
            <exception cref="T:System.TimeoutException">Occurs when the interop lock cannot be acquired.</exception>
            <exception cref="T:Unosquare.FFME.Rendering.LegacyAudioException">Occurs when the MME interop call fails</exception>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveInterop.OpenAudioDevice(System.Int32,Unosquare.FFME.Rendering.Wave.WaveFormat,Microsoft.Win32.SafeHandles.SafeWaitHandle,System.IntPtr,Unosquare.FFME.Rendering.Wave.WaveInterop.WaveInOutOpenFlags)">
            <summary>
            Opens the audio device.
            </summary>
            <param name="deviceId">The device identifier.</param>
            <param name="format">The format.</param>
            <param name="callbackHandle">The callback window handle.</param>
            <param name="instanceHandle">The instance handle.</param>
            <param name="openFlags">The open flags.</param>
            <returns>The audio device handle</returns>
            <exception cref="T:System.TimeoutException">Occurs when the interop lock cannot be acquired.</exception>
            <exception cref="T:Unosquare.FFME.Rendering.LegacyAudioException">Occurs when the MME interop call fails</exception>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveInterop.ResetAudioDevice(System.IntPtr)">
            <summary>
            Resets the audio device.
            </summary>
            <param name="deviceHandle">The device handle.</param>
            <exception cref="T:System.TimeoutException">Occurs when the interop lock cannot be acquired.</exception>
            <exception cref="T:Unosquare.FFME.Rendering.LegacyAudioException">Occurs when the MME interop call fails</exception>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveInterop.CloseAudioDevice(System.IntPtr)">
            <summary>
            Closes the audio device.
            </summary>
            <param name="deviceHandle">The device handle.</param>
            <exception cref="T:System.TimeoutException">Occurs when the interop lock cannot be acquired.</exception>
            <exception cref="T:Unosquare.FFME.Rendering.LegacyAudioException">Occurs when the MME interop call fails</exception>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveInterop.PauseAudioDevice(System.IntPtr)">
            <summary>
            Pauses the audio device.
            </summary>
            <param name="deviceHandle">The device handle.</param>
            <exception cref="T:System.TimeoutException">Occurs when the interop lock cannot be acquired.</exception>
            <exception cref="T:Unosquare.FFME.Rendering.LegacyAudioException">Occurs when the MME interop call fails</exception>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveInterop.RestartAudioDevice(System.IntPtr)">
            <summary>
            Restarts the audio device.
            </summary>
            <param name="deviceHandle">The device handle.</param>
            <exception cref="T:System.TimeoutException">Occurs when the interop lock cannot be acquired.</exception>
            <exception cref="T:Unosquare.FFME.Rendering.LegacyAudioException">Occurs when the MME interop call fails</exception>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveInterop.GetPlaybackBytesCount(System.IntPtr)">
            <summary>
            Gets the playback bytes count.
            </summary>
            <param name="deviceHandle">The device handle.</param>
            <returns>The number of bytes played during this session</returns>
            <exception cref="T:System.TimeoutException">Occurs when the interop lock cannot be acquired.</exception>
            <exception cref="T:Unosquare.FFME.Rendering.LegacyAudioException">Occurs when the MME interop call fails</exception>
            <exception cref="T:System.ArgumentException">Occurs when the device does not return a byte count.</exception>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveInterop.RetrieveAudioDeviceInfo(System.Int32)">
            <summary>
            Retrieves the audio device information.
            </summary>
            <param name="deviceId">The device identifier.</param>
            <returns>The audio device capabilities and metadata</returns>
            <exception cref="T:System.TimeoutException">Occurs when the interop lock cannot be acquired.</exception>
            <exception cref="T:Unosquare.FFME.Rendering.LegacyAudioException">Occurs when the MME interop call fails</exception>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.WaveInterop.NativeMethods">
            <summary>
            Contains the native methods for the Windows MME API
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.WaveOutBuffer">
            <inheritdoc/>
            <summary>
            A buffer of Wave samples for streaming to a Wave Output device
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveOutBuffer.#ctor(System.IntPtr,System.Int32,Unosquare.FFME.Rendering.Wave.IWaveProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.Wave.WaveOutBuffer"/> class.
            </summary>
            <param name="deviceHandle">WaveOut device to write to</param>
            <param name="bufferSize">Buffer size in bytes</param>
            <param name="waveStream">Stream to provide more data</param>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveOutBuffer.IsQueued">
            <summary>
            Whether the header's in queue flag is set
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.WaveOutBuffer.BufferSize">
            <summary>
            The buffer size in bytes
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveOutBuffer.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveOutBuffer.Clear">
            <summary>
            Clears the internal buffer data.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.WaveOutBuffer.ReadWaveStream">
            <summary>
            this is called by the Wave callback and should be used to refill the buffer.
            This calls the <see cref="M:Unosquare.FFME.Rendering.Wave.IWaveProvider.Read(System.Byte[],System.Int32,System.Int32)"/> method on the stream
            </summary>
            <returns>True when bytes were written. False if no bytes were written.</returns>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo">
            <summary>
            WaveOutCapabilities structure (based on WAVEOUTCAPS2 from mmsystem.h)
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.manufacturerId">
            <summary>
            wMid
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.productId">
            <summary>
            wPid
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.driverVersion">
            <summary>
            vDriverVersion
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.productName">
            <summary>
            Product Name
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.supportedFormats">
            <summary>
            Supported formats (bit flags) dwFormats
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.channels">
            <summary>
            Supported channels (1 for mono 2 for stereo) (wChannels)
            Seems to be set to -1 on a lot of devices
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.reserved">
            <summary>
            wReserved1
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.support">
            <summary>
            Optional functionality supported by the device
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.Channels">
            <summary>
            Number of channels supported
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.SupportsPlaybackRateControl">
            <summary>
            Whether playback rate control is supported
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.SupportsVolumeControl">
            <summary>
            Whether volume control is supported
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.SupportsChannelVolumeControl">
            <summary>
            Gets a value indicating whether this device supports independent channel volume control.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.SupportsPitchControl">
            <summary>
            Gets a value indicating whether this device supports pitch control.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.SupportsSampleAccuratePosition">
            <summary>
            Gets a value indicating whether the device returns sample-accurate position information.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.IsSynchronousOutput">
            <summary>
            Gets a value indicating whether the driver is synchronous and will block while playing a buffer.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.ProductName">
            <summary>
            The product name
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.NameGuid">
            <summary>
            The device name Guid (if provided)
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.ProductGuid">
            <summary>
            The product name Guid (if provided)
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.ManufacturerGuid">
            <summary>
            The manufacturer guid (if provided)
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.Equals(Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.LegacyAudioDeviceInfo.SupportsWaveFormat(Unosquare.FFME.Rendering.Wave.SupportedWaveFormat)">
            <summary>
            Checks to see if a given SupportedWaveFormat is supported
            </summary>
            <param name="waveFormat">The SupportedWaveFormat</param>
            <returns>true if supported</returns>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.WaveOutSupport">
            <summary>
            Flags indicating what features this WaveOut device supports
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutSupport.Pitch">
            <summary>supports pitch control</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutSupport.PlaybackRate">
            <summary>supports playback rate control</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutSupport.Volume">
            <summary>supports volume control (WAVECAPS_VOLUME)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutSupport.LRVolume">
            <summary>supports separate left-right volume control</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutSupport.Sync">
            <summary>Sync</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.Wave.WaveOutSupport.SampleAccurate">
            <summary>Sample-Accurate</summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.Wave.LegacyAudioPlayer">
            <summary>
            A wave player that opens an audio device and continuously feeds it
            with audio samples using a wave provider.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.LegacyAudioPlayer.#ctor(Unosquare.FFME.Rendering.AudioRenderer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.Wave.LegacyAudioPlayer" /> class.
            </summary>
            <param name="renderer">The renderer.</param>
            <param name="deviceNumber">The device number.</param>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioPlayer.Unosquare#FFME#Shared#ILoggingSource#LoggingHandler">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioPlayer.Renderer">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioPlayer.DesiredLatency">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioPlayer.NumberOfBuffers">
            <summary>
            Gets or sets the number of buffers used
            Should be set before a call to Init
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioPlayer.DeviceNumber">
            <summary>
            Gets the device number
            Should be set before a call to Init
            This must be between -1 and <see>DeviceCount</see> - 1.
            -1 means stick to default device even default device is changed
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioPlayer.PlaybackState">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioPlayer.IsRunning">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioPlayer.Capabilities">
            <summary>
            Gets the capabilities.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.Wave.LegacyAudioPlayer.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
              <c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.LegacyAudioPlayer.EnumerateDevices">
            <summary>
            Gets the Windows Multimedia Extensions (MME) devices in the system.
            </summary>
            <returns>The available MME devices</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.LegacyAudioPlayer.Start">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.LegacyAudioPlayer.Clear">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.LegacyAudioPlayer.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.Wave.LegacyAudioPlayer.PerformContinuousPlayback">
            <summary>
            Performs the continuous playback.
            </summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.LegacyAudioException">
            <inheritdoc />
            <summary>
            An exception representing an error in Windows Multimedia Audio
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.LegacyAudioException.#ctor(Unosquare.FFME.Rendering.LegacyAudioResult,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.LegacyAudioException"/> class.
            </summary>
            <param name="result">The result returned by the Windows API call</param>
            <param name="functionName">The name of the Windows API that failed</param>
        </member>
        <member name="P:Unosquare.FFME.Rendering.LegacyAudioException.FunctionName">
            <summary>
            Gets the name of the function that failed.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.LegacyAudioException.Result">
            <summary>
            Gets the Windows API result code.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.LegacyAudioException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="M:Unosquare.FFME.Rendering.LegacyAudioException.Try(Unosquare.FFME.Rendering.LegacyAudioResult,System.String)">
            <summary>
            Helper function to automatically raise an exception on failure
            </summary>
            <param name="result">The result of the API call</param>
            <param name="function">The API function name</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.LegacyAudioException.ErrorMessage(Unosquare.FFME.Rendering.LegacyAudioResult,System.String)">
            <summary>
            Creates an error message base don an error result.
            </summary>
            <param name="result">The result.</param>
            <param name="function">The function.</param>
            <returns>A descriptive error message</returns>
        </member>
        <member name="T:Unosquare.FFME.Rendering.SubtitlesControl">
            <summary>
            A control suitable for displaying subtitles.
            Layout is: UserControl:ViewBox:Grid:TextBlocks
            </summary>
            <seealso cref="T:System.Windows.Controls.UserControl" />
        </member>
        <member name="F:Unosquare.FFME.Rendering.SubtitlesControl.DefaultFontSize">
            <summary>
            The default font size
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.SubtitlesControl.DefaultTextForeground">
            <summary>
            The default text foreground
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.SubtitlesControl.DefaultTextOutline">
            <summary>
            The default text outline
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.SubtitlesControl.DefaultTextOutlineWidth">
            <summary>
            The default text outline width
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.SubtitlesControl.TextProperty">
            <summary>
            The text dependency property
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.SubtitlesControl.TextForegroundProperty">
            <summary>
            The text foreground dependency property
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.SubtitlesControl.TextForegroundEffectProperty">
            <summary>
            The text foreground effect dependency property
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.SubtitlesControl.TextOutlineWidthProperty">
            <summary>
            The text outline width dependency property
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.SubtitlesControl.TextOutlineProperty">
            <summary>
            The text outline dependency property
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.SubtitlesControl.TextBlocks">
            <summary>
            Holds the text blocks that together create an outlined subtitle text display.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.SubtitlesControl.Container">
            <summary>
            The container for the outlined text blocks
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.SubtitlesControl.CondenseTransform">
            <summary>
            A Layout transform to condense text.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitlesControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.SubtitlesControl"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.SubtitlesControl.Text">
            <summary>
            Gets or sets the text contents of this text block.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.SubtitlesControl.TextForeground">
            <summary>
            Gets or sets the text foreground.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.SubtitlesControl.TextOutline">
            <summary>
            Gets or sets the text outline.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.SubtitlesControl.TextOutlineWidth">
            <summary>
            Gets or sets the text outline width.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.SubtitlesControl.TextForegroundEffect">
            <summary>
            Gets or sets the text foreground effect.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitlesControl.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitlesControl.ComputeMargin(Unosquare.FFME.Rendering.SubtitlesControl.Block,System.Windows.Thickness)">
            <summary>
            Computes the margin according to the block type.
            </summary>
            <param name="blockType">Type of the block.</param>
            <param name="outlineWidth">Width of the outline.</param>
            <returns>A thickness depending on the block type</returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitlesControl.GetDefaultTextForegroundEffect">
            <summary>
            Gets the default text foreground effect
            </summary>
            <returns>A new instance of a foreground effect.</returns>
        </member>
        <member name="T:Unosquare.FFME.Rendering.LegacyAudioResult">
            <summary>
            Windows multimedia error codes from mmsystem.h.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.NoError">
            <summary>no error</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.UnspecifiedError">
            <summary>unspecified error</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.BadDeviceId">
            <summary>device ID out of range</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.NotEnabled">
            <summary>driver failed enable</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.AlreadyAllocated">
            <summary>device already allocated</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.InvalidHandle">
            <summary>device handle is invalid</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.NoDriver">
            <summary>no device driver present</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.MemoryAllocationError">
            <summary>memory allocation error</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.NotSupported">
            <summary>function isn't supported</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.BadErrorNumber">
            <summary>error value out of range</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.InvalidFlag">
            <summary>invalid flag passed</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.InvalidParameter">
            <summary>invalid parameter passed</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.HandleBusy">
            <summary>handle being used simultaneously on another thread (eg callback)</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.InvalidAlias">
            <summary>specified alias not found</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.BadRegistryDatabase">
            <summary>bad registry database</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.RegistryKeyNotFound">
            <summary>registry key not found</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.RegistryReadError">
            <summary>registry read error</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.RegistryWriteError">
            <summary>registry write error</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.RegistryDeleteError">
            <summary>registry delete error</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.RegistryValueNotFound">
            <summary>registry value not found</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.NoDriverCallback">
            <summary>driver does not call DriverCallback</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.MoreData">
            <summary>more data to be returned</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.WaveBadFormat">
            <summary>unsupported wave format</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.WaveStillPlaying">
            <summary>still something playing</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.WaveHeaderUnprepared">
            <summary>header not prepared</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.WaveSync">
            <summary>device is synchronous</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.AcmNotPossible">
            <summary>Conversion not possible</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.AcmBusy">
            <summary>Busy</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.AcmHeaderUnprepared">
            <summary>Header Unprepared</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.AcmCancelled">
            <summary>Cancelled</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.MixerInvalidLine">
            <summary>invalid line</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.MixerInvalidControl">
            <summary>invalid control</summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.LegacyAudioResult.MixerInvalidValue">
            <summary>invalid value</summary>
        </member>
        <member name="T:Unosquare.FFME.Rendering.AudioRenderer">
            <summary>
            Provides Audio Output capabilities by writing samples to the default audio output device.
            </summary>
            <seealso cref="T:Unosquare.FFME.Shared.IMediaRenderer" />
            <seealso cref="T:Unosquare.FFME.Rendering.Wave.IWaveProvider" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.#ctor(Unosquare.FFME.MediaEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.AudioRenderer"/> class.
            </summary>
            <param name="mediaCore">The core media engine.</param>
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioRenderer.Unosquare#FFME#Shared#ILoggingSource#LoggingHandler">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioRenderer.MediaElement">
            <summary>
            Gets the parent media element (platform specific).
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioRenderer.MediaCore">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioRenderer.WaveFormat">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioRenderer.Latency">
            <summary>
            Gets the realtime latency of the audio relative to the internal wall clock.
            A negative value means audio is ahead of the wall clock.
            A positive value means audio is behind of the wall clock.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioRenderer.Position">
            <summary>
            Gets current realtime audio position.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.AudioRenderer.HasFiredAudioDeviceStopped">
            <summary>
            Gets or sets a value indicating whether this instance has fired the audio device stopped event.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Render(Unosquare.FFME.Shared.MediaBlock,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Play">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Pause">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Stop">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Close">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Seek">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.WaitForReadyState">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.OnApplicationExit(System.Object,System.Windows.ExitEventArgs)">
            <summary>
            Called when [application exit].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.ExitEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Initialize">
            <summary>
            Initializes the audio renderer.
            Call the Play Method to start reading samples
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Destroy">
            <summary>
            Destroys the audio renderer.
            Makes it useless.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.Synchronize(System.Byte[],System.Int32,System.Int32,System.Double)">
            <summary>
            Synchronizes audio rendering to the wall clock.
            Returns true if additional samples need to be read.
            Returns false if silence has been written and no further reading is required.
            </summary>
            <param name="targetBuffer">The target buffer.</param>
            <param name="targetBufferOffset">The target buffer offset.</param>
            <param name="requestedBytes">The requested bytes.</param>
            <param name="speedRatio">The speed ratio.</param>
            <returns>
            True to continue processing. False to write silence.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.ReadAndSlowDown(System.Int32,System.Double)">
            <summary>
            Reads from the Audio Buffer and stretches the samples to the required requested bytes.
            This will make audio samples sound stretched (low pitch).
            The result is put to the first requestedBytes count of the ReadBuffer.
            requested
            </summary>
            <param name="requestedBytes">The requested bytes.</param>
            <param name="speedRatio">The speed ratio.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.ReadAndSpeedUp(System.Int32,System.Boolean,System.Double)">
            <summary>
            Reads from the Audio Buffer and shrinks (averages) the samples to the required requested bytes.
            This will make audio samples sound shrunken (high pitch).
            The result is put to the first requestedBytes count of the ReadBuffer.
            </summary>
            <param name="requestedBytes">The requested number of bytes.</param>
            <param name="computeAverage">if set to <c>true</c> average samples per block. Otherwise, take the first sample per block only</param>
            <param name="speedRatio">The speed ratio.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.ReadAndUseAudioProcessor(System.Int32,System.Double)">
            <summary>
            Reads from the Audio Buffer and uses the SoundTouch audio processor to adjust tempo
            The result is put to the first requestedBytes count of the ReadBuffer.
            This feature is experimental
            </summary>
            <param name="requestedBytes">The requested bytes.</param>
            <param name="speedRatio">The speed ratio.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.AudioRenderer.ApplyVolumeAndBalance(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Applies volume and balance to the audio samples stored in RedBuffer and writes them
            to the specified target buffer.
            </summary>
            <param name="targetBuffer">The target buffer.</param>
            <param name="targetBufferOffset">The target buffer offset.</param>
            <param name="requestedBytes">The requested number of bytes.</param>
        </member>
        <member name="T:Unosquare.FFME.Rendering.SubtitleRenderer">
            <summary>
            Subtitle Renderer - Does nothing at this point.
            </summary>
            <seealso cref="T:Unosquare.FFME.Shared.IMediaRenderer" />
        </member>
        <member name="F:Unosquare.FFME.Rendering.SubtitleRenderer.SyncLock">
            <summary>
            The synchronize lock
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.SubtitleRenderer.BlockText">
            <summary>
            Holds the text to be rendered when the Update method is called.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.SubtitleRenderer.RenderedText">
            <summary>
            Holds the text that was last rendered when Update was called.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.#ctor(Unosquare.FFME.MediaEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.SubtitleRenderer"/> class.
            </summary>
            <param name="mediaCore">The core media element.</param>
        </member>
        <member name="P:Unosquare.FFME.Rendering.SubtitleRenderer.Unosquare#FFME#Shared#ILoggingSource#LoggingHandler">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.SubtitleRenderer.MediaElement">
            <summary>
            Gets the parent media element (platform specific).
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.SubtitleRenderer.MediaCore">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.Close">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.Pause">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.Play">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.Stop">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.Seek">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.WaitForReadyState">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.Render(Unosquare.FFME.Shared.MediaBlock,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.SubtitleRenderer.SetText(System.String)">
            <summary>
            Sets the text to be rendered on the text blocks.
            Returns immediately because it queues the action on the UI thread.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="T:Unosquare.FFME.Rendering.VideoRenderer">
            <summary>
            Provides Video Image Rendering via a WPF Writable Bitmap
            </summary>
            <seealso cref="T:Unosquare.FFME.Shared.IMediaRenderer" />
        </member>
        <member name="F:Unosquare.FFME.Rendering.VideoRenderer.MediaPixelFormats">
            <summary>
            Contains an equivalence lookup of FFmpeg pixel format and WPF pixel formats.
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.VideoRenderer.IsRenderingInProgress">
            <summary>
            Set when a bitmap is being written to the target bitmap
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Rendering.VideoRenderer.TargetBitmap">
            <summary>
            The bitmap that is presented to the user.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.#ctor(Unosquare.FFME.MediaEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.FFME.Rendering.VideoRenderer"/> class.
            </summary>
            <param name="mediaCore">The core media element.</param>
        </member>
        <member name="P:Unosquare.FFME.Rendering.VideoRenderer.Unosquare#FFME#Shared#ILoggingSource#LoggingHandler">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.VideoRenderer.MediaElement">
            <summary>
            Gets the parent media element (platform specific).
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.VideoRenderer.MediaCore">
            <inheritdoc />
        </member>
        <member name="P:Unosquare.FFME.Rendering.VideoRenderer.DpiX">
            <summary>
            Gets the DPI along the X axis.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Rendering.VideoRenderer.DpiY">
            <summary>
            Gets the DPI along the Y axis.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.Play">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.Pause">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.Stop">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.Seek">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.WaitForReadyState">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.Update(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.Render(Unosquare.FFME.Shared.MediaBlock,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.Close">
            <inheritdoc />
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.RenderTargetBitmap(Unosquare.FFME.Events.BitmapDataBuffer)">
            <summary>
            Renders the target bitmap.
            </summary>
            <param name="bitmapData">The bitmap data.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.LockTargetBitmap(Unosquare.FFME.Shared.VideoBlock)">
            <summary>
            Initializes the target bitmap if not available and locks it for loading the back-buffer.
            This method needs to be called from the GUI thread.
            </summary>
            <param name="block">The block.</param>
            <returns>
            The locking result. Returns a null pointer on back buffer for invalid.
            </returns>
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.LoadTargetBitmapBuffer(Unosquare.FFME.Events.BitmapDataBuffer,Unosquare.FFME.Shared.VideoBlock)">
            <summary>
            Loads that target data buffer with block data
            </summary>
            <param name="target">The target.</param>
            <param name="source">The source.</param>
        </member>
        <member name="M:Unosquare.FFME.Rendering.VideoRenderer.ApplyLayoutTransforms(Unosquare.FFME.Shared.VideoBlock)">
            <summary>
            Applies the scale transform according to the block's aspect ratio.
            </summary>
            <param name="b">The b.</param>
        </member>
        <member name="T:Unosquare.FFME.Subtitles">
            <summary>
            Defines attached properties for subtitle rendering
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Subtitles.TextProperty">
            <summary>
            The foreground text property
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Subtitles.ForegroundProperty">
            <summary>
            The foreground text property
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Subtitles.EffectProperty">
            <summary>
            The text foreground effect dependency property
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Subtitles.OutlineWidthProperty">
            <summary>
            The text outline width dependency property
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Subtitles.OutlineBrushProperty">
            <summary>
            The text outline brush dependency property
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Subtitles.FontSizeProperty">
            <summary>
            The font size property
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Subtitles.FontWeightProperty">
            <summary>
            The font weight property
            </summary>
        </member>
        <member name="F:Unosquare.FFME.Subtitles.FontFamilyProperty">
            <summary>
            The font family property
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Subtitles.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Unosquare.FFME.Subtitles"/> class from being created.
            </summary>
        </member>
        <member name="M:Unosquare.FFME.Subtitles.GetText(Unosquare.FFME.MediaElement)">
            <summary>
            Gets the text.
            </summary>
            <param name="obj">The object.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Unosquare.FFME.Subtitles.GetFontSize(Unosquare.FFME.MediaElement)">
            <summary>
            Gets the size of the font.
            </summary>
            <param name="obj">The object.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Unosquare.FFME.Subtitles.GetFontWeight(Unosquare.FFME.MediaElement)">
            <summary>
            Gets the font weight.
            </summary>
            <param name="obj">The object.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Unosquare.FFME.Subtitles.GetFontFamily(Unosquare.FFME.MediaElement)">
            <summary>
            Gets the font family.
            </summary>
            <param name="obj">The object.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Unosquare.FFME.Subtitles.GetForeground(Unosquare.FFME.MediaElement)">
            <summary>
            Gets the text foreground.
            </summary>
            <param name="obj">The object.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Unosquare.FFME.Subtitles.GetEffect(Unosquare.FFME.MediaElement)">
            <summary>
            Gets the effect.
            </summary>
            <param name="obj">The object.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Unosquare.FFME.Subtitles.GetOutlineWidth(Unosquare.FFME.MediaElement)">
            <summary>
            Gets the width of the outline.
            </summary>
            <param name="obj">The object.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Unosquare.FFME.Subtitles.GetOutlineBrush(Unosquare.FFME.MediaElement)">
            <summary>
            Gets the outline brush.
            </summary>
            <param name="obj">The object.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Unosquare.FFME.Subtitles.SetText(Unosquare.FFME.MediaElement,System.String)">
            <summary>
            Sets the text.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Subtitles.SetFontSize(Unosquare.FFME.MediaElement,System.Double)">
            <summary>
            Sets the size of the font.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Subtitles.SetFontWeight(Unosquare.FFME.MediaElement,System.Windows.FontWeight)">
            <summary>
            Sets the font weight.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Subtitles.SetFontFamily(Unosquare.FFME.MediaElement,System.Windows.Media.FontFamily)">
            <summary>
            Sets the font family.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Subtitles.SetForeground(Unosquare.FFME.MediaElement,System.Windows.Media.Brush)">
            <summary>
            Sets the text foreground.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Subtitles.SetEffect(Unosquare.FFME.MediaElement,System.Windows.Media.Effects.Effect)">
            <summary>
            Sets the effect.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Subtitles.SetOutlineWidth(Unosquare.FFME.MediaElement,System.Windows.Thickness)">
            <summary>
            Sets the width of the outline.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.FFME.Subtitles.SetOutlineBrush(Unosquare.FFME.MediaElement,System.Windows.Media.Brush)">
            <summary>
            Sets the outline brush.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Unosquare.FFME.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Unosquare.FFME.Properties.Resources.FFmpegMediaElementBackground">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
    </members>
</doc>
